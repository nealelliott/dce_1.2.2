/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: unique2.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:19:49  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:56:13  marty]
 *
 * Revision 1.1.4.1  1995/12/11  19:31:37  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:16:41  root]
 * 
 * Revision 1.1.2.2  1993/08/11  16:30:27  ganni
 * 	tests for new IDL functionality
 * 	[1993/08/11  16:17:39  ganni]
 * 
 * $EndLog$
 */
/*
*/
[
uuid (52817c7c-ffc4-11c8-8ae4-08002b104860),
pointer_default(unique)
]
interface unique2
{
    typedef enum { red, green, blue } primary;

    typedef struct this_way_t {
        boolean *p_boolean;
        byte *p_byte;
        char *p_char;
        small *p_small;
        short *p_short;
        long *p_long;
        hyper *p_hyper;
        unsigned small *p_usmall;
        unsigned short *p_ushort;
        unsigned long *p_ulong;
        unsigned hyper *p_uhyper;
        float *p_float;
        double *p_double;
        primary *p_primary;
    } this_way_t;
        
    typedef struct that_way_t {
        double *p_double;
        float *p_float;
        unsigned hyper *p_uhyper;
        unsigned long *p_ulong;
        unsigned short *p_ushort;
        unsigned small *p_usmall;
        hyper *p_hyper;
        long *p_long;
        short *p_short;
        small *p_small;
        char *p_char;
        byte *p_byte;
        boolean *p_boolean;
        primary *p_primary;
    } that_way_t;

    void new_oper([in] handle_t h,
                  [in, unique] this_way_t *p_this_way,
                  [in, out, unique] that_way_t *p_that_way
                 );

    typedef struct tree_tag 
    {
        long key;
        struct tree_tag *left;
        struct tree_tag *right;
    } tree_t;

    small op1([in] handle_t h, 
              [in, unique] tree_t *t, 
              [in] long smallest,
              [in] long largest,
              [in] long checksum);

    typedef struct largenode {
        struct largenode *next;
        unsigned long array_size;
        [size_is(array_size)] long array_data[];
    } largenode;

    typedef struct smallnode {
        struct smallnode *next;
        unsigned short array_max;
        [last_is(array_max),max_is(array_max)] long array_data[];
    } smallnode, *smallnode_p;



    void largetosmall
    (
        [in] handle_t h,
        [in,unique] largenode *p_l,
        [in,out,unique] smallnode_p *p_s
    );

    void smalltolarge
    (
        [in] handle_t h,
        [in,unique] smallnode *p_s,
        [in,out,unique] largenode **p_l
    );

    const long NELEMENTS = 1000;

    boolean null_in_array 
    (
        [in] handle_t h, 
        [in, unique] short la[NELEMENTS]
    );

    boolean non_null_in_array 
    (
        [in] handle_t h, 
        [in, unique] short la[NELEMENTS],
        [in] long checksum
    );

    boolean null_in_out_array 
    (
        [in] handle_t h, 
        [in, out, unique] short la[NELEMENTS]
    );

    boolean non_null_in_out_array 
    (
        [in] handle_t h, 
        [in, out, unique] short la[NELEMENTS],
        [in, out] long *checksum
    );

    boolean varying_in_out_array
    (
        [in] handle_t h,
        [in, out, unique, length_is(*l)] short a[NELEMENTS],
        [in, out] long *l,
        [in, out] long *checksum
    );

    boolean conformant_in_out_array
    (
        [in] handle_t h,
        [in, out, unique, size_is(s)] short a[],
        [in] long s,
        [in, out] long *checksum
    );

    boolean conformant_varying_in_out_array
    (
        [in] handle_t h,
        [in, out, unique, length_is(*l), size_is(s)] short a[],
        [in, out] long *l,
        [in] long s,
        [in, out] long *checksum
    );

}

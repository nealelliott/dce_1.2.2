#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test7,v $
# Revision 1.1.16.1  1996/10/17  18:20:26  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:50:49  damon]
#
# Revision 1.1.11.2  1993/07/19  19:40:49  zeliff
# 	HP port of DFS
# 	[1993/07/19  18:31:11  zeliff]
# 
# Revision 1.1.9.3  1993/07/16  21:41:03  kissel
# 	*** empty log message ***
# 	[1993/06/21  14:53:53  kissel]
# 
# Revision 1.1.7.2  1993/06/04  20:18:39  kissel
# 	Initial HPUX RP version.
# 	[1993/06/03  22:41:28  kissel]
# 
# Revision 1.1.5.2  1993/02/05  21:10:52  maunsell_c
# 	hpux changes
# 	[1993/02/05  21:09:35  maunsell_c]
# 
# Revision 1.1.3.2  1993/02/05  17:09:33  maunsell_c
# 	01/29/93	maunsell_c	while [ $fileNum= -le $fileCount ],$proframName.$dir.$fileNum= remove=
# 
# Revision 1.1.4.4  1993/01/11  18:27:07  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:01:10  htf]
# 
# Revision 1.1.4.3  1992/10/28  16:22:41  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    No changes made.
# 	Transarc delta: jess-add-dumpkernel-in-fs-tests 1.3
# 	  Selected comments:
# 	    The icldump command and debug option for the tests have been added in the
# 	    fs test scripts. You can run fs/tests with -debug to dump kernel in case
# 	    of error. The delta also adds the icl_DumpKernel function in the C programm.
# 	    See above.
# 	    Put the debug option in test1.
# 	    When the debug is set the dumpfile is always created eventhough
# 	    there is no error.
# 	Transarc delta: jess-fs-path-for-icldump 1.1
# 	  Selected comments:
# 	    This delta adds the path for icldump command. The command has been
# 	    installed at "util" dir in test tree by Fred's delta.
# 	    See above.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/27  18:29:30  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:13:08  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Really no change
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    See above.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    Added error test err2 to the Makefile
# 	[1992/08/28  12:20:58  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  22:59:15  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/29  12:47:17  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:41:29  jaffe
# 	Transarc delta: fred-2980-and-2981-fix-sys 1.1
# 	  Selected comments:
# 	    To fix reported defects indicating files could not be found.  Added two
# 	    shell scripts, one to issue the correct command to get the system type
# 	    (either AFS or DFS), and a second to generate a file from a string.
# 	    Change variable sys to dfs_fsSysName and use fsSetSysName shell script.
# 	Transarc delta: fred-merge-tests 1.1
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test7,v $
# 	Revision 4.27  1994/11/01  22:23:29  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.26 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  19:28:45  jaffe]
# 
# $EndLog$
#
###############################################################################
#    Copyright (C) 1990, 1992 Transarc Corporation - All rights reserved      #
###############################################################################

# This script creates a directory structure containing a variable number
# of directories, each containing a variable number of 16-kilobyte files.
# The tree is repeatedly created, copied and then removed.

# Usage: test7 [-nt #-times] [-nd #-dirs] [-nf #-16K-files] [-debug]
# Note that -nd 4 -nf 16 uses roughly 2 megabytes of disk space.

# Note:  default is test7 -nt 1 -nd 1 -nf 1.

# Highest error number is: 3.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName creates and removes a directory tree"
    echo "Usage: $programName [-nt #-times] [-nd #-dirs] [-nf #-16K-files]"
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}

if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/fs
fi

. $UTIL_DIR/fs_FunctionsScript
. $UTIL_DIR/fs_SetSysVar
createFileCmd="$UTIL_DIR/fs_GenerateFile"

trap '
    cd $currentDir/$programName.$$
    rm -rf onek sixteen $programName.dir.[0-9]*
    echo "$programName killed returning $scriptErrorExit" | tee -a $logFile
    exit $scriptErrorExit
    ' 2 3 15

#
# Initialise setup variables
#

fs_InitSetup fs

#
# Default option argument values
#

directoryCount=1
fileCount=1
iterationCount=1

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage
                    exit $successExit
                    ;;

        nd|-nd)     CheckOptionValue "nd" $testSuiteType $programName $*
                    directoryCount=$2
                    shift
                    shift
                    ;;

        nf|-nf)     CheckOptionValue "nf" $testSuiteType $programName $*
                    fileCount=$2
                    shift
                    shift
                    ;;

        nt|-nt)     CheckOptionValue "nt" $testSuiteType $programName $*
                    iterationCount=$2
                    shift
                    shift
                    ;;
        debug|-debug)
                    dumpkernel="true"
                    shift
                    ;;

        *)          echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile
                    exit $scriptErrExit
                    ;;
    esac
done

#
# Validate arguments
#

if [ $directoryCount -lt 1 ]
then 
    echo "$programName: number of directories must be >= 1" | tee -a $logFile
    exit $scriptErrorExit
elif [ $fileCount -lt 1 ]
then 
    echo "$programName: number of files must be >= 1" | tee -a $logFile
    exit $scriptErrorExit
elif [ $iterationCount -lt 0 ]
then 
    echo "$programName: number of times must be >= 0" | tee -a $logFile
    exit $scriptErrorExit
fi

#
# Start test
#

(
	echo "$programName (many2) starting in $currentDir"
    echo "Host `hostname` ($fs_sysName)"
    date
) | tee -a $logFile

echo "$iterationCount times, $directoryCount directories, $fileCount 16-K files in each" | tee -a $logFile

fs_DetermineFSType

mkdir $programName.$$
cd $programName.$$

cat > onek << ==END==
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
==END==

cat onek onek onek onek onek onek onek onek onek onek onek onek onek onek onek onek > sixteen

iterationNum=1
while [ $iterationNum -le $iterationCount -o $iterationCount -eq 0 ]
do
    echo "$programName iteration number $iterationNum" | tee -a $logFile
    rm -rf $programName.dir.[0-9]*
    dir=1
    while [ $dir -le $directoryCount ]
    do
        mkdir $programName.dir.$dir
        cd $programName.dir.$dir
        fileNum=1
        while [ $fileNum -le $fileCount ]
        do
            cp ../sixteen $programName.$dir.$fileNum
            fileNum=`expr $fileNum + 1`
        done
        cd ..
        dir=`expr $dir + 1`
    done

    estimatedFileCount=`expr $directoryCount \* $fileCount`
    actualFileCount=`find $programName.dir.* -type f -print | wc -l`
    echo "Number of files obtained by find: $actualFileCount" | tee -a $logFile
    if [ $actualFileCount -ne $estimatedFileCount ]
    then 
        echo "- wrong number of files ($actualFileCount, not $estimatedFileCount) (E1)" | tee -a $logFile
        if [ $dumpkernel = "true" ]
        then
           $UTIL_DIR/icldump >> $logFile
        fi
        errorCount=`expr $errorCount + 1`
    fi

    estimatedTotalFileSize=`expr $estimatedFileCount \* 16384`
    actualTotalFileSize=`cat $programName.dir.[0-9]*/$programName.*.* | wc -c`
    echo "Filesizes obtained by wc: $actualTotalFileSize" | tee -a $logFile
    if [ $actualTotalFileSize -ne $estimatedTotalFileSize ]
    then 
        echo "- wrong total size ($actualTotalFileSize, not $estimatedTotalFileSize) (E2)" | tee -a $logFile
        if [ $dumpkernel = "true" ]
        then
           $UTIL_DIR/icldump >> $logFile
        fi
        errorCount=`expr $errorCount + 1`
    fi

    mkdir $currentDir/$programName.$$.2
    cp -r $currentDir/$programName.$$ $currentDir/$programName.$$.2
    diff -r $currentDir/$programName.$$ $currentDir/$programName.$$.2/$programName.$$ > /dev/null 2> /dev/null
    if [ $? -ne 0 ]
    then 
        echo "- diff -r failed (E3)" | tee -a $logFile
        if [ $dumpkernel = "true" ]
        then
           $UTIL_DIR/icldump >> $logFile
        fi
        errorCount=`expr $errorCount + 1`
    fi
    rm -rf $currentDir/$programName.$$.2

    (
        echo "$programName iteration $iterationNum done"
        echo ""
    ) | tee -a $logFile
    iterationNum=`expr $iterationNum + 1`
done

###############################################################################

cd $currentDir
rm -rf $programName.$$

(
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"
    date
) | tee -a $logFile

exit $errorCount

###############################################################################

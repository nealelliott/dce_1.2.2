#
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# @HP_COPYRIGHT@
#
# HISTORY
# $Log: Makefile,v $
# Revision 1.2.35.5  1996/11/13  17:57:24  arvind
# 	CAPI drop from DEC
# 	[1996/10/16  20:23 UTC  arvind  /main/DCE_1.2.2/arvind_capi/1]
#
# 	#
#
# 	Remove pkss related for international build
# 	[1996/09/26  16:18 UTC  cuti  /main/DCE_1.2.2/cuti_pk_fix/1]
#
# 	Audit for 1.2.2
# 	[1996/06/26  20:43 UTC  arvind  /main/DCE_1.2.2/1]
#
# Revision 1.2.35.4  1996/10/15  20:45:21  arvind
# 	OSF DCE 1.2.2 Drop 4.5
# 	[1996/10/15  20:09:28  arvind]
# 
# Revision 1.2.35.3  1996/10/04  16:32:18  arvind
# 	OSF DCE 1.2.2 Drop 4
# 	[1996/10/04  16:31:42  arvind]
# 
# Revision /main/DCE_1.2.2/6  1996/10/02  18:27 UTC  cuti
# 	Merge of cuti_pk_fix
# 
# 	Enhanced NO_GDS.
# 	[1996/09/17  00:12 UTC  sommerfeld  /main/DCE_1.2.2/sommerfeld_pk_kdc_1/1]
# 
# 	Conditionalize  HP build not to use pkss/pkc
# 	[1996/09/11  13:28 UTC  arvind  /main/DCE_1.2.2/arvind_pkss/7]
# 
# 	Conditionalize  HP build not to use pkss/pkc
# 	[1996/09/10  20:15 UTC  arvind  /main/DCE_1.2.2/arvind_pkss/6]
# 
# 	Conditionalize  HP build not to use pkss/pkc
# 	[1996/09/10  19:09 UTC  arvind  /main/DCE_1.2.2/arvind_pkss/2]
# 	Revision /main/DCE_1.2.2/cuti_pk_fix/1  1996/09/26  16:18 UTC  cuti
# 	Remove pkss related for international build
# 
# Revision /main/DCE_1.2.2/3  1996/09/09  21:23 UTC  arvind
# 	PKSS drop from DEC (DCE1.2.2)
# 	[1996/08/30  15:38 UTC  arvind  /main/DCE_1.2.2/arvind_pkss/1]
# 
# 	Merge from cuti_pk_export to DCE_1.2.2
# 	[1996/06/27  19:31 UTC  cuti  /main/cuti_pk_export/4]
# 	#
# 	Merge out from DCE122
# 	#
# 	feedback change
# 	[1996/06/27  14:48 UTC  cuti  /main/cuti_pk_export/3]
# 	#
# 	ADD libbsafe2.a
# 	[1996/06/27  13:52 UTC  cuti  /main/cuti_pk_export/2]
# 	#
# 	Audit for 1.2.2
# 	[1996/06/25  13:44 UTC  arvind  /main/arvind_audit122/1]
# 	#
# 	Audit for 1.2.2
# 	[1996/03/11  13:25:32  marty  1.2.32.2]
# 	#
# 
# Revision /main/DCE_1.2.2/2  1996/06/30  21:59 UTC  cuti
# 	Merge from cuti_pk_export to DCE_1.2.2
# 
# Revision /main/cuti_pk_export/4  1996/06/27  19:31 UTC  cuti
# 	Merge out from DCE122
# 
# 	feedback change
# 	[1996/06/27  14:48 UTC  cuti  /main/cuti_pk_export/3]
# 
# 	ADD libbsafe2.a
# 	[1996/06/27  13:52 UTC  cuti  /main/cuti_pk_export/2]
# 	Revision /main/DCE_1.2.2/1  1996/06/26  20:43 UTC  arvind
# 	Audit for 1.2.2
# 
# Revision /main/arvind_audit122/1  1996/06/25  13:44 UTC  arvind
# 	Audit for 1.2.2
# 
# Revision 1.2.32.2  1996/03/11  13:25:32  marty
# 	Update OSF copyright years
# 	[1996/03/11  13:13:41  marty]
# 
# Revision 1.2.32.1  1995/12/08  17:52:35  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/jrr_1.2_mothra/1  1995/11/16  21:29 UTC  jrr
# 	Fix FILE_MKPATH.
# 	[1995/12/08  16:27:17  root]
# 
# Revision 1.2.30.16  1994/06/21  14:40:58  marrek
# 	Remove _r libraries in June 1994 code submission.
# 	[1994/06/09  12:16:22  marrek]
# 
# Revision 1.2.30.15  1994/05/20  22:03:34  sommerfeld
# 	checkpoint.
# 	[1994/05/20  21:35:59  sommerfeld]
# 
# 	If ODE_UNDER_CLEARCASE, build all of libdce.a in one rule.
# 	[1994/05/17  19:08:46  sommerfeld]
# 
# Revision 1.2.30.14  1994/05/10  16:04:40  marrek
# 	libslog removed in April 1994 submission.
# 	[1994/04/27  14:33:36  marrek]
# 
# Revision 1.2.30.13  1994/04/18  00:14:49  pwang
# 	Loaded libdced.a into libdce OT#10158
# 	[1994/04/17  21:54:32  pwang]
# 
# Revision 1.2.30.12  1994/03/23  15:50:36  keutel
# 	GDS changes
# 	[1994/03/23  14:07:18  keutel]
# 
# Revision 1.2.30.9  1994/02/22  19:01:44  marrek
# 	Changes for libdce.
# 	[1994/02/10  17:04:53  marrek]
# 
# Revision 1.2.30.8  1994/01/26  16:26:48  bowe
# 	Added provisions for dce/utils/db44/*, which should be in libdce.
# 	[1994/01/26  16:07:05  bowe]
# 
# Revision 1.2.30.7  1994/01/25  22:53:29  bowe
# 	libdceutils_OFILES moved down a directory (to dce/utils/misc).
# 	Changed references appropriately.  (CR 9814)
# 	[1994/01/25  22:47:12  bowe]
# 
# Revision 1.2.30.6  1994/01/24  22:01:52  bowe
# 	Added provisions to include *.o files from dce/utils and
# 	dce/utils/acldb (by including their makefile and getting list of
# 	.o files from ${EXP_libacldb_OFILES} and ${EXP_libsvc_OFILES}.
# 	[1994/01/24  21:54:47  bowe]
# 
# Revision 1.2.30.5  1993/12/29  19:22:33  rsalz
# 	Move dce_cf_XXX from config to dce/utils/dcecf (OT CR 9663).
# 	[1993/12/29  16:00:07  rsalz]
# 
# Revision 1.2.30.4  1993/12/15  15:04:28  mario
# 	Reordered libsvc
# 	[1993/12/15  15:04:12  mario]
# 
# Revision 1.2.30.3  1993/12/14  16:57:56  mario
# 	Changes required to get svc built in libdce
# 	[1993/12/14  16:57:24  mario]
# 
# Revision 1.2.30.2  1993/12/07  17:54:37  mario
# 	Changed for ode2.3 - < and > becomes this except for RULES_MK
# 	[1993/12/07  17:25:25  mario]
# 
# Revision 1.2.27.2  1993/10/19  22:10:42  rsarbo
# 	add new DFS i/f to libdce that CDS will use to translate
# 	/: to the DFS junction
# 	[1993/10/19  22:10:06  rsarbo]
# 
# Revision 1.2.27.1  1993/10/04  18:13:20  marrek
# 	two libraries are built now
# 	[1993/10/04  18:12:33  marrek]
# 
# Revision 1.2.21.3  1993/07/19  19:37:59  zeliff
# 	HP port of DFS
# 	[1993/07/19  18:28:55  zeliff]
# 
# Revision 1.2.23.3  1993/07/16  21:01:20  kissel
# 	*** empty log message ***
# 	[1993/06/21  14:45:23  kissel]
# 
# Revision 1.2.21.2  1993/06/10  19:20:45  sommerfeld
# 	Remove gratuitous HPUX .if's.
# 	Change sense of NO_LATENT_DFS_SUPPORT to LATENT_DFS_SUPPORT
# 	      [1993/06/07  13:30:00  sommerfeld]
# 
# Revision 1.2.19.3  1993/06/04  20:14:52  robinson
# 	Update from HP product sources.
# 	[1993/06/04  19:02:03  robinson]
# 
# Revision 1.2.19.2  1993/04/02  19:35:37  sommerfeld
# 	Rearrange creation of libdce.a.
# 	[1993/03/15  19:23:26  sommerfe]
# 
# Revision 1.2.11.7  1993/01/29  19:50:00  zeliff
# 	Defect 6992 - BLD_OR_MKE changes: removing BUILD_OPTS from 'make' invocation.
# 	[1993/01/27  02:03:55  zeliff]
# 
# Revision 1.2.11.6  1993/01/15  22:36:24  rsarbo
# 	fix builds with NO_DFS
# 	[1993/01/15  22:33:41  rsarbo]
# 
# Revision 1.2.11.5  1992/12/30  17:25:51  zeliff
# 	Embedding copyright notice
# 	[1992/12/30  17:15:00  zeliff]
# 
# Revision 1.2.11.3  1992/11/12  18:18:02  rsarbo
# 	incorporate interfaces in file/security/dacl2acl and
# 	file/sys to libdce for DFS Episode ACL's
# 	[1992/11/12  17:59:32  rsarbo]
# 
# Revision 1.2.11.2  1992/11/06  21:25:58  john
# 	Turned off the default rule for .y.h: dependency.
# 	[1992/11/05  13:28:34  john]
# 	Revision 1.2.9.2  1992/11/09  14:55:05  rsarbo
# 	changes to link libafssys and libdacl2acl
# 
# Revision 1.2.2.8  1992/06/01  20:38:29  sekhar
# 	Merged Joe Pato's changes for restructuring of des code.
# 	Also defined EXP_libkrb5_OFILES for linking on PMAX.
# 	[1992/06/01  18:37:38  sekhar]
# 
# Revision 1.2.8.2  1992/05/15  21:47:16  pato
# 	Split up archive components to accomodate deficiency
# 	in Domain/OS ar.  (old list contained too many elements
# 	per command)
# 
# Revision 1.2.2.7  1992/05/12  17:23:43  mhickey
# 	Fixed erroneous comments, and added lots of info pertaining to shared
# 	library builds, as well as some info on debugging.
# 
# 	Defect 2198.
# 	[1992/05/12  17:18:39  mhickey]
# 
# Revision 1.2.2.6  1992/04/30  14:28:41  mckeen
# 	Adde .MAKE line and .ORDER line to force proper
# 	building in sandboxes.  Also added MAKEFILE_PASS
# 	definitions to exec of sub-make.
# 	[1992/04/30  14:05:16  mckeen]
# 
# Revision 1.2.2.5  1992/04/14  13:17:10  mishkin
# 	Add NO_THREADS check.
# 	[1992/04/10  19:41:25  mishkin]
# 
# Revision 1.2.2.4  1992/04/07  19:17:20  mckeen
# 	Merged up to mainline
# 	[1992/03/31  16:37:09  mckeen]
# 
# 	Added .ORDER line for sequential archiving of libdce parts.
# 	[1992/03/13  15:40:58  mckeen]
# 
# Revision 1.2.2.3  1992/02/04  22:02:39  mhickey
# 	Made extentsive changes to make this work on both platforms.
# 	Basically, ripped out the PMAX specific shared lib rules, and
# 	move some things around for the RIOS.
# 	[1992/02/04  21:57:40  mhickey]
# 
# Revision 1.2.3.6  1992/02/03  06:09:52  mhickey
# 	Changes for merge - Defect 2030
# 
# Revision 1.2.3.5  1992/02/03  05:58:32  mhickey
# 	Completed the work to make this file generic across the
# 	reference platforms.
# 
# Revision 1.2.3.4  1992/02/02  04:42:51  mhickey
# 	Fixed up includes for time
# 
# Revision 1.2.3.3  1992/02/01  19:49:54  mhickey
# 	Fixed to work with time.mk
# 
# Revision 1.2.3.2  1992/01/31  22:02:08  mhickey
# 	Fixed for merge
# 
# Revision 1.2.2.2  1992/01/21  19:45:17  mhickey
# 	Fixed the rule for subdir recursion to create "straight" pathnames.
# 	The use of "crooked" paths; ie: went through libdce; were breaking the
# 	build when libdce was non-existent (because it was in the backing tree).
# 	[1992/01/21  19:43:11  mhickey]
# 
# Revision 1.2  1992/01/19  22:13:23  devrcs
# 	Dropping DCE1.0 OSF1_misc port archive
# 
# $EndLog$
#
#
# 
#  OSF DCE Version 1.0 


# Define this so that when we include the sub-group's Makefile we will know
# only to define common variables.

LIBDCE_LIBRARY_MAKEFILE =

#
# Note that in addition to the usual export_<libname> target, we also
# specify SUBLIBS_BUILT.  This target (see below) causes 'make' or 'build'
# to visit each of the directories where the component libraries are built,
# making sure that the library's '.o' files are up-to-date relative to their
# sources.
#
ILIST                   = libdce.a
IDIR                    = /usr/lib/
EXPDIR                  = /usr/lib/
EXPLIB_TARGETS          = SUBLIBS_BUILT export_libdce.a


#
# Optional library ordering
#
# Note that if you want to turn on library ordering, you must have 
# OBJECT_FORMAT defined as well.  Note also that library ordering does not
# currently work for any platform except AIX (OBJECT_FORMAT=AIXCOFF).
#

# ORDER_LIBRARIES=


#
# Construct one master OFILES list from each sub-groups individual OFILES 
# definition. 
#
# The procedure we have to follow is this:
#   1. set LIBDCE_CURR_INCDIR to the directory from which we are about to 
#      include the Makefile.  The component makefiles (<comp>.mk) will set
#      variables depending on this value.  Note that this should be of the
#      form "<comp>/x/" to match the MAKESUB value for the target directory.
#      This form is a convention for consistency, not a requirement of the
#      implementation.
#
#   2. .include the component ".mk" file to get proper definitions for 
#      per-directory variables like ${${TARGET_MACHINE}_OFILES}.
#   
#   3. .include the Makefile from the directory where the library for this 
#      group gets built.  At this point, we should have all the definitions
#      that we need to set the list of OFILES for the group.
#
#   4. Set EXP_<lib>_OFILES to the list for this 
#      group, using the ":=" operator.  This forces expansion of variables 
#      like ${${TARGET_MACHINE}_OFILES}, that may get different values for the
#      next group, to be expanded when the assignment takes place.
#
#   5. set libdce*_OFILES to the concatenation of all the EXP_* lists. Note 
#      that at this time we also prepend the relative path to the directory
#      where the '.o' files for each library are built.  This gives make the 
#      proper path for checking modification times for the '.o' files.  Adding
#      the relative path also prevents name collisions between '.o' files from
#      different components.
#
# Note that this makefile depends upon the definition of a list 
# libXXX_OFILES in the Makefile in the directory where each library is built.
# 

#
# Set the component ".mk" file path for each library to make the include 
# stanzas cleaner.
#

THREADS_MKPATH       = ${MAKETOP}/threads
RPC_MKPATH           = ${MAKETOP}/rpc
DCED_MKPATH	     = ${MAKETOP}/admin/dced
DIRECTORY_CDSMKPATH  = ${MAKETOP}/directory/cds
DIRECTORY_GDSMKPATH  = ${MAKETOP}/directory/gds
DIRECTORY_XDSMKPATH  = ${MAKETOP}/directory/xds
DIRECTORY_XOMMKPATH  = ${MAKETOP}/directory/xom
DIRECTORY_XOMSMKPATH = ${MAKETOP}/directory/xoms
TIME_MKPATH          = ${MAKETOP}/time
SECURITY_MKPATH      = ${MAKETOP}/security
FILE_MKPATH	     = ${MAKETOP}/file
BSAFELIB             = ${BSAFE_ROOT}/usr/lib/libbsafe2.a


.if !defined(NO_THREADS)
# libcma.a files
LIBDCE_CURR_INCDIR = threads/
.if exists(${THREADS_MKPATH}/threads.mk)
.include "${THREADS_MKPATH}/threads.mk"
.endif
.include "${MAKETOP}/threads/Makefile"
EXP_libcma_OFILES := ${libcma_OFILES}
.endif

.if defined(NO_DFS) && !defined(LATENT_DFS_SUPPORT)
# do nothing
.else
# libdacl2acl.a, libafssys.a and libdfsjunct.a files
LIBDCE_CURR_INCDIR = file/security/dacl2acl/
.if exists(${FILE_MKPATH}/file.mk)
.include "${FILE_MKPATH}/file.mk"
.endif

.include "${MAKETOP}/file/security/dacl2acl/Makefile"
EXP_libdacl2acl_OFILES := ${libdacl2acl_OFILES}

LIBDCE_CURR_INCDIR = file/sys/
.include "${MAKETOP}/file/sys/Makefile"
EXP_libafssys_OFILES := ${libafssys_OFILES}

LIBDCE_CURR_INCDIR = file/ncscompat/
.include "${MAKETOP}/file/ncscompat/Makefile"
EXP_libdfsjunct_OFILES := ${libdfsjunct_OFILES}
.endif

# libdce_conf.a files
LIBDCE_CURR_INCDIR = dce/utils/dcecf/
.include "${MAKETOP}/dce/utils/dcecf/Makefile"
EXP_libdce_conf_OFILES := ${libdce_conf_OFILES}


# libnck.a files
LIBDCE_CURR_INCDIR = rpc/runtime/
.if exists(${RPC_MKPATH}/rpc.mk)
.include "${RPC_MKPATH}/rpc.mk"
.endif
.include "${MAKETOP}/rpc/runtime/Makefile"
EXP_libnck_OFILES := ${libnck_OFILES}


# libidl.a files
LIBDCE_CURR_INCDIR = rpc/idl/lib/
.if exists(${MAKETOP}/rpc/rpc.mk)
.include "${MAKETOP}/rpc/rpc.mk"
.endif
.include "${MAKETOP}/rpc/idl/lib/Makefile"
EXP_libidl_OFILES := ${libidl_OFILES}

# libdced.a files
LIBDCE_CURR_INCDIR = admin/dced/api/
.if exists(${DCED_MKPATH}/dced.mk)
.include "${DCED_MKPATH}/dced.mk"
.endif
.include "${MAKETOP}/admin/dced/api/Makefile"
EXP_libdced_OFILES := ${libdced_OFILES}

# libcds.a files
LIBDCE_CURR_INCDIR = directory/cds/library/
.if exists(${DIRECTORY_CDSMKPATH}/cds.mk)
.include "${DIRECTORY_CDSMKPATH}/cds.mk"
.endif
.include "${MAKETOP}/directory/cds/library/Makefile"
EXP_libcds_OFILES := ${libcds_OFILES}

# libsec.a files
LIBDCE_CURR_INCDIR = security/utils/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/utils/Makefile"
EXP_libsec_OFILES := ${libsec_OFILES}

# libpsm.a files
LIBDCE_CURR_INCDIR = security/psm/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/psm/Makefile"
EXP_libpsm_OFILES := ${libpsm_OFILES}

.if ${TARGET_MACHINE}!="HP800" && defined (USE_DES)
# libpk.a files
LIBDCE_CURR_INCDIR = security/pkc/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/Makefile"
EXP_libpk_OFILES := ${libpk_OFILES}

# libpkssapi.a files
LIBDCE_CURR_INCDIR = security/pkc/pkss/server/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/pkss/server/Makefile"
EXP_libpkssapi_OFILES := ${libpkssapi_OFILES}

#
# capi 
#
# libpkcrypto.a files
LIBDCE_CURR_INCDIR = security/pkc/capi/crypto/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/capi/crypto/Makefile"
EXP_libpkcrypto_OFILES := ${libpkcrypto_OFILES}

# libpkxds.a files
LIBDCE_CURR_INCDIR = security/pkc/xds/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/xds/Makefile"
EXP_libpkxds_OFILES := ${libpkxds_OFILES}

# libpkplcy.a files
LIBDCE_CURR_INCDIR = security/pkc/capi/plcy/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/capi/plcy/Makefile"
EXP_libpkplcy_OFILES := ${libpkplcy_OFILES}

# libpktrust.a files
LIBDCE_CURR_INCDIR = security/pkc/capi/trust/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/pkc/capi/trust/Makefile"
EXP_libpktrust_OFILES := ${libpktrust_OFILES}


.endif


# libutc.a files
#
# include this with no LIBDCE_CURR_INCDIR set to get the mode, then 
# include it again to get the proper definitions
#
.if exists(${TIME_MKPATH}/time.mk)
.include "${TIME_MKPATH}/time.mk"
.endif
LIBUTC_MODE := ${DTS_LIBUTC_MODE}
LIBDCE_CURR_INCDIR = time/libutc/${LIBUTC_MODE}/
.if exists(${TIME_MKPATH}/time.mk)
.include "${TIME_MKPATH}/time.mk"
.endif
.include "${MAKETOP}/time/libutc/${LIBUTC_MODE}/Makefile"
EXP_libutc_OFILES := ${libutc_OFILES}

# libasn1.a files
LIBDCE_CURR_INCDIR = directory/gds/ASN1/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/ASN1/Makefile"
EXP_libasn1_OFILES := ${libasn1_OFILES}

.if !defined(NO_GDS)
# libdua_sec.a files
LIBDCE_CURR_INCDIR = directory/gds/gds_sec/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/gds_sec/Makefile"
EXP_libdua_sec_OFILES := ${libdua_sec_OFILES}

# libdua.a files
LIBDCE_CURR_INCDIR = directory/gds/dua/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/dua/Makefile"
EXP_libdua_OFILES := ${libdua_OFILES}

# libd21sw.a files - DUA Switch library
LIBDCE_CURR_INCDIR = directory/gds/dua/switch/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/dua/switch/Makefile"
EXP_libd21sw_OFILES := ${libd21sw_OFILES}

# libd27.a files - GDS utilities
LIBDCE_CURR_INCDIR = directory/gds/util/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/util/Makefile"
EXP_libd27_OFILES := ${libd27_OFILES}

# libd23.a files - GDS IPC
LIBDCE_CURR_INCDIR = directory/gds/ipc/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/ipc/Makefile"
EXP_libd23_OFILES := ${libd23_OFILES}

# libosiaddr.a -  GDS OSI address library
LIBDCE_CURR_INCDIR = directory/gds/osiadr/
.if exists(${DIRECTORY_GDSMKPATH}/gds.mk)
.include "${DIRECTORY_GDSMKPATH}/gds.mk"
.endif
.include "${MAKETOP}/directory/gds/osiadr/Makefile"
EXP_libosiaddr_OFILES := ${libosiaddr_OFILES}

# libXDS.a files
LIBDCE_CURR_INCDIR = directory/xds/
.if exists(${DIRECTORY_XDSMKPATH}/xds.mk)
.include "${DIRECTORY_XDSMKPATH}/xds.mk"
.endif
.include "${MAKETOP}/directory/xds/Makefile"
EXP_libXDS_OFILES := ${libXDS_OFILES}

# libxom.a files
LIBDCE_CURR_INCDIR = directory/xom/
.if exists(${DIRECTORY_XOMMKPATH}/xom.mk)
.include "${DIRECTORY_XOMMKPATH}/xom.mk"
.endif
.include "${MAKETOP}/directory/xom/Makefile"
EXP_libXOM_OFILES := ${libXOM_OFILES}

# libxoms.a files - XOM Convenience library
LIBDCE_CURR_INCDIR = directory/xoms/
.if exists(${DIRECTORY_XOMSMKPATH}/xoms.mk)
.include "${DIRECTORY_XOMSMKPATH}/xoms.mk"
.endif
.include "${MAKETOP}/directory/xoms/Makefile"
EXP_libxoms_OFILES := ${libxoms_OFILES}
.endif

# libkrb5.a files
NO_Y_H_RULE=ON
LIBDCE_CURR_INCDIR = security/krb5/lib/krb5/
.if exists(${SECURITY_MKPATH}/security.mk)
.include "${SECURITY_MKPATH}/security.mk"
.endif
.include "${MAKETOP}/security/krb5/lib/krb5/Makefile"
EXP_libkrb5a_OFILES := ${libkrb5a_OFILES}
EXP_libkrb5b_OFILES := ${libkrb5b_OFILES}
EXP_libkrb5_OFILES := ${libkrb5_OFILES}

# libsvc.a files
LIBDCE_CURR_INCDIR = dce/utils/svc/ 
.include "${MAKETOP}/dce/utils/svc/Makefile"
EXP_libsvc_OFILES := ${libsvc_OFILES}

# libacldb.a files
LIBDCE_CURR_INCDIR = dce/utils/acldb/ 
.include "${MAKETOP}/dce/utils/acldb/Makefile"
EXP_libacldb_OFILES := ${libacldb_OFILES}

# libdceutils.a files
LIBDCE_CURR_INCDIR = dce/utils/misc/
.include "${MAKETOP}/dce/utils/misc/Makefile"
EXP_libdceutils_OFILES := ${libdceutils_OFILES}

# libdb44.a files
LIBDCE_CURR_INCDIR = dce/utils/db44/
.include "${MAKETOP}/dce/utils/db44/Makefile"
EXP_libdb44_OFILES := ${libdb44_OFILES}

#
# Define the search path for the objects that will comprise libdce.a. 
# Generally, this will be a colon (:) seperated list of the relative paths 
# to the directories where each library whose objects comprise this library
# are built.
#
SLIST                   = ${MAKETOP}/dce/utils/dcecf
.if !defined(NO_THREADS)
SLIST                  := ${SLIST}:${MAKETOP}/threads
.endif
SLIST                  := ${SLIST}:${MAKETOP}/rpc/runtime
SLIST		       := ${SLIST}:${MAKETOP}/rpc/idl/lib
SLIST                  := ${SLIST}:${MAKETOP}/directory/cds/library
SLIST                  := ${SLIST}:${MAKETOP}/security/utils
SLIST                  := ${SLIST}:${MAKETOP}/security/psm
.if ${TARGET_MACHINE}!="HP800" && defined (USE_DES)
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc/pkss/server
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc/capi/crypto
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc/xds
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc/capi/plcy
SLIST                  := ${SLIST}:${MAKETOP}/security/pkc/capi/trust
.endif
.if defined(NO_DFS) && !defined(LATENT_DFS_SUPPORT)
# do nothing
.else
SLIST                  := ${SLIST}:${MAKETOP}/file/security/dacl2acl
SLIST                  := ${SLIST}:${MAKETOP}/file/sys
SLIST                  := ${SLIST}:${MAKETOP}/file/ncscompat
.endif
SLIST                  := ${SLIST}:${MAKETOP}/admin/dced/api
SLIST                  := ${SLIST}:${MAKETOP}/time/libutc/${LIBUTC_MODE}
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/ASN1
.if !defined(NO_GDS)
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/dua
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/dua/switch
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/gds_sec
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/ipc
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/util
SLIST                  := ${SLIST}:${MAKETOP}/directory/gds/osiadr
SLIST                  := ${SLIST}:${MAKETOP}/directory/xds
SLIST                  := ${SLIST}:${MAKETOP}/directory/xom
SLIST                  := ${SLIST}:${MAKETOP}/directory/xoms
.endif
SLIST                  := ${SLIST}:${MAKETOP}/security/krb5/lib/krb5
SLIST                  := ${SLIST}:${MAKETOP}/dce/utils/svc
SLIST                  := ${SLIST}:${MAKETOP}/dce/utils/acldb
SLIST                  := ${SLIST}:${MAKETOP}/dce/utils/misc
SLIST                  := ${SLIST}:${MAKETOP}/dce/utils/db44
SLIST                  := ${SLIST}:${MAKETOP}/security/audit/libaudit

#
# Define each of the subdirectories that contain parts of the library
# We do this to make the build visit the subdirs to make sure that the
# objects are up to date before we process them for inclusion in this library.
# Note that we will process these ourselves, so we use LIBDCE_SUBLIB_SUBDIRS, 
# not EXPLIB_SUBDIRS.
# 
LIBDCE_SUBLIB_SUBDIRS          = ${SLIST:S/:/ /g}


###########################################################################
###########################################################################
# 
# Special library rules for libdce.a and libdce.so
#
###########################################################################
#
# First, tell make to just save these rules for future reference, and don't
# take them too seriously; they are not the main targets
#
.NOTMAIN: libdce.a libdce_1.a libdce_2.a libdce_3.a SUBLIBS_BUILT ${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g}

###########################################################################
########################################################################### 
###              OFILES AND RULES FOR libdce.a                          ###
###########################################################################
########################################################################### 
#                                                                         #
# The master OFILES list for libdce.a
#
libdce_1.a_OFILES =             \
        ${EXP_libdce_conf_OFILES:S;^;../dce/utils/dcecf/;g} \
        ${EXP_libcma_OFILES:S;^;../threads/;g}        \
        ${EXP_libnck_OFILES:S;^;../rpc/runtime/;g}    \
        ${EXP_libidl_OFILES:S;^;../rpc/idl/lib/;g}    \
        ${EXP_libsvc_OFILES:S;^;../dce/utils/svc/;g}  \
        ${EXP_libacldb_OFILES:S;^;../dce/utils/acldb/;g} \
        ${EXP_libdceutils_OFILES:S;^;../dce/utils/misc/;g} \
        ${EXP_libdced_OFILES:S;^;../admin/dced/api/;g} \
        ${EXP_libdb44_OFILES:S;^;../dce/utils/db44/;g}

.if !defined(NO_DFS) || !!defined(LATENT_DFS_SUPPORT)
DFS_OFILES=${EXP_libdacl2acl_OFILES:S;^;../file/security/dacl2acl/;g}	\
	${EXP_libafssys_OFILES:S;^;../file/sys/;g} \
	${EXP_libdfsjunct_OFILES:S;^;../file/ncscompat/;g}
.endif

libdce_2.a_OFILES =             \
        ${EXP_libcds_OFILES:S;^;../directory/cds/library/;g} \
	${DFS_OFILES}

libdce_3.a_OFILES =             \
        ${EXP_libsec_OFILES:S;^;../security/utils/;g} \
	${EXP_libpk_OFILES:S;^;../security/pkc/;g} \
	${EXP_libpsm_OFILES:S;^;../security/psm/;g} \
	${EXP_libpkssapi_OFILES:S;^;../security/pkc/pkss/server/;g} \
	${EXP_libpkcrypto_OFILES:S;^;../security/pkc/crypto/;g} \
	${EXP_libpkxds_OFILES:S;^;../security/pkc/xds/;g} \
	${EXP_libpkplcy_OFILES:S;^;../security/pkc/capi/plcy/;g} \
	${EXP_libpktrust_OFILES:S;^;../security/pkc/capi/trust/;g} \
        ${EXP_libutc_OFILES:S;^;../time/libutc/${LIBUTC_MODE}/;g} \
        ${EXP_libasn1_OFILES:S;^;../directory/gds/ASN1/;g}

libdce_4.a_OFILES =             \
        ${EXP_libkrb5a_OFILES:S;^;../security/krb5/lib/krb5/;g} 

libdce_5.a_OFILES =             \
        ${EXP_libkrb5b_OFILES:S;^;../security/krb5/lib/krb5/;g} 

.if !defined(NO_GDS)
libdce_6.a_OFILES =             \
        ${EXP_libdua_OFILES:S;^;../directory/gds/dua/;g}	\
        ${EXP_libd21sw_OFILES:S;^;../directory/gds/dua/switch/;g}	\
        ${EXP_libd23_OFILES:S;^;../directory/gds/ipc/;g}	\
        ${EXP_libd27_OFILES:S;^;../directory/gds/util/;g}	\
        ${EXP_libosiaddr_OFILES:S;^;../directory/gds/osiadr/;g}	\
        ${EXP_libXDS_OFILES:S;^;../directory/xds/;g}  \
        ${EXP_libXOM_OFILES:S;^;../directory/xom/;g} \
        ${EXP_libxoms_OFILES:S;^;../directory/xoms/;g} \
        ${EXP_libdua_sec_OFILES:S;^;../directory/gds/gds_sec/;g}
.endif
#                                                                         #
########################################################################### 
###             END OF OFILES AND RULES FOR libdce.a                    ###
###########################################################################


###########################################################################
########################################################################### 
###              OFILES AND RULES FOR libdce.so                         ###
###########################################################################
########################################################################### 
#                                                                         #
#
# The master OFILES list for libdce.so
#
libdce_1.o_OFILES = 		\
	${EXP_libdce_conf_OFILES:S;^;../dce/utils/dcecf/;g} \
	${EXP_libcma_OFILES:S;^;../threads/;g}	\
	${EXP_libnck_OFILES:S;^;../rpc/runtime/;g}	\
	${EXP_libidl_OFILES:S;^;../rpc/idl/lib/;g}	\
	${EXP_libsvc_OFILES:S;^;../dce/utils/svc/;g}	\
	${EXP_libacldb_OFILES:S;^;../dce/utils/acldb/;g} \
	${EXP_libdceutils_OFILES:S;^;../dce/utils/misc/;g} \
        ${EXP_libdced_OFILES:S;^;../admin/dced/api/;g} \
	${EXP_libdb44_OFILES:S;^;../dce/utils/db44/;g}

.if defined(NO_DFS) && !defined(LATENT_DFS_SUPPORT)
libdce_2.o_OFILES =            \
	${EXP_libcds_OFILES:S;^;../directory/cds/library/;g} \
	${EXP_libsec_OFILES:S;^;../security/utils/;g}	\
	${EXP_libpk_OFILES:S;^;../security/pkc/;g} \
	${EXP_libpsm_OFILES:S;^;../security/psm/;g} \
	${EXP_libpkssapi_OFILES:S;^;../security/pkc/pkss/server/;g} \
        ${EXP_libpkcrypto_OFILES:S;^;../security/pkc/crypto/;g} \
        ${EXP_libpkxds_OFILES:S;^;../security/pkc/xds/;g} \
        ${EXP_libpkplcy_OFILES:S;^;../security/pkc/capi/plcy/;g} \
        ${EXP_libpktrust_OFILES:S;^;../security/pkc/capi/trust/;g} \
	${EXP_libutc_OFILES:S;^;../time/libutc/${LIBUTC_MODE}/;g} \
	${EXP_libasn1_OFILES:S;^;../directory/gds/ASN1/;g}
.else
libdce_2.o_OFILES =            \
	${EXP_libcds_OFILES:S;^;../directory/cds/library/;g} \
	${EXP_libsec_OFILES:S;^;../security/utils/;g}	\
	${EXP_libpk_OFILES:S;^;../security/pkc/;g} \
	${EXP_libpsm_OFILES:S;^;../security/psm/;g} \
	${EXP_libpkssapi_OFILES:S;^;../security/pkc/pkss/server/;g} \
        ${EXP_libpkcrypto_OFILES:S;^;../security/pkc/crypto/;g} \
        ${EXP_libpkxds_OFILES:S;^;../security/pkc/xds/;g} \
        ${EXP_libpkplcy_OFILES:S;^;../security/pkc/capi/plcy/;g} \
        ${EXP_libpktrust_OFILES:S;^;../security/pkc/capi/trust/;g} \
	${EXP_libdacl2acl_OFILES:S;^;../file/security/dacl2acl/;g}	\
	${EXP_libafssys_OFILES:S;^;../file/sys/;g}	\
	${EXP_libdfsjunct_OFILES:S;^;../file/ncscompat/;g}	\
	${EXP_libutc_OFILES:S;^;../time/libutc/${LIBUTC_MODE}/;g} \
	${EXP_libasn1_OFILES:S;^;../directory/gds/ASN1/;g}
.endif

.if !defined(NO_GDS)
libdce_3.o_OFILES =            \
	${EXP_libXOM_OFILES:S;^;../directory/xom/;g} \
	${EXP_libxoms_OFILES:S;^;../directory/xoms/;g} \
	${EXP_libXDS_OFILES:S;^;../directory/xds/;g} \
	${EXP_libdua_OFILES:S;^;../directory/gds/dua/;g} \
	${EXP_libd21sw_OFILES:S;^;../directory/gds/dua/switch/;g} \
	${EXP_libdua_sec_OFILES:S;^;../directory/gds/gds_sec/;g} \
	${EXP_libd23_OFILES:S;^;../directory/gds/ipc/;g} \
	${EXP_libd27_OFILES:S;^;../directory/gds/util/;g} \
	${EXP_libosiaddr_OFILES:S;^;../directory/gds/osiadr/;g}
.endif

libdce_4.o_OFILES =            \
	${EXP_libkrb5_OFILES:S;^;../security/krb5/lib/krb5/;g}

#                                                                         #
########################################################################### 
###             END OF OFILES AND RULES FOR libdce.so                   ###
###########################################################################



#
# Make SUBLIBS_BUILT, which 'make' will attempt to build first in the 
# EXP[SH]LIB pass, depend on each of the directories where a component library
# is built.  We don't want to specify the directories themselves, since we want
# 'make' to go looking for a rule for updating them.
#
SUBLIBS_BUILT:  ${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g}

#
# Set the target that 'make' or 'build' will attempt to generate in each of
# the directories where a component library is built.  This target is useful
# for:
#       1. debugging - eg: SUBMAKE_TARGET=print_env causes the environment
#                          in which make will run to be printed.  NOTE: if
#                          you wish to specify options for the invocations of
#                          make that are run in other directories to build 
#                          pieces of libdce; ie: '-n' for debugging; you can do 
#                          this by setting BUILD_OPTS=<options> either in the 
#                          environment or on the command line.
#
#       2. cleanup   - eg: SUBMAKE_TARGET=clobber_all will remove the objects
#                          that make up the component libraries.  Actually, 
#                          since this Makefile has the paths of all of the .o
#                          files from which it is built, specifying clobber_all
#                          on the command line will also work.
#                          
# If not set on the command line (the usual case), the SUBMAKE_TARGET is 
# export_all_EXPLIB for static library builds, or export_all_EXPSHLIB for
# shared library builds.
#
.if ${USE_SHARED_LIBRARIES}
SUBMAKE_TARGET ?= export_all_EXPSHLIB
.else
SUBMAKE_TARGET ?= export_all_EXPLIB
.endif

#
# Optionally include machdep.mk
#
# Given the differences in the ways that shared libraries are handled on different
# platforms, we include a target-machine specific makefile, if it is present, to
# allow a different paradigm for building the library to be defined; ie: on some
# platforms (RIOS), only a shared libdce is built; on others (PMAX), both static
# and shared versions of libdce are built, and must be built differently.  Some 
# notes about modifying the behavior of the libdce build via a target-machine 
# specific makefile follow.
#
#  o If the desired result of the build is something other than libdce.a; 
#    eg: libdce.so; then the target-machine makefile should specify the desired 
#    target in the EXPSHLIB_TARGETS list.  If the desired result IS libdce.so, then
#    the target-machine specific makefile can probably be derived from the PMAX
#    machdep.mk file.  In any case, the target_machine specific makefile wiil need
#    to specify a dependency between the desired target and a list of OFILES; eg:
#      <result>_OFILES = file.o, file.o, ...
#
#      <result>: <result>_OFILES
#
#    Given the length of this list, it is often necessary to break the OFILES list
#    into a number of pieces, and construct the library incrementally.
#
#  o On some platforms, the '.o' files that make up shared libraries must be 
#    compiled differently than those making up archive libraries.  The common
#    makefiles (in src/lbe/mk) contain a series of make variable settings that
#    add flags to all of the compile lines for the source tree if the variable
#    USE_SHARED_LIBRARIES is assiged a non-zero value (see src/Makeconf).  If 
#    a shared library is desired, and the '.o' files must be compiled as 
#    described above, then the make variable settings at the bottom of the 
#    osf.dce.mk file can be exploited or added to to get the desired flags on the
#    compiler and linker lines.
#
#  o If rules are associated with the target libdce in the target-machine specific
#    makefile, they will override the default rules for generating a libdce.a.  
#
#    NOTE: If the machdep.mk file will define the sources for building 
#    libdce.a then it should also define LIBDCE_SOURCES_DEFINED; ie:
#    LIBDCE_SOURCES_DEFINED=
#    so that the lines below setting up rules for libdce.a do not cause 
#    processing of the libdce_*.a_OFILES lists.
#
#

.if exists(${TARGET_MACHINE}/machdep.mk)
.include "${TARGET_MACHINE}/machdep.mk"
.endif

#
# Rules for libdce.a
#
# Depending on the model for building shared libraries for the TARGET_MACHINE,
# we may not want to archive all of the .o's.  If the machdep.mk defines
# the sources and for libdce, then it should also define 
# LIBDCE_SOURCES_DEFINED so that 'make' will not archive all of the .o files
# that make up libdce as defined in the lists above.
#
# NOTE: we don't recommend puttinglibbsafe2.a into libdce.a.  However, 
#       if for some reason you need to do it. Here is how:
#
# 1. Makeup another .a name, such as libdce_7.a
#
# 2. Add building block to it:
#
#libdce_7.a: ${BAFELIB}
#	d="foo$$$$" ;\
#	mkdir $$d ;\
#	cd $$d ;\
#	${_AR_} x ../${BSAFELIB} ;\
#	cd .. ;\
#	${_AR_} ${DEF_ARFLAGS} libdce.a $$d/*.o ;\
#	rm -rf $$d
#	${_RANLIB_} libdce.a
#
# NOTE: we only have to do the ranlib on the last one (libdce_6.a)
#

.if defined(ODE_UNDER_CLEARCASE)
libdce.a: ${libdce_1.a_OFILES} ${libdce_2.a_OFILES} ${libdce_3.a_OFILES} ${libdce_4.a_OFILES} ${libdce_5.a_OFILES} ${libdce_6.a_OFILES}
	rm -f libdce.a
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_1.a_OFILES}
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_2.a_OFILES}
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_3.a_OFILES}
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_4.a_OFILES}
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_5.a_OFILES}
.if !defined(NO_GDS)
	${_AR_} ${DEF_ARFLAGS} libdce.a ${libdce_6.a_OFILES}
.endif
	${_RANLIB_} libdce.a
.else
libdce.a: ${LIBDCE_SOURCES_DEFINED:D:Ulibdce_1.a libdce_2.a libdce_3.a libdce_4.a libdce_5.a libdce_6.a}

libdce_1.a: libdce.a($${libdce_1.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}

libdce_2.a: libdce.a($${libdce_2.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}

libdce_3.a: libdce.a($${libdce_3.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}

libdce_4.a: libdce.a($${libdce_4.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}

libdce_5.a: libdce.a($${libdce_5.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}

libdce_6.a: libdce.a($${libdce_6.a_OFILES})
	${_AR_} ${DEF_ARFLAGS} libdce.a ${.OODATE}
.endif


#
# if we are running in the sandbox environment, then we may be building with
# split backing trees.  If we ARE building with split backing trees, then we
# must run 'build', not make, in the component subdirs in order to reset the
# environment correctly.  This is necessary since only 'build' understands the
# concept of split backing trees; this is not within the realm of 'make'
# functionality.  
# 
# The tool we run depends on the value of SOURCEDIR; the LBE scripts set this 
# to "", but in the sandbox environment, it always 
# has a value.  
#
# NOTE
# ----
# if you know that you DON'T have split backing trees,
# you can set BLD_OR_MAKE=make in the environment or on the command line and
# your builds will probably be faster.
#
.if ${SOURCEDIR} != ""
BLD_OR_MKE ?= build
.else
BLD_OR_MKE ?= make
.endif

#
# Rule for recursion in component library directories.
#
# If we are using 'build', we do the following.:
#   1. Check for existence of the source directory.  If it does not exist, 
#      we create it, storing the output from makepath; which tells what 
#      directories were created; in a file in the created directory as a
#      marker that we should cleanup after we build.  We need the directory
#      since we must run 'build' when building the component libraries when  
#      we do not know if we are running in a split backing tree sandbox, and
#      'build' does not run in the object tree.  We make the assumption 
#      that it is "all right" (read: necessary in this case, but deprecated)
#      to create the directory in the src tree since we must be building in
#      a sandbox, in which case the creation will not cause any problems.
#      Note that the sandbox is in a consistent state after the build since
#      all created directories are removed after they are used.
#
#   2. Clear the environmental variables that make uses to determine it's 
#      location.  This is necessary to prevent 'make' from complaining about
#      being confused about where it is running.
#
#   3. Change to the directory in the src tree for the component library, and
#      run 'build'.  If the variable BUILD_OPTS is specified in the environment
#      or on the command line to be group of options to 'build', then 'build'
#      will be run with the options specified.
#
#   4. If the marker file that indicates that we created directories in the src
#      tree exists, then read it to determine the directories that we created, 
#      and remove them.
#
#
# Note that we run build in the subdir rule to handle split backing trees in 
# the sandbox environment.
#
# If we are using build, we just create the object directory to build in, if
# necessary, change to the directory and run 'make'.
#
${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g}: 
.if ${BLD_OR_MKE} == "build"
	if [ ! -d ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;} ]; then \
	   makepath ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;}/ > /usr/tmp/build.made 2>& 1; \
	   mv /usr/tmp/build.made ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;}; \
	fi;
	unset _MAKECONF _MAKEIOD _MAKECWD _MAKEPSD MAKEDIR; \
	cd ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;} && exec ${BLD_OR_MKE} ${MAKEFLAGS} ${BUILD_OPTS} ${MAKEFILE_PASS:DMAKEFILE_PASS=${MAKEFILE_PASS}} ${SUBMAKE_TARGET}
	if [ -f ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;}/build.made ]; then \
	   ${RM} -rf `head -1 ${_MAKECONF:H}/${.TARGET:S/^subdir_//:S/\/\//\//:S;^${MAKETOP};;}/build.made | awk -F":" '{print $$1}'`; \
	fi
.else
	if [ ! -d ${.TARGET:S/^subdir_//:S/\/\//\//g} ]; then \
	   makepath ${.TARGET:S/^subdir_//:S/\/\//\//g}/; \
	fi; 
	cd ${.TARGET:S/^subdir_//:S/\/\//\//g} && exec ${BLD_OR_MKE} ${MAKEFLAGS} ${MAKEFILE_PASS:DMAKEFILE_PASS=${MAKEFILE_PASS}} ${SUBMAKE_TARGET}
.endif

.undef LIBDCE_LIBRARY_MAKEFILE

.MAKE: ${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g}
.ORDER: ${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g} libdce_1.a libdce_2.a libdce_3.a libdce_4.a libdce_5.a libdce_6.a
.ORDER: ${LIBDCE_SUBLIB_SUBDIRS:S/^/subdir_/g} libdce_1.o libdce_2.o libdce_3.o libdce_4.o

.include <${RULES_MK}>
.include <osf.debugvar.mk>

print_sl_ofiles:
	@echo "libdce_1.o_OFILES=\"${libdce_1.o_OFILES}\"" | tr ' ' '\012'
	@echo "libdce_2.o_OFILES=\"${libdce_2.o_OFILES}\"" | tr ' ' '\012'
	@echo "libdce_3.o_OFILES=\"${libdce_3.o_OFILES}\"" | tr ' ' '\012'
	@echo "libdce_4.o_OFILES=\"${libdce_4.o_OFILES}\"" | tr ' ' '\012'

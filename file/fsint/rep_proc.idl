/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: rep_proc.idl,v $
 * Revision 1.1.9.1  1996/10/02  17:47:08  damon
 * 	Newest DFS from Transarc
 * 	[1996/10/01  18:37:36  damon]
 *
 * Revision 1.1.4.1  1994/06/09  14:08:01  annie
 * 	fixed copyright in src/file
 * 	[1994/06/09  13:22:56  annie]
 * 
 * Revision 1.1.2.4  1993/01/21  19:36:16  zeliff
 * 	Embedding copyright notices
 * 	[1993/01/19  19:49:57  zeliff]
 * 
 * Revision 1.1.2.3  1992/11/24  17:48:25  bolinger
 * 	Change include file install directory from .../afs to .../dcedfs.
 * 	[1992/11/22  17:59:31  bolinger]
 * 
 * Revision 1.1.2.2  1992/08/31  19:46:03  jaffe
 * 	Transarc delta: cfe-ot4029-portable-rpc-data-types 1.2
 * 	  Selected comments:
 * 	    If ``long'' could possibly mean ``64 bits'' any time soon, we need to keep
 * 	    our RPC interfaces from breaking.
 * 	    see above
 * 	    More of the same.  Forgot a couple of .idl files, and needed to change
 * 	    a couple of procedure signatures to match.
 * 	[1992/08/30  02:26:58  jaffe]
 * 
 * Revision 1.1  1992/01/19  02:51:18  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
/*
 *  Copyright (C) 1991 Transarc Corporation.
 *  All Rights Reserved
 */

/*
 * AFS (4.0) Replication Server call declarations
 */

[
uuid(4d37f2dd-ed43-0005-02c0-37cf1e000000),
version(4.0)
/* provider_version(1) */
]

interface REP
{
      import "dcedfs/rep_data.idl";

error_status_t REP_CheckReplicationConfig
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsHyper *cellIdP,
	[in] afsHyper *volIdP,
	[in] unsigned32 flags,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);
      
error_status_t REP_AllCheckReplicationConfig
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsHyper *cellIdP,
	[in] afsHyper *volIdP,
	[in] unsigned32 howManyGuys,
	[in] afsNetAddrs *TheseGuysToo,
	[in] unsigned32 flags,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);

error_status_t REP_KeepFilesAlive
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsFids *files,
	[in] unsigned32 howManyFiles,
	[in] unsigned32 flags,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);
      
error_status_t REP_GetVolChangedFiles
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsHyper *cellIdP,
	[in] afsHyper *volIdP,
	[in] afsHyper *initialVV,
	[in] afsHyper *finalVV,
	[in] unsigned32 cookie,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] afsHyper *reallyFinalVV,
	[out] unsigned32 *nextCookieP,
	[out] fidsInVol *fidPerVolP,
	[out] unsigned32 *numFidsInVolP,
	[out] unsigned32 *flagsP,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);

error_status_t REP_GetRepStatus
(/* provider_version(1) */
	[in] handle_t h,
	[in] unsigned32 cookie,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] unsigned32 *nextCookieP,
	[out] repStatuses *StatusesP,
	[out] unsigned32 *howManyStatuses,
	[out] unsigned32 *flagsP,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);

error_status_t REP_GetRepServerStatus
(/* provider_version(1) */
	[in] handle_t h,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] repserverStatus *repserverStat,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);

error_status_t REP_UpdateSelf
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsHyper *cellIdP,
	[in] afsHyper *volIdP,
	[in] unsigned32 flags,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);
      
error_status_t REP_Probe
(/* provider_version(1) */
	[in] handle_t h
);

error_status_t REP_GetOneRepStatus
(/* provider_version(1) */
	[in] handle_t h,
	[in] afsHyper *cellIdP,
	[in] afsHyper *volIdP,
	[in] unsigned32 spare1,
	[in] unsigned32 spare2,
	[in] unsigned32 spare3,
	[out] repStatus *StatusP,
	[out] unsigned32 *flagsP,
	[out] unsigned32 *spare4,
	[out] unsigned32 *spare5
);

error_status_t REP_GetServerInterfaces
(/* provider_version(1) */
	[in] handle_t h,
	[in, out] dfs_interfaceList *serverInterfacesP
);

}

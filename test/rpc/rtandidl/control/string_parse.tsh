# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
#
# Copyright (c) 1991 by
#    Hewlett-Packard Company, Palo Alto, Ca.
#
# Permission to use, copy, modify, and distribute this
# software and its documentation for any purpose and without
# fee is hereby granted, provided that the above copyright
# notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting
# documentation, and that the name of Hewlett-Packard Company not
# be used in advertising or publicity pertaining to distribution
# of the software without specific, written prior permission.
# Hewlett-Packard Company makes no representations about the
# suitability of this software for any purpose.  It is provided
# "as is" without express or implied warranty.
#
#
# DCE API Test
#
# HISTORY
# $Log: string_parse.tsh,v $
# Revision 1.1.4.2  1996/03/11  02:25:58  marty
# 	Update OSF copyright years
# 	[1996/03/10  19:59:02  marty]
#
# Revision 1.1.4.1  1995/12/11  20:01:31  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  19:42:18  root]
# 
# Revision 1.1.2.2  1993/01/11  22:09:03  bbelch
# 	Embedding copyright notice
# 	[1993/01/06  18:02:09  bbelch]
# 
# Revision 1.1  1992/01/19  20:06:11  devrcs
# 	Initial revision
# 
# Revision 1.1  91/09/12  11:59:52  marco
# 	Initial revision
# 
# $EndLog$
#
#
#
echo
echo Begin string parse tests.
echo 
#
#
#
# Import the environment and literal deefinition files
#
include tshrc
include string.tshrc
#
set TEST=string_binding_parse
#
# Perform a valid test just to make sure
#
test $TEST \
"1 All valid data" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"2 Invalid UUID" \
$NORMAL_TEST $rpc_s_ok $InValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"3 Invalid Protocol Sequence" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $InValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"4 Invalid Network Address" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $InValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"5 Invalid Endpoint" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$InValidEndPoint $ValidOptions
#
#
test $TEST \
"6 Invalid Options" \
$NORMAL_TEST $rpc_s_invalid_string_binding $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $InValidOptions
#
#
#test $TEST \
#"7 NULL UUID" \
#$NORMAL_TEST $rpc_s_ok $NULL_TOKEN $ValidProtSeq $ValidNetAddr \
#$ValidEndPoint $ValidOptions
#
#
#test $TEST \
#"8 NULL protocol sequence" \
#$NORMAL_TEST $rpc_s_ok $ValidUUID $NULL_TOKEN $ValidNetAddr \
#$ValidEndPoint $ValidOptions
#
#
#test $TEST \
#"9 NULL Network Address" \
#$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $NULL_TOKEN \
#$ValidEndPoint $ValidOptions
#
#
#test $TEST \
#"10 NULL Endpoint" \
#$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
#$NULL_TOKEN $NULL_TOKEN
#
#
#test $TEST \
#"11 NULL Option" \
#$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
#$ValidEndPoint $NULL_TOKEN
#
#
test $TEST \
"12 NIL UUID" \
$NORMAL_TEST $rpc_s_ok $NIL_TOKEN $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"13 NIL protocol sequence" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $NIL_TOKEN $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"14 NIL Network Address" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $NIL_TOKEN \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"15 NIL Endpoint" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$NIL_TOKEN $ValidOptions
#
#
test $TEST \
"16 NIL Option" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $NIL_TOKEN
#
#
test $TEST \
"17 Valid data ip tcp" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq0 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"18 Valid data dnet nsp" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq1 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"19 Valid data osi nsp" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq2 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"20 Valid data osi tp4" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq3 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"21 Valid data ip udp" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq4 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"22 Valid data dg dds" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq5 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"23 Valid data ip" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq6 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"24 Valid data ip" \
$NORMAL_TEST $rpc_s_ok $ValidUUID $ValidProtSeq7 $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"25 do not parse uuid" \
$NULL_UUID $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"26 do not parse Protocol Sequence" \
$NULL_PROTSEQ $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"27 do not parse network address" \
$NULL_NET_ADDR $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"28 do not parse endpoint" \
$NULL_ENDPOINT $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
test $TEST \
"29 do not parse network options" \
$NULL_OPTIONS $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
$ValidEndPoint $ValidOptions
#
#
#
#
# A copy of this memory test exists in memory.tsh along with all of 
# the other memory tests.  It should be run from there.
#
# test $TEST \
# "17 Memroy Error Test" \
# $MEMORY_ERROR $rpc_s_ok $ValidUUID $ValidProtSeq $ValidNetAddr \
# $ValidEndPoint $ValidOptions
#
#
echo
#
subtotal clear
summary
#
#
echo 
echo End string parse tests.
echo
#
# End of proto_test.tsh

/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: afs.idl,v $
 * Revision 1.1.6.2  1996/03/11  02:28:40  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  20:00:23  marty]
 *
 * Revision 1.1.6.1  1995/12/11  20:14:31  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:47:20  root]
 * 
 * Revision 1.1.4.2  1993/01/13  19:54:34  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  18:22:26  bbelch]
 * 
 * Revision 1.1.2.2  1992/05/01  13:48:29  rsalz
 * 	 22-aug-92 labossiere    pipe_t -> afstest_pipe_t
 * 	[1992/04/30  23:22:32  rsalz]
 * 
 * Revision 1.2  1992/01/19  22:14:09  devrcs
 * 	Dropping DCE1.0 OSF1_misc port archive
 * 
 * $EndLog$
 */
/*
 */
/* 
 *  OSF DCE Version 1.0 
*/
/*
 * This is a sampling of the AFS Cache Manager Interface operations
 * that appears to provide fairly complete coverage of the RPC features used.
 *
 * Essentially all of these operations use:
 *      context_handle
 *      [in], [out] of scalars and structs by ref
 *      [in], [out] of nested large structures
 *      error_status_t function return values
 *
 * Additional features used are identified with specific operations.
 * These include:
 *    size_is - not for strings
 *    string - e.g. typedef [string] char 	NameString_t[AFS_NAMEMAX];
 *    pipe of bytes
 *
 * ref pointers in structs  (see the Bulk types)
 * full pointers in structs           "
 *
 * Since all operations return an error_status_t, they are at least capable
 * of easily using the ACF to specify [{comm,fault}_status].
 */

[uuid(7d5cc778-afc1-11c9-87e0-08001e021b34), version(3),
 pointer_default(ref)]

interface AFS4Int
{

const char *ncstest_afs_name = "basic afs test";

/* ================== following came from afscommon.idl ==================== */

const long 	AFS_NAMEMAX	= 256;    /* Including NULL ?????  */
const long 	AFS_PATHMAX	= 1024;

const long      AFS_MAX_BULKVV    = 32;
const long      AFS_MAX_BULKVOLID = 32;

typedef pipe     byte 	afstest_pipe_t;

typedef uuid_t afsUUID;

typedef struct {
	unsigned long sec;
	unsigned long usec;
} afsTimeval;

typedef struct {
	unsigned long high;
	unsigned long low;
} afsHyper;

typedef struct {
	afsHyper Cell;
	afsHyper Volume;
	unsigned long Vnode;
	unsigned long Unique;
} afsFid;

typedef struct {
	afsHyper tokenID;
	unsigned long expirationTime;
	afsHyper type;
	unsigned long beginRange;	
	unsigned long endRange;
} afsToken;

typedef [string] char 	NameString_t[AFS_NAMEMAX];
typedef [string] char 	PathString_t[AFS_PATHMAX];

/* ================== above came from afscommon.idl ==================== */

/* ================== following came from afs4int.idl ==================== */

typedef [context_handle]  void  *AFS_ctxt_h; 

typedef struct {
	afsHyper VolID;
	afsHyper VV;
	unsigned long VVAge;
	unsigned long VVPingAge;
} afsVolSync;

typedef struct {
	unsigned long		interfaceVersion;
	unsigned long		fileType;
	unsigned long		linkCount;
	unsigned long		length;
	afsHyper		dataVersion;
	unsigned long		author;
	unsigned long		owner;
	unsigned long		group;
	unsigned long		callerAccess;
	unsigned long		anonymousAccess;
	unsigned long		mode;
	unsigned long		parentVnode;
	unsigned long		parentUnique;
	afsTimeval 		modTime;
	afsTimeval 		changeTime;
	afsTimeval	 	accessTime;
	afsTimeval 		serverModTime;
	afsUUID			typeUUID;
	afsUUID			objectUUID;
	unsigned long 		spare0;
	unsigned long 		spare1;
	unsigned long 		spare2;
	unsigned long 		spare3;
	unsigned long 		spare4;
	unsigned long 		spare5;
	unsigned long 		spare6;
	unsigned long 		spare7;
} afsFetchStatus;

typedef struct {
	unsigned long		mask;
	afsTimeval		modTime;
	afsTimeval		accessTime;
	afsTimeval		changeTime;
	unsigned long		owner;
	unsigned long		group;
	unsigned long		mode;
	unsigned long		length;
	afsUUID			typeUUID;
	unsigned long		spare1;
	unsigned long		spare2;
	unsigned long		spare3;
	unsigned long		spare4;
	unsigned long		spare5;
} afsStoreStatus;

/*
 * These were changed from max_is to size_is.
 */

/*
 * afsBulkVVs are only [out] and therefore must use a "ptr" pointer.
 * The caller must free the "*afsBulkVVs_val" storage!
 */
typedef struct {
        long afsBulkVVs_len;
        [length_is(afsBulkVVs_len)] afsVolSync afsBulkVVs_val[AFS_MAX_BULKVOLID];
} afsBulkVVs;

typedef struct {
        long afsBulkVolIDs_len;
        [length_is(afsBulkVolIDs_len)] afsHyper afsBulkVolIDs_val[AFS_MAX_BULKVOLID];
} afsBulkVolIDs;

/*
 * ================== Operations =====================
 */

/*
 * Context handle creation.
 */
error_status_t ncstest_AFS_GetCtxtHdl
(	[in]	handle_t	h,
	[in]	unsigned long	initTime,
	[out]	AFS_ctxt_h	*ctxt_h
);

/*
 * We need a routine to free the context handle...
 */
error_status_t ncstest_AFS_FreeCtxtHdl
(	[in,out]	AFS_ctxt_h	*ctxt_h
);

/*
 * Just a simple op that uses an existing context handle.
 */
error_status_t ncstest_AFS_GetTime		
(
	[in]	AFS_ctxt_h 	ctxt_h,
	[out] 	unsigned long 	*Secondsp, 
	[out] 	unsigned long 	*USecondsp
);

/*
 * Additionally uses:
 *      [in]    strings (NameString_t, PathString_t)
 */
error_status_t ncstest_AFS_Symlink		
(
	[in]	AFS_ctxt_h 	ctxt_h,
	[in] 	afsFid 		*DirFidp, 
	[in]	NameString_t	Namep,
	[in]	PathString_t	LinkContentsp,
	[in]	afsStoreStatus 	*InStatusp, 
	[in]	afsHyper 	*minVVp,
	[in]	unsigned long 	Flags,
	[out]	afsFid 		*OutFidp, 
	[out]	afsFetchStatus 	*OutFidStatusp, 
	[out]	afsFetchStatus 	*OutDirStatusp, 
	[out]	afsToken 	*OutTokenp,
	[out]	afsVolSync 	*Syncp
);

/*
 * Additionally uses:
 *      [out]   pipe
 */
error_status_t ncstest_AFS_FetchData	
(
	[in]	AFS_ctxt_h 	ctxt_h,
	[in]	afsFid 		*Fidp,
	[in]	afsHyper 	*minVVp,
	[in]	long 		Position, 
	[in]	long 		Length,
	[in]	unsigned long 	Flags,
	[out]	afsFetchStatus 	*OutStatusp, 
	[out]	afsToken 	*OutTokenp,
	[out]	afsVolSync 	*Syncp,
	[out]	afstest_pipe_t	*fetchStream
);

/*
 * Additionally uses:
 *      [in]    pipe
 */
error_status_t ncstest_AFS_StoreData	
(
	[in]	AFS_ctxt_h 	ctxt_h,
	[in]	afsFid		*Fidp,
	[in]	afsStoreStatus 	*InStatusp, 
	[in]	long 		Position, 
	[in]	long 		Length, 
	[in]	long 		FileLength, 
	[in]	afsHyper 	*minVVp,
	[in]	unsigned long 	Flags,
	[in]	afstest_pipe_t	*storeStream,
	[out]	afsFetchStatus 	*OutStatusp, 
	[out]	afsVolSync 	*Syncp
);

/*
 * Additionally uses:
 *      [in] with last_is() via Varying (fixed) Array: afsBulkVolIDs
 *      [out] with last_is() via  Varying (fixed) Array: afsBulkVVs
 */
error_status_t ncstest_AFS_BulkFetchVV	
(
	[in]	AFS_ctxt_h 	ctxt_h,
	[in] 	afsHyper 	*cellIdp,
	[in]	afsBulkVolIDs 	*VolIDsp,
	[in]	unsigned long 	NumVols,
	[in]	unsigned long 	Flags,
	[in]	unsigned long 	spare1,
	[in]	unsigned long 	spare2,
	[out]	afsBulkVVs 	*VolVVsp, 
	[out]	unsigned long 	*spare4
);

}

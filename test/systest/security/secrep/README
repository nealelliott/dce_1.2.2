
---------------------

[ A copy of the following can also be round in 

  /net/iowa/users/sekhar/public/secrep/README
]

Date : 1/31/1994

This directory contains the files to test security replication
system test. These have been *substantially* modified from the
current version (located in 
/project/dce/build/kk/src/test/systest/security/secrep ) .

The new version of the secrep source can be obtained from
   
    /net/iowa/users/sekhar/public/secrep .

NEW FEATURES
------------

1. 9 new test cases to test the change_master and become -master
   functionality. These are

       Test case name               Description
       ( in scenario file)    
      
       tc_bm .....................  Tests become master
       tc_bm_restart .............  Become master and restart new master
       tc_cm_basic ...............  Basic change master test
       tc_cm_q_update ............  Change master with updates in propq.
       tc_cm_login_query .........  Change master while logins and queries
                                    are in progress.
       tc_cm_c_update ............  Change master while master is being updated.
       tc_cm_restart .............  Change master and restart new master.
       tc_cm_slvinit .............. Change master with initrep in propq.
       tc_cm_slvdel ..............  Change master with delrep in propq

2. Global cleanup function ( tc_secrep_cleanup )

   The global cleanup function will delete *all* the replicas in the
   cell. 

   This is written like a test case but is not really a test case.
   So this test case should be the last one included at the very of end
   of all the other test cases in the tet_scen file. 

   One important point to note is that at the end of the test (after
   running tc_secrep_cleanup ), there is only master but this may not
   be the original master. This is because the test does a change/become
   master.

3. Some of the modules have been rewritten entirely. This is due to 
   complexity of testing change/become master functionality ( the
   complexity has more than doubled from the original writeup of the test).

4. There are some important performance enhancements. Because of this,
   the entire security replication system test now takes 1 hour 46 minutes.
   
5. All the tests print a start and end time.

   To see both the result of each test as well as the start and end time
   of each test do the following:

   grep TEST  <journal file name> | awk -F"|" '{print $NF}'
   

WHAT STILL NEEDS TO BE DONE:
----------------------------

1. I think there are still some important functionality which
   is not being tested and which should be. These are

   a. Moving the master to different nodes (as documented in the 
      KK documentation.)
   b. Moving databases using sec_salvage_db (as documented in the
      OSF DCE Admin Guide - Core components) - although I am not 
      entirely sure if this is valid or not.
   c. Making sure that all the different kinds of updates can be 
      propagated. This involves running the security functional
      tests. But currently these have to be run separately - not
      as a test case within the security replication system test.

      The problem with this approach is that while the functional
      tests are fairly easy to run, the hard part is to compare
      the registry databases at the end of the run. The replication
      system test has scripts built in to compare databases.

   d. become -slave when it becomes available

   e. There is still one (?two) test cases for change master .

2. Replication test will not handle asynchronous  signals e.g.
   interrupt from a user. Handling these would provide the user
   with the following ability. A user can abort the current test
   case but continue with the rest of the test cases (because 
   appropriate cleanup would be done as part of handling the async
   signal).

   However, this is a *lot* of work (and it is quite complicated).
   So I have just punted this problem.


  

      
   
    

#!/bin/ksh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: shadow,v $
# Revision 1.1.4.2  1996/03/11  02:33:58  marty
# 	Update OSF copyright years
# 	[1996/03/10  19:39:24  marty]
#
# Revision 1.1.4.1  1995/12/11  15:23:48  root
# 	Submit
# 	[1995/12/11  14:35:24  root]
# 
# Revision 1.1.2.7  1994/08/16  08:16:09  marrek
# 	Fix for delta update (ot 11617).
# 	[1994/08/12  12:00:22  marrek]
# 
# Revision 1.1.2.6  1994/07/15  16:58:16  keutel
# 	OT 11316: unsetting of XDS_LOG and D2_LOG removed
# 	[1994/07/15  15:29:37  keutel]
# 
# Revision 1.1.2.5  1994/07/06  15:53:57  marrek
# 	Add version string in July 1994 code drop.
# 	[1994/07/06  15:42:05  marrek]
# 
# Revision 1.1.2.4  1994/06/21  14:29:15  marrek
# 	June 1994 code submission.
# 	[1994/06/16  07:49:42  marrek]
# 
# Revision 1.1.2.3  1994/06/10  20:20:42  devsrc
# 	cr10872 - fixed copyright
# 	[1994/06/10  16:58:58  devsrc]
# 
# Revision 1.1.2.2  1994/05/18  22:09:45  zeliff
# 	ot10648: fix problem with error checking
# 	[1994/05/16  19:14:50  zeliff]
# 
# 	ot10644: remove change to TET_ROOT value
# 	[1994/05/15  20:04:36  zeliff]
# 
# Revision 1.1.2.1  1994/05/10  14:32:23  marrek
# 	Bug fixes for April 1994 submission.
# 	[1994/05/05  09:18:19  marrek]
# 
# 	Created in April 1994 submission.
# 	[1994/05/03  12:13:49  marrek]
# 
# $EndLog$
#
# $RCSfile: shadow,v $ $Revision: 1.1.4.2 $ $Date: 1996/03/11 02:33:58 $
#
#  (c) Copyright 1991,1992-1994 Siemens-Nixdorf Information Systems
#  Munich, Germany
#  All Rights Reserved
#
#
# shadow
# NAME shadow
#
# DESC
# {
# GDS shadow administration testcase
# Each invocable component runs the 'gdsditadm' executable using as standard
# input the batch file specified in each strategy statement.
# Also, the DIT must already contain at least the two following object:
#  DSA1:        /C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m1
#  DSA2:        /C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m2
# }
#
# KEYS gds
#

export TP_PATH=$TET_EXECUTE/lib

tet_startup="Startup"			# no startup function
tet_cleanup="Cleanup"			# cleanup function

iclist="ic1 ic2 ic3 ic4 ic5 ic6 ic7 ic8 ic9 ic10 ic11 ic12 ic13 ic14 ic15 ic16"

ic1="tp21"				# functions for ic1
ic2="tp21"				# functions for ic2
ic3="tp21"				# functions for ic3
ic4="tp4"				# functions for ic4
ic5="tp5"				# functions for ic5
ic6="tp6"				# functions for ic6
ic7="tp7"				# functions for ic7
ic8="tp8"				# functions for ic8
ic9="tp9"				# functions for ic9
ic10="tp10"				# functions for ic10
ic11="tp11"				# functions for ic11
ic12="tp12"				# functions for ic12
ic13="tp13"				# functions for ic13
ic14="tp14"				# functions for ic14
ic15="tp15"				# functions for ic15
ic16="tp16"				# functions for ic16

# tp1 - tp3 were already executed in the administration phase (two_dsas.sh)
#           because of Internet Address specification as function of
#           DIR-X configuration (remote/local).

tp1() {
	tet_infoline "SHADOW: TEST CASE dsa.chmaster (admin phase)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/../config/dsa.chmaster"
	check_nostderr
	check_ERROR
}

tp2() {
	tet_infoline "SHADOW: TEST CASE dsa.dsa1 (admin phase)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/../config/dsa.dsa1"
	check_nostderr
	check_ERROR
}

tp3() {
	tet_infoline "SHADOW: TEST CASE dsa.dsa2 (admin phase)"
	execute_cmd "gdsditadm test_trace ${TP_PATH}/../config/dsa.dsa2"
	check_nostderr
	check_ERROR
}

tp4() {
	tet_infoline "SHADOW: TEST CASE shadow.adduser1 (Create shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.adduser1"
	check_nostderr
	check_ERROR
}

tp5() {
	tet_infoline "SHADOW: TEST CASE dsa.1addobj (Create shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/dsa.1addobj"
	check_nostderr
	check_ERROR
}

tp6() {
	tet_infoline "SHADOW: TEST CASE shadow.6crshd_job (Create shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6crshd_job"
	check_nostderr
	check_ERROR
}

tp7() {
	tet_infoline "SHADOW: TEST CASE shadow.6upd_job1 (Update shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6upd_job1"
	check_nostderr
	check_ERROR
}

tp8() {
	tet_infoline "SHADOW: TEST CASE shadow.6chgupd1 (Update shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6chgupd1"
	check_nostderr
	check_ERROR
}

tp9() {
	tet_infoline "SHADOW: TEST CASE shadow.6addobj1 (Create shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6addobj1"
	check_nostderr
	check_ERROR
}

tp10() {
	tet_infoline "SHADOW: TEST CASE shadow.6cr_job (Create shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6cr_job"
	check_nostderr
	check_ERROR
}

tp11() {
	tet_infoline "SHADOW: TEST CASE shadow.6upd_job2 (Update shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6upd_job2"
	check_nostderr
	check_ERROR
}

tp12() {
	tet_infoline "SHADOW: TEST CASE shadow.6chgupd2 (Update shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6chgupd2"
	check_nostderr
	check_ERROR
}

tp13() {
	sleep 720
	tet_infoline "SHADOW: TEST CASE shadow.6checkjob (Check wether update is done)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6checkjob"
	check_nostderr
	check_ERROR
}

tp14() {
	sleep 720
	tet_infoline "SHADOW: TEST CASE shadow.6checkshd (Check wether update is done)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6checkshd"
	check_nostderr
	check_ERROR
}

tp15() {
	tet_infoline "SHADOW: TEST CASE shadow.6remjob1 (Remove shadows and shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6remjob1"
	check_nostderr
	check_ERROR
}

tp16() {
	tet_infoline "SHADOW: TEST CASE shadow.6remjob2 (Remove shadowing job)"
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.6remjob2"
	check_nostderr
	check_ERROR
}

tp21() {
	tet_infoline "SHADOW: Dummy test BIND / UNBIND "
	execute_cmd "gdsditadm test_trace < ${TP_PATH}/shadow.bindcache"
	check_nostderr
	check_ERROR
}

Cleanup() {
        rm -f $ADM/test_trace
        rm -f ${TET_EXECUTE}/admin/save*
        rm -f ${TET_EXECUTE}/admin/out.*
	mv $TET_EXECUTE/tet.log $OUTDIR/admin.shadow.log
	tet_infoline "SHADOW TEST ENDED"
}

Startup() {
	export_paths
        rm -f ${TET_EXECUTE}/tet.log
	tet_infoline "SHADOW TEST START"
	. ${TET_EXECUTE}/config/two_dsas.sh
}

#source shell common functions
. ${TET_EXECUTE}/lib/shfuncs

#execute shell test case manager - must be last line
. ${TET_ROOT}/lib/xpg3sh/tcm.sh


#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
#

# Copyright (C) 1995, 1993 Transarc Corporation
# Licensed Materials - Property of Transarc
# All rights reserved.
#
# Episode vnops trace table
#
error_table 2 zev
	ec	EFS_TRACE_RCSID,
		"$Header: /afs/tr/project/fs/dev/dfs-dev/src/file/episode/vnops/RCS/efs_trace.et,v 1.62 1995/11/08 20:14:35 andi Exp $"
	ec	EFS_TRACE_EFSOPEN_NOLAST,
		"vol_efsOpen: vid %lu has no last index: code %lu"
	ec	EFS_TRACE_TWIDDLE_BEGIN,
		"vol_efsTwiddleInconBit: vid %lu, turnon=%lu"
	ec	EFS_TRACE_TWIDDLE_END,
		"vol_efsTwiddleInconBit: vid %lu, returning %lu"
	ec	EFS_TRACE_EFSCLOSE,
		"vol_efsClose: vid %lu, isabort %lu, returning %lu"
	ec	EFS_TRACE_EFSDEPLETE_1ENTER,
		"vol_efsDeplete: vid %lu; beginning init pass"
	ec	EFS_TRACE_EFSDEPLETE_1EXIT,
		"vol_efsDeplete: vid %lu; ending init pass"
	ec	EFS_TRACE_EFSATTACH,
		"vol_efsAttach: attaching vid %lu"
	ec	EFS_TRACE_EFSDETACH_BEGIN,
		"vol_efsDetach: detaching vid %lu"
	ec	EFS_TRACE_EFSDETACH_BUSYFAIL1,
		"vol_efsDetach: vid %lu: count %lu != (%lu + 1), so failing"
	ec	EFS_TRACE_EFSDETACH_BUSYFAIL2,
		"vol_efsDetach: vid %lu: InUse code %lu, so failing"
	ec	EFS_TRACE_EFSDETACH_SUCCEED,
		"vol_efsDetach: vid %lu: succeeding"
	ec	EFS_TRACE_EFSCLONE_1ENTER,
		"vol_efsClone: vids %lu and %lu; beginning init pass"
	ec	EFS_TRACE_EFSCLONE_1EXIT,
		"vol_efsClone: vids %lu and %lu; ending init pass"
	ec	EFS_TRACE_EFSSOMECLONE_1ENTER,
		"efsSomeClone, reclone=%ld: vids %lu and %lu; beginning init pass"
	ec	EFS_TRACE_EFSSOMECLONE_1EXIT,
		"efsSomeClone, reclone=%ld: vids %lu and %lu; ending init pass"
	ec	EFS_TRACE_STOPUSE_BEGIN,
		"vnm_StopUse: vid %lu; flags=%lu; %lu vnodes to scan"
	ec	EFS_TRACE_STOPUSE_SLEEPING,
		"vnm_StopUse: vid %lu; evp %#lx (#%ld) flags %#lx: sleeping for WAITFORME"
	ec	EFS_TRACE_STOPUSE_STOPPING,
		"vnm_StopUse: vid %lu; evp %#lx (#%ld) flags %#lx: shutting down"
	ec	EFS_TRACE_STOPUSE_END,
		"vnm_StopUse: vid %lu; finished"
	ec	EFS_TRACE_FINDVNODE_SLEEPING,
		"vnm_FindVnode: sleeping for %#lx: flags %#lx"
	ec	EFS_TRACE_INUSE_SLEEPING,
		"vnm_Inuse: sleeping for %#lx: flags %#lx"
	ec	EFS_TRACE_RECLAIM_SLEEPING,
		"efs_reclaim: sleeping for %#lx: flags %#lx"
	ec	EFS_TRACE_STOPUSE_AFTER_SYNC,
		"vnm_StopUse: back from calling vnm_SyncVnodes()"
	ec	EFS_TRACE_PAGEIN_REQ_START,
		"efs_PageInDaemon: bp %#x blkno %#x bcount %#x flags %#x"
	ec	EFS_TRACE_PAGEIN_REQ_STRATEGY,
		"efs_PageinDaemon: calling efs_pagein(%#x) (vp %#x)"
	ec	EFS_TRACE_PAGEIN_REQ_END,
		"efs_PageinDaemon: bp %#x finished"
	ec	EFS_TRACE_PAGEOUT_REQ_START,
		"efs_PageOutDaemon: bp %#x blkno %#x bcount %#x flags %#x"
	ec	EFS_TRACE_PAGEOUT_REQ_STRATEGY,
		"efs_PageOutDaemon: calling efs_PageOut(%#x) (vp %#x)"
	ec	EFS_TRACE_PAGEOUT_REQ_END,
		"efs_PageOutDaemon: bp %#x finished"
	ec	EFS_TRACE_PAGEUNPROTECT_REQ_START,
		"PageUnprotectDaemon: bp %#x blkno %#x bcount %#x flags %#x"
	ec	EFS_TRACE_PAGEUNPROTECT_REQ_STRATEGY,
		"PageUnprotectDaemon: calling efs_PageUnprotect(%#x) (vp %#x)"
	ec	EFS_TRACE_PAGEUNPROTECT_REQ_END,
		"PageUnprotectDaemon: bp %#x finished"
	ec	EFS_TRACE_SCAN_BAD_STATUS,
		"vol_efsScan: in vid %lu epif_GetStatus fails on fid.index %lu with code %lu"
	ec	EFS_TRACE_CONVERT_ERROR,
	        "vnode layer converted error %lu to error %lu in file %s at line %d"
	ec 	EFS_TRACE_GETATTR_ERROR,
	        "%s: evp %#x fid %lu vnva_GetAttr failed with code %lu"
	ec 	EFS_TRACE_LOOKUP_NON_DIR,
	        "efs_lookup: name %s in non-dir object devp %#x, fid %lu fails, code %lu"
	ec 	EFS_TRACE_LOOKUP_UNLINKED_DIR,
	 	"efs_lookup: name %s in unlinked dir devp %#x fid %lu fails, code %lu"
	ec 	EFS_TRACE_CANACCESS_GETSTATUS,
		"vnax_CanAccess: devp %#x fid %lu, epif_GetStatus returns %lu"
	ec 	EFS_TRACE_LOOKUP_CANACCESS,
		"efs_lookup: name %s in devp %#x fid %lu, vnax_CanAccess fails code %lu"
	ec 	EFS_TRACE_CREATE_ERROR,
		"efs_create: name %s in devp %#x fid %lu, failed code %d"
	ec 	EFS_TRACE_CREATE_SUCCESS,
		"efs_create: name %s in devp %#x fid %lu, succeeded evp %#x"
	ec 	EFS_TRACE_VNVA_GETATTR_FILE_STATUS,
		"vnva_GetAttr: evp %#x ap %#x fid.index %lu epif_GetStatus fails with code %lu"
	ec 	EFS_TRACE_STALE,
		"EV_DEPHANTOM: evp %#x is stale"
	ec	EFS_TRACE_EFSDETACH_DONEBEFORE,
		"vol_efsDetach: vid %lu: count %lu; had already been detached or destroyed"
	ec	EFS_TRACE_RELEVNVOL,
		"ReleVnVol(%#x): releasing vnode %#x"
	ec	EFS_TRACE_VOLHOLDVN,
		"VFtoEV, vid %d: saving vn in voldata %#x: replacing %#x with %#x"
	ec	EFS_TRACE_VOLHOLDVNCOPY,
		"efs_CopyAcl, vid %d: saving vn in voldata %#x: replacing %#x with %#x"
	ec	EFS_TRACE_VNODE_BUSY,
		"vnm_VnodeBusy: evp %#x, flags %#lx"
	ec	EFS_TRACE_VNODE_NOT_BUSY,
		"vnm_VnodeNotBusy: evp %#x, flags %#lx"
	ec	EFS_TRACE_VNODE_NOT_BUSY_WAKEUP,
		"vnm_VnodeNotBusy: waking evp %#x"
	ec	EFS_TRACE_VNODE_NOT_BUSY_WAKEUP_ANY,
		"vnm_VnodeNotBusy: wakeup any with evp %#x"
	ec	EFS_TRACE_VNODE_WAIT_FOR_BUSY,
		"vnm_WaitForBusyVnode: evp %#x, lock %#x"
	ec	EFS_TRACE_VNODE_WAIT_FOR_ANY_BUSY,
		"vnm_WaitForAnyBusyVnode: lock %#x"
	ec	EFS_TRACE_UNMOUNT_EPIG_CLOSE_VOL_FAILURE,
		"efs_unmount: vol %#x, epig_CloseVolume failed, code %#x"
	ec	EFS_TRACE_UNMOUNT_EPIG_CLOSE_AGGR_FAILURE,
		"efs_unmount: aggr %#x, epig_CloseAggregate failed, code %#x"
	ec 	EFS_TRACE_UNMOUNT_START,
		"efs_unmount: vfsp %#x, vol %#x, avl %#x starting"
	ec 	EFS_TRACE_UNMOUNT_END,
		"efs_unmount: vfsp %#x, vol %#x, avl %#x completed"
	ec 	EFS_TRACE_UNMOUNT_EBUSY,
		"efs_unmount: vfsp %#x got %#x from vnm_Inuse, returning EBUSY"
	ec 	EFS_TRACE_UNMOUNT_FORCED,
		"efs_unmount: success of forced unmount of vfsp %#x inspite of code %#x from vnm_Inuse"
	ec 	EFS_TRACE_INUSE_BUSY,
		"vnm_Inuse: busy vnode %#x, index %#x, ref count %d, state %#x"
	ec	EFS_TRACE_VOL_SETACL_UNAUTH_MASK,
	        "vol_efsSetAcl: unauthenticated entry from %s acl for fid %#x.%#x, volume id %#x.%#x was removed"
	ec 	EFS_TRACE_RENAME_LOOP,
		"ValidateRename: trouble obtaining locks on src %s, targ %s after %d loops"
	ec 	EFS_TRACE_VMREAD,
		"efs_vmread %#x off %d len %d"
	ec 	EFS_TRACE_VMWRITE,
		"efs_vmwrite %#x off %d len %d"

	ec 	EFS_TRACE_GETPAGE,
		"efs_getpage %#x off %#x len %#x rw %#x"
	ec	EFS_TRACE_GETPAGE_ERROR,
		"efs_getpage failed (code = %d)"
      	ec	EFS_TRACE_GETPAGE_SUCCEED,
		"efs_getpage returns %d pages (prot = %#x)"
	ec 	EFS_TRACE_PUTPAGE,
		"efs_putpage %#x off %#x len %#x flags %#x"
	ec 	EFS_TRACE_PUTAPAGE,
		"efs_putapage %#x off %#x flags %#x"

	ec 	EFS_TRACE_GETCONTENTS,
		"efs_GetContents %#x off %#x len %#x rblk %#x"
	ec 	EFS_TRACE_PUTCONTENTS,
		"putcontents"
	ec 	EFS_TRACE_DIRTYZERO,
		"create dirty zero pages for %#x %#x -> %#x"
	ec 	EFS_TRACE_PAGEZERO,
		"zero to end of page vp %#x off %d"
	ec	EFS_TRACE_CREATEBLOCK,
		"CreateBlock vp %#x off %d len %d first block %#x"
	ec	EFS_TRACE_CRBL_FAIL,
		"CreateBlock fails with code %d"
	ec	EFS_TRACE_CPBL,
		"CopyBlock vp %#x off %d remaining %d rblk %#x"
	ec	EFS_TRACE_CPBL_FAIL,
		"CopyBlock fails with code %d"
	ec 	EFS_TRACE_HOLDCONTENTS,
		"efs_HoldContents %#x off %d len %d"
	ec	EFS_TRACE_ZEROBYTE,
		"efs_ZeroBytes vp %#x dblk %#x len %d"

	ec	EFS_TRACE_VOL_DEPLETE_DONE,
		"vol_efsDeplete: vid %lu; done with code %d"
	ec	EFS_TRACE_VOL_GETSTATUS,
		"vol_efsGetStatus: vid %lu, VV %d"
	ec	EFS_TRACE_VOL_SETSTATUS,
		"vol_efsGetStatus with code %d gets new vid %lu, states %#x VV %d"
	ec	EFS_TRACE_VOL_SCAN,
		"vol_efsScan in vid %d to position %d"
	ec	EFS_TRACE_VOL_SCAN_EOF,
		"vol_efsScan in vid %d past EOF to position %d"
	ec	EFS_TRACE_VOL_SCAN_ENOENT,
		"vol_efsScan in vid %d at position %d to a deleted file"
	ec	EFS_TRACE_VOL_CREATE,
		"vol_efsCreate in vid %d at position %d"
	ec	EFS_TRACE_VOL_CREATE_EXISTING,
		"vol_efsCreate: file exists, new unique %d, old unique %d"
	ec	EFS_TRACE_VOL_CREATE_FAILED,
		"vol_efsCreate(vid %d, position %d) failed with code %d"
	ec	EFS_TRACE_VOL_CREATE_SUCCESS,
		"vol_efsCreate(vid %d, position %d) succeeded"
	ec	EFS_TRACE_VOL_APPENDDIR,
		"vol_efsAppenddir, vid %d, dir %d, entries %d, preserve %d"
	ec	EFS_TRACE_VOL_APPENDDIR_ENTRY,
		"vol_efsAppenddir: entry %s, vnum %d, off %d, pieces %d"
	ec	EFS_TRACE_VOL_APPENDDIR_FAILED,
		"vol_efsAppenddir(vid %d, dir %d) failed with code %d"
	ec	EFS_TRACE_VOL_APPENDDIR_SUCCESS,
		"vol_efsAppenddir(vid %d, dir %d) succeeded"
	ec	EFS_TRACE_VOL_TRUNCATE_FAILED,
		"vol_efsTruncate(vid %d, vnum %d, newsz %d) failed with code %d"
	ec	EFS_TRACE_VOL_TRUNCATE_SUCCESS,
		"vol_efsTruncate(vid %d, vnum %d, newsz %d) succeeded"
	ec	EFS_TRACE_VOL_DELETE,
		"vol_efsDelete in vid %d the fid %#x.%#x, code %d"
	ec	EFS_TRACE_VOL_GETATTR,
		"vol_efsGetAttr with code %d sees linkCount %d, VV %d"
	ec	EFS_TRACE_VOL_SETATTR,
		"vol_efsSetAttr with code %d sees linkCount %d, VV %d"
	ec	EFS_TRACE_RENAME_ARGS,
		"efs_rename of %#x/%s to %#x/%s failed"
	ec	EFS_TRACE_RENAME_ERROR,
		"efs_rename code %d"
	ec 	EFS_TRACE_VOL_READ1,
		"vol_efsRead evp %#x, off %d, len %d, fileLen %d"
	ec 	EFS_TRACE_VOL_WRITE1,
		"vol_efsWrite evp %#x, off %d, len %d, fileLen %d"

	ec 	EFS_TRACE_VOL_READHOLE,
		"vol_efsReadHole volp %#x, fid %#x.%#x, off %d, len %d"
	ec 	EFS_TRACE_VOL_READHOLE_ERR1,
		"vol_efsReadHole error from VFtoEV, volp %#x, fid %#x.%#x, code %d"
	ec 	EFS_TRACE_VOL_READHOLE_ERR2,
		"vol_efsReadHole on vdev file, volp %#x, fid %#x.%#x, code %d"
	ec 	EFS_TRACE_VOL_READHOLE_ERR3,
		"vol_efsReadHole past file EOF, evp %#x, filelen %d, offset %#x, code %d"
	ec 	EFS_TRACE_VOL_READHOLE_ERR4,
		"vol_efsReadHole error from vol_efsBioWait/copuout, evp %#x, code %d"
	ec 	EFS_TRACE_VOL_READHOLE_ERR5,
		"vol_efsReadHole error from osi_ZeroUData uaddr %#x, zero len %#x, code %d"

	ec 	EFS_TRACE_RA_1,
		"efs_setup_ra evp %#x, raOff %#x, reason %d"
	ec 	EFS_TRACE_RA_2,
		"efs_setup_ra evp%#x, raOff %#x, rLen %#x, raLen %#x"
	ec 	EFS_TRACE_RA_3,
		"efs_do_ra evp %#x, off %#x, len %#x"
	ec 	EFS_TRACE_GETPAGE_IO_1,
		"efs_getpage_io evp 0x%x, off 0x%x, rLen 0x%x, delta 0x%x"
	ec	EFS_GETACL_DELEGATE_ENTRY_NOT_OK,
		"efsx_getacl: non delegation aware client requested evp %#x, %d type acl with delegate entries, code %d"	
	ec 	EFS_TRACE_GETACCESS_UNAUTH,
		"vnax_GetAccess unauth access on vp %#x by uid %d"
	ec 	EFS_TRACE_GETACCESS_NOACL_FOREIGNACCESS,
		"vnax_GetAccess foreign access on no ACL vp %#x by PAC list %#x"
	ec 	EFS_TRACE_LOOKUP_NEG,
		"vnd_dirLookup: found negative cache devp %#x, name %s"
	ec 	EFS_TRACE_LOOKUP_POS,
		"vnd_dirLookup: found positive cache devp %#x, name %s, fid %#x.%#x"
	ec 	EFS_TRACE_LOOKUP_DIR_ERROR,
		"vnd_dirLookup: dir_Lookup devp %#x, name %s failed with code %d"
	ec 	EFS_TRACE_LOOKUP_NEG_ENTER,
		"vnd_dirLookup: enter negative cache devp %#x, name %s"
	ec	EFS_TRACE_LOOKUP_POS_ENTER,
		"vnd_dirLookup: enter positive cache devp %#x, name %s, fid %#x.%#x"	
	ec 	EFS_TRACE_DIRCHECK_NEG,
		"vnd_dirCheck: found negative cache devp %#x, name %s. Invalidate cache"
	ec 	EFS_TRACE_DIRCHECK_POS,
		"vnd_dirCheck: found positive cache devp %#x, name %s, fid %#x.%#x. Invalidate cache"
	ec 	EFS_TRACE_RENAME_INVALIDATE_DIRCACHE_1,
		"vnd_Rename: invalidate dir cache for so vp %#x"
	ec 	EFS_TRACE_RENAME_INVALIDATE_DIRCACHE_2,
		"vnd_Rename: invalidate sd vp %#x, sname %s, td vp %#x, tname %s"
	ec 	EFS_TRACE_OPENVNODE,
		"Episode: OpenVnode vol id (low word) %#x, fid index %#x, evp %#x, code %d"
	ec 	EFS_TRACE_RECYCLE,
		"Episode: Recycle vnode %#x, vol id (low word) %#x, fid %#x.%#x"
	ec	EFS_TRACE_EFSDETACH_BEGIN_2,
		"vol_efsDetach: detaching vid %lu, anyForce %#x"

	ec 	EFS_TRACE_ACCESS_CACHE_SETATTR_INVALIDATE,
		"vnva_SetAttr invalidating access cache for vp %#x"
	ec 	EFS_TRACE_ACCESS_CACHE_SETACL_INVALIDATE,
		"vnva_SetAcl invalidating access cache for vp %#x"
	ec 	EFS_TRACE_ACCESS_CACHE_KILLCACHEDSTATUS_INVALIDATE,
		"Episode: KillCacheStatus invalidating access cache for vp %#x"
	ec 	EFS_TRACE_ACCESS_CACHE_REINITVNODE_INVALIDATE,
		"Episode: ReinitVnode invalidating access cache for vp %#x"
	ec	EFS_TRACE_ACCESS_CACHE_HIT,
		"vnax_CanAccess: access cache hit, evp %#x, uid %#x, cached %#x, desired %#x"
	ec 	EFS_TRACE_ACCESS_CACHE_MISS,
		"vnax_CanAccess: access cache miss, evp %#x, uid %#x, desired %#x"
	ec 	EFS_TRACE_ACCESS_CACHE_UPDATE,
		"vnax_CanAccess: access cache update, evp %#x, uid %#x, cached %#x, desired %#x"
	

	ec	EFS_TRACE_VOL_GETATTR_ENOENT,
		"vol_efsGetAttr (vid %d, pos %d) outputs info on deleted file"

end

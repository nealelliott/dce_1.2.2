*
* @OSF_COPYRIGHT@
* COPYRIGHT NOTICE
* Copyright (c) 1993 Open Software Foundation, Inc.
* ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
* src directory for the full copyright text.
*
*
* (C) Copyright 1993 Transarc Corporation.
* All Rights Reserved.
*
*
* HISTORY
* $Log: adverse_move2a.itl,v $
* $EndLog$

*
* adverse_move2a.itl
*
* This is one of 10 test programs testing the CM under Adverse Fileset Moves
* For more detailed information about the test, please refer to the document
* [Test the CM Under Adverse Fileset Moves]
*
* 
* The purpose of this test is pretty similar to Test No.1b except that in this
* test the fileset is moved while the CM1 does not handle the TSR-MOVE work 
* right away. Users at CM1 later notices that the fileset is actually moved
* and then starts the TSR-MOVE at run time. 
* 
* This test is essentially to test the notion of 'ZLC' supported by the fx 
* server.
*
*  Requirements -
*	2 machines used as CM1/FX1 and CM2/FX2.
*
*  Setup - (2 machine)
*	The master(ie., Hub) and client #1 running MoveClient#1 are started on 
*       Machine #1 and client #2 running MoveClient#2 started on Machine #2.
*       The filset, fset1, is exported by FX1 and later moved to FX2.
* 
* HISTORY
* $Log:$
*
* $EndLog$
******************************************************************************





******************************************************************************
*                                                                            *
*                        HUB CODE                                            *
*                                                                            *
******************************************************************************
*
*
* Echo the following msg !
!* Include adverse-move configuration.
*
include adverse_move.config
*
*
* Force to cross the chunk boundary
*
set WRITE_OFFSET0 int (0 * $chunkSize )
set WRITE_OFFSET1 int ((1 * $chunkSize) - 10 )
set WRITE_OFFSET2 int ((2 * $chunkSize) - 10 )
set WRITE_OFFSET3 int ((3 * $chunkSize) - 10 )
set WRITE_OFFSET4 int ((4 * $chunkSize) - 10 )
set WRITE_OFFSET5 int ((5 * $chunkSize) - 10 )
set newline vector "0x0a0d"
set numFiles int 50
*
*
* Hub Code. 
*
* The Hub code does the following initialization:
* 
* 1) Create a fileset, $fset1
* 2) Mount $fset1 to dir /:/$fset1
* 3) Create two dirs,  /:/$fset1/tdir1 and /:/$fset1/tdir1
*
!* Delete the existing fileset, $fset1 and mount point, $mt, if any
*
*
!* Clean up ....it may take a while ....
*
set ITL_IgnoreShellError 1
set command string ("fts lsfldb " + $fset1 + " " +$dumpDev )
shellExec command
if ($CommandResult == 0) {
    set command string ("fts delete " + $fset1 + " " +$HostName1+ " " + $aggrDev1 +$dumpDev )
    shellExec command
    if ($CommandResult != 0) {
	* 
	* Delete the fileset from another server.
	*
	set command string ("fts delete " + $fset1 + " "+$HostName2+" " + $aggrDev2 +$dumpDev )
	shellExec command    
	if ($CommandResult != 0) {
	    echo
	    echo ERROR: cannot delete the fileset $fset1 !
	    echo
	    quit
	}
    }	
    set command string ("cm checkfileset " + $dumpDev )
}
set ITL_IgnoreShellError 0
set command string ("cd /:")
shellExec command
set ITL_IgnoreShellError 1
set command string ("fts delm " + " " + $mt + $dumpDev )
shellExec command
set ITL_IgnoreShellError 0
set command string ("cm checkfileset " + $dumpDev )
shellExec command
*
*
!* Creating fileset, $fset1, on $aggrDev1 of $HostName1 ...
*
set command string ("fts create " + " " + $fset1 + " " + $HostName1 + " " + $aggrDev1 +  $dumpDev )
shellExec command
*
!* Set quota size to $fsetQuota
*
set command string ("fts setquota -fileset " + $fset1 + " -size " +$fsetQuota )
shellExec command
*
!* Mount the fileset, $fset1, on $mt
*
set command string ("fts crm " + " " + $mt + " " + $fset1 + $dumpDev )
shellExec command
*
!* Create two dirs $testDir1 and $testDir2
*
set command string (" mkdir " + $testDir1)
shellExec command
set command string (" mkdir " + $testDir2)
shellExec command
*
*
set fileDataA string "It is really a boring task, but someone got to do it"
set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
*
*
******************************************************************************
*                                                                            *
*                          Process 1 On Machine1                             *
*                                                                            *
******************************************************************************
*
*
*
* Define procedure for process No#1 running on M1
* 
set MoveClient1 proc
END_PROC
  *
  *
  !* Start process MoveClient1 
  *
  *  Set up local variables
  *  NOTE that until the notion of GLOBAL VARIABLE is implemented in ITL,
  *       we have to duplicate these "Shared varaibles" in every procedure.
  *       All these "Shared variables" are defined in ADVERSE_MOVE.CONFIG.
  *
  *
  !* Get READ DATA/STATUS tokens for files under $mt and $testDir1
  *
  set dumpDev string " > /dev/null"
  set fileDataA string "It is really a boring task, but someone got to do it"
  set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
  *
  *
  set command string ("cm checkfileset" + @dumpDev )
  shellExec command
  set command string ("ls -l " + $mt + " " + @dumpDev )
  shellExec command
  *
  set command string ("ls -l " + $testDir1  + @dumpDev )
  shellExec command
  set command string ("ls -l " + $testDir2  + @dumpDev )
  shellExec command
  *
  *
  !* Now create $numFiles files in dir $testDir1
  * 
  loop x 1 1 $numFiles
	set testFile string ($testDir1 + "/file" + @x)
	open @testFile (@O_RDWR | @O_CREAT) 0644 fileId[@x]
	lseek @fileId[@x] @SEEK_SET $WRITE_OFFSET1
	write @fileId[@x] @fileDataA
	lseek @fileId[@x] @SEEK_SET $WRITE_OFFSET4
	write @fileId[@x] @fileDataA
  endloop
  * 
  !* Sleep for 1 minute to sync I/Os
  *
  sleep 60000
  *
  !* Wait for the event of WAIT_FOR_TO_DELETE_FILES
  *
  * Someone wants to delete files before a network partition
  *
  sync_join "WAIT_FOR_TO_DELETE_FILES" $syncPointTimeout
  *
  *
  !* Wait for the event of CM's MISSING A TOKEN REVOCATION ..
  *   It is established by setting the bomb point off.
  *
  sync_join "WAIT_FOR_MISS_REVOKE" $syncPointTimeout
  *
  *
  !* Wait for the fileset to be moved. 
  * 
  sync_join "MOVE_THE_FILESET" $syncPointTimeout
  *
  *
  !* Wait for the CM to behave normally ..
  *
  sync_join "WAIT_FOR_MISS_REVOKE_OFF" $syncPointTimeout
  *
  *
  !*
  !* Verify results after CM's performing TSR-CRASH and TSR-MOVE 
  !*
  * Make sure that half of  $numFiles files (deleted before the partition) are 
  * still accessbile and the rest half files are STALE
  *
  set errnoNum int 0
  set half int ( $numFiles/2 )
  loop x 1  1 @half
	set testFile string ($testDir1 + "/file" + @x )
	lseek @fileId[@x] @SEEK_SET $WRITE_OFFSET1
	read @fileId[@x] #@fileDataA readBuffer
	if (@readBuffer != @fileDataA ) {
	    set errnoNum int (@errnoNum + 1) 
	    echo 
	    echo ERROR on read file @testFile, errno = $ITL_Status
	    echo Expected: @fileDataA
	    echo Actual: @readBuffer
	    set ITL_SpokeResult int -1
	} 
  endloop
  if (@errnoNum == 0) {
     set fileA string ($testDir1 + "/file1")
     set fileB string ($testDir1 + "/file" + @half )
     echo 
     echo Result #1) OK: @fileA to @fileB are all accessible !
     echo 
  }
  set errnoNum int 0
  set half2 int (@half + 1 )
  verifyStatus false
  loop x @half2 1 $numFiles
	set testFile string ($testDir1 + "/file" + @x )
	lseek @fileId[@x] @SEEK_SET $WRITE_OFFSET4
	read @fileId[@x] #@fileDataA readBuffer
	if (@ITL_Status != @ESTALE) {
	    set errnoNum int (@errnoNum + 1) 
            echo
	    echo ERROR: @testFile is not STALE (Should be) !
	    set ITL_SpokeResult int -1
	}
  endloop
  verifyStatus true

  if (@errnoNum == 0) {
     set fileA string ($testDir1 + "/file" + @half2 )
     set fileB string ($testDir1 + "/file" + $numFiles )
     echo 
     echo Result #2) OK: @fileA to @fileB are all STALE !
     echo 
  }
  *
  * close all $numFiles files and these files should be gone
  *
  verifyStatus false
  loop x 1 1 $numFiles
     close @fileId[@x]
  endloop
  verifyStatus true
  *
  * Now verify that file1 - file$numFiles  should be gone in the DFS tree
  * 
  verifyStatus false
  set errnoNum int 0
  loop x 1 1 $numFiles
	set testFile string ($testDir1 + "/file" + @x )
	access @testFile $F_EXIST
	if (@ITL_Status != @ENOENT ) {
	     set errnoNum int (@errnoNum + 1) 
	     echo
	     echo "ERROR: @testFile is NOT removed from $testDir1"
	     echo
	     set ITL_SpokeResult int -1
  	     quit
	}
  endloop
  verifyStatus true
  if (@errnoNum == 0) {
     set fileA string ($testDir1 + "/file1" )
     set fileB string ($testDir1 + "/file" + $numFiles)
     echo 
     echo Result #3) OK: @fileA to @fileB are removed after close!
     echo 
  }
  echo
  quit
END_PROC
*
*
******************************************************************************
*                                                                            *
*                          Process 2 On Machine2                             *
*                                                                            *
******************************************************************************
*
*
*
*  Implmentation for MoveClient
*
*
set MoveClient2 proc
END_PROC
  *
  *
  !* Start process MoveClient2
  *
  *  Set up local variables
  *  NOTE that until the notion of GLOBAL VARIABLE is implemented in ITL,
  *       we have to duplicate these "Shared varaibles" in every procedure.
  *
  *
  *
  !* Get READ DATA/STATUS tokens for files under $mt and $testDir1
  *
  set dumpDev string " > /dev/null"
  set fileDataA string "It is really a boring task, but someone got to do it"
  set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
  *
  *
  *
  set command string ("cm checkfileset" + @dumpDev )
  shellExec command
  set command string ("ls -l " + $mt + " " + @dumpDev )
  shellExec command
  *
  set command string ("ls -l " + $testDir1  + @dumpDev )
  shellExec command
  set command string ("ls -l " + $testDir2  + @dumpDev )
  shellExec command
  *
  *
  !* Wait for the event of WAIT_FOR_TO_DELETE_FILES
  *
  sync_join "WAIT_FOR_TO_DELETE_FILES" $syncPointTimeout
  *
  set half int ( $numFiles/2 )
  set fileA string ($testDir1 + "/file1" )
  set fileB string ($testDir1 + "/file" + @half )
  *
  !* Delete @half files from @fileA to @fileB
  *
  verifyStatus false
  loop x 1 1 @half
	set testFile string ($testDir1 + "/file" + @x)
	unlink @testFile
	if (@ITL_Status != 0) {
	     echo
	     echo "ERROR: cannot unlink file,@testFile !"
	     echo
	} 
  endloop
  verifyStatus true
  *
  *
  !* Wait for the event of CM's MISSING A TOKEN REVOCATION ..
  *
  sync_join "WAIT_FOR_MISS_REVOKE" $syncPointTimeout
  *
  *
  !* Wait for the Fileset to be moved ....
  *
  sync_join "MOVE_THE_FILESET" $syncPointTimeout
  *
  set half2 int (@half + 1 )
  set fileA string ($testDir1 + "/file" + @half2 )
  set fileB string ($testDir1 + "/file" + $numFiles )
  *
  !* After the move, delete files from @fileA to @fileB
  *
  verifyStatus false
  loop x @half2 1 $numFiles
	set testFile string ($testDir1 + "/file" + @x)
	unlink @testFile
	if (@ITL_Status != 0) {
             echo
	     echo "ERROR: cannot unlink file, @testFile !"
             echo
	} 
  endloop
  verifyStatus true
  *
  !* Wait for the CM to behave normally ..
  *
  sync_join "WAIT_FOR_MISS_REVOKE_OFF" $syncPointTimeout
  *
  echo 
  echo Proc 2 completes !
  quit

END_PROC
*
*
******************************************************************************
*                                                                            *
*                         Now Back to the Hub code                           *
*                                                                            *
******************************************************************************
set clientErrors int 0

*
*
*
*
!* Send test procedures to clients.
*
loop x  0 1 1 
   set y int ($x + 1)
   set procName string ("MoveClient" + $y)
   rexec_async $ITL_spoke[$x] $procName clientResults[$x] asyncId[$x]
endLoop
*
*
!* Create "WAIT_FOR_TO_DELETE_FILES" sync point.
*
sync_create "WAIT_FOR_TO_DELETE_FILES" 2 $syncPointTimeout
sync_release "WAIT_FOR_TO_DELETE_FILES"
*
*
!* Create "WAIT_FOR_MISS_REVOKE" sync point.
*
sync_create "WAIT_FOR_MISS_REVOKE" 2 $syncPointTimeout
*
*
!* Set off the "Bomb Point" to make CM losing token revocation
*
*
set command string ("bomb set 'GIVEUP_TOKEN:error=-1:count=1+1' -kernel")
shellExec command
set ITL_IgnoreShellError 1
set command string ("cm statserver > /dev/null " )
shellExec command
set ITL_IgnoreShellError 0
*
*
!* Release "WAIT_FOR_MISS_REVOKE" sync point
*
sync_release "WAIT_FOR_MISS_REVOKE"
*
*
!* Create  "MOVE_THE_FILESET" sync point.
*
sync_create "MOVE_THE_FILESET" 2 $syncPointTimeout
*
*  Move the fileset 
!* Moving fileset from, $HostName1 $aggrDev1, to, $HostName2 $aggrDev2
*
set command string ("fts move " + $fset1 + " " + $HostName1 + " " + $aggrDev1 + " " + $HostName2 + " " + $aggrDev2 + " -verbose")
echo $command
shellExec command
*
*
!* Release sync point "MOVE_THE_FILESET"
*
sync_release "MOVE_THE_FILESET"
*
!* Create "WAIT_FOR_MISS_REVOKE_OFF" sync point.
*
sync_create "WAIT_FOR_MISS_REVOKE_OFF" 2 $syncPointTimeout
*
*
* Unset the Bomb Point
*
!* Set off the "Bomb Point" to make CM behave normally 
*
set command string ("bomb unset -bpname 'COMM_FAILURE' -kernel")
shellExec command
set command string ("cm statserver > /dev/null " )
shellExec command
*
*
!* Release "WAIT_FOR_MISS_REVOKE_OFF" sync point.
*
sync_release "WAIT_FOR_MISS_REVOKE_OFF"
*
*
set syncClients int 2
loop x  0 1 1
   async_join $asyncId[$x] $syncPointTimeout
*
!* Validating results after async join number $x
*
    if ($clientResults[$x] != 0) {
      echo Client $x had a failure, status was $clientResults[$x]
      set clientErrors ($clientErrors + 1)
    }
endLoop
*
if ($clientErrors == 0) {
  echo 
  echo Adverse Move Test No.2a Completed Successfully!
  echo 
}
else {
  error Adverse Move Test No.2a FAILED - with $clientErrors client failures.
}
quit



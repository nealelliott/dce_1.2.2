#!/bin/ksh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: dcethrpc,v $
# Revision 1.1.17.2  1996/02/17  23:29:09  marty
# 	Update OSF copyright year
# 	[1996/02/17  22:45:55  marty]
#
# Revision 1.1.17.1  1995/12/11  22:49:38  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/1  1994/07/05  18:18 UTC  bissen
# 	Merge hpdce02 (DCE 1.1 beta) and HPDCE01 into HPDCE02
# 
# 	HP revision /main/HPDCE01/3  1994/04/12  15:45 UTC  truitt
# 
# 	HP revision /main/HPDCE01/truitt_junk/1  1994/04/12  15:31 UTC  truitt
# 	clean up reference to profile
# 
# 	HP revision /main/HPDCE01/2  1994/03/23  16:03 UTC  bissen
# 	merge changes
# 
# 	HP revision /main/HPDCE01/bissen_systest/1  1994/03/23  16:01 UTC  bissen
# 	remove NFS function and use TESTDIR for copy of executables
# 
# 	HP revision /main/HPDCE01/1  1994/01/31  20:10  bissen
# 	merge kk and hpdce01
# 	[1995/12/11  22:23:15  root]
# 
# Revision 1.1.6.3  1993/09/02  20:35:44  giza
# 	updated from DTM tree
# 	[1993/09/01  19:09:05  giza]
# 
# Revision 1.1.6.2  1993/07/09  15:00:42  root
# 	Initial King Kong branch
# 	[1993/07/09  15:00:13  root]
# 
# Revision 1.1.4.4  1993/04/27  14:54:30  eheller
# 	Removed characters left from the emerge operation
# 	[1993/04/27  14:54:00  eheller]
# 
# Revision 1.1.4.3  1993/04/23  13:53:03  eheller
# 	Merged time looping changes
# 	[1993/04/23  13:27:31  eheller]
# 
# Revision 1.1.4.2  1993/03/31  12:59:53  mgm
# 	Initial GAMERA branch
# 
# Revision 1.1.3.4  1992/11/12  15:33:47  mgm
# 	Fixed cleanup routine
# 	[1992/11/12  15:30:42  mgm]
# 
# Revision 1.1.3.3  1992/11/12  12:54:38  mgm
# 	Fixed kill_server if server and client are run on the
# 	same machine (remsh in rshsp confuses stdin)
# 	[1992/11/12  12:53:53  mgm]
# 
# Revision 1.1.3.2  1992/11/04  18:49:51  mgm
# 	Ported to TET on HPUX
# 	[1992/11/04  18:48:40  mgm]
# 
# $EndLog$
#
#   TEST_NAME: dcethrpc
#
#   COMPONENT_NAME: dce.systest
#
#   IC's:      Start_servers
#              Start_client
#              Check_results
#              Kill_servers
#
#   (C) COPYRIGHT International Business Machines Corp. 1991
#   All Rights Reserved
#
#
#   FILES: dcethrpc
#          thd.idl
#          thd_server.c
#          thd_client.c
#          thd_util.h
#          thd_util.c
#
#   REQUIREMENTS:
#      Threads, rpc, security
#
#   RESTRICTIONS:
#      None
#
#   USAGE:
#
#      See $TET_ROOT/threads/bin/run.thr
#	   or $TET_ROOT/doc/README.threads
#
#   TESTCASE OVERVIEW:
#
#       dcethrpc is designed to test the ability of the RPC library to
#       interact with the threads library. Thd test is in two sections:
#       a server side and a client side.
#
#       The client creates and initializes an array of long integers.  The
#       size of the array is the number of threads to create times the
#       chunk size.  An array of n (n is an input parameter) threads is
#       created and each thread is responsible for binding to the server
#       and passing the server the two arrays.  The two arrays are compared
#       to ensure that they are identical.
#
#       The server create n (n is a rpc passed parameter from the client)
#       number of threads.  Each thread is responsible for reading a portion
#       of the original array into the copy array.  The copy array is sent
#       back to the client for verification.
#
#   DESCRIPTION:
#       This is the test case.  It starts the server
#       on the machine the testcase is run on.  The process id is saved for
#       termination of the server later.  It then starts a client process on
#       the machines listed in the $HOSTLIST variable and waits until all the
#       client processes are complete.  These clients write to a file whether
#       or not any errors occured.  This file is checked for errors.  If any
#       are found, the return code for this test is set to 1.  Otherwise, it
#       remains 0.  The server is terminated with a kill signal and this
#       test exits with the above return code.
#
#
#  CHANGE HISTORY
#       11/10/90        Gerald Cantor   Initial design.
#       11/29/90        Gerald Cantor   Completed coding
#       09/10/91        Gerald Cantor   Line 97:  added the su.dce
#       10/23/91        Gerald Cantor   Added check for null principal.
#       11/16/91        Gerald Cantor   Change rshsp to ropen for
#                                       starting servers.
#       12/18/91        Gerald Cantor   Updated prologs.  Delete
#                                       Wait_for client().
#       05/12/92        Ram Balaraman   Added xx_log as a local function.
#                                       Check to see if ropend is running
#                                       before executing ropen command.
#	10/26/92	Mary MacGregor	Ported to TET for HP-UX
#	11/12/92	Mary MacGregor	Fixed kill_servers if server and
#					client are same machine
###########################################################################

tet_startup="startup"
tet_cleanup="cleanup"
iclist="ic1"
ic1="do_test"

startup ()
{
	export CELL_NAME=`/usr/bin/getcellname | awk -F/ '{print $3}'`
	export TESTDIR="/tet/threads/ts/dcethrpc/"
	export SERVER_FILE="thd_server"
	export CLIENT_FILE="thd_client"
        export OSTYPE=`uname`
	export LOCAL_HOST=`uname -n`

	if [ -z "$SERVER_PARMS" ]
	then
		SERVER_PARMS=" -N"
	fi
	if [ -z "$CLIENT_PARMS" ]
	then
		CLIENT_PARMS=" -N"
	fi

	export PROTOCOL=${PROTOCOL:-"ncadg_ip_udp"}
	SERVER_PARMS="${SERVER_PARMS} -P ${PROTOCOL}"
	CLIENT_PARMS="${SERVER_PARMS} -P ${PROTOCOL}"

	export CHUNK_SIZE=${CHUNK_SIZE:-100}
	CLIENT_PARMS="${CLIENT_PARMS} -c ${CHUNK_SIZE}"

	MAX_CALLS=${MAX_CALLS:-"5"}
	SERVER_PARMS="${SERVER_PARMS} -C ${MAX_CALLS}"

	NUMBER_OF_THREADS=${NUMBER_OF_THREADS:-100}
	CLIENT_PARMS="${CLIENT_PARMS} -n ${NUMBER_OF_THREADS}"

	tet_infoline "Server parms: $SERVER_PARMS"
	tet_infoline "Client parms: $CLIENT_PARMS"

        if [ $OSTYPE = "OSF1" ]
        then
                PINGCOMMAND='eval /etc/ping -p 1 -c 1 $HOST'
        else
                PINGCOMMAND='eval /etc/ping $HOST 8 1'
        fi
	exec 8< $TET_ROOT/systest/client_names_$CELL_NAME
	while read -u8 HOST
        do
                $PINGCOMMAND > /dev/null

                if [ "$?" != 0 ]
                then
                        tet_infoline "$HOST not responding"
                else
                        HOSTLIST=$HOSTLIST"$HOST "
                        tet_infoline "Copying $SERVER_FILE to $HOST/tmp"
			if [ $HOST = $LOCAL_HOST ]
			then
				cp $TESTDIR$SERVER_FILE /tmp
			else
                                ${RSH_COMM} $HOST "cp $TESTDIR$SERVER_FILE /tmp"
			fi
                fi
        done
        exec 8<&-
        if [ -z $HOSTLIST ]
        then
                tet_infoline "ERROR:No hosts responded"
                tet_result DCE_FAIL
                return
        else
                export HOSTLIST
        fi
}

cleanup()
{
        kill_servers
	for HOST in $HOSTLIST ; do
        	# Remove server logs -all are local to client machine
        	$RSH_COMM $HOST "rm /tmp/$SERVER_FILE*"
	done
	rm $STTMPDIR/$CLIENT_FILE*	# Remove client log
}

# Start a server process on each host passed by workstation driver.

do_test ()
{
	error=0
	CURRENT_LOOP=1
	SECONDS=0
        SECONDS_TO_EXECUTE=`awk "BEGIN { printf (\"%d\", 3600 * $RUN_TIME); exit; }"`
        while [ $SECONDS -lt $SECONDS_TO_EXECUTE ]
        do
                tet_infoline "starting iteration $CURRENT_LOOP"
		start_servers
		if [ $? -ne 0 ]
		then
			tet_infoline "Exiting the test due to failure in start_servers"
			break;
		fi
		start_client
		if [ $? -ne 0 ]
		then
			tet_infoline "Exiting the test due to failure in start_client"
			break;
		fi
                check_results
		if [ $? -ne 0 ]
		then
			tet_infoline "Exiting the test due to failure in check_results"
			break;
		fi
		kill_servers
		if [ $? -ne 0 ]
		then
			tet_infoline "Exiting the test due to failure in kill_servers"
			break;
		fi
                CURRENT_LOOP=`expr $CURRENT_LOOP + 1`
        done

        if [ $error -ne 0 ]
        then
                tet_infoline "ERROR:Dcethrpc threads test failed"
                tet_result DCE_ERROR
        else
                tet_infoline "Dcethrpc threads test succeeded"
                tet_result PASS
        fi

}


start_servers ()
{
        for HOST in $HOSTLIST
        do
               	tet_infoline "Starting $SERVER_FILE on $HOST"
               	echo "Starting $SERVER_FILE on $HOST"
                rshsp  $HOST \
                    "JOURNAL=$STTMPDIR/$SERVER_FILE.$HOST; export JOURNAL; \
                    $STTMPDIR/$SERVER_FILE $SERVER_PARMS" &
                count=0
		pid=""
                while [ -z "$pid" -a $count -lt 20 ]
                do
                        pid=`rshsp $HOST "$STDEXC/getproc $SERVER_FILE $SERVER_PARMS | grep -v return"`
                        count=`expr $count + 1`
                done

                if [ $count -ge 20 ]
                then
                        tet_infoline "ERROR:$SERVER_FILE did not start on $HOST"
                        error=1
                else
                        tet_infoline "$SERVER_FILE started on $HOST"
                fi
	done

        sleep 10

	if [ $error -ne 0 ]
	then
		return 1
	fi

	return 0

}

# Start the client process.

start_client ()
{
        for HOST in $HOSTLIST
        do
                HOSTLISTPARM="$HOSTLISTPARM -h $HOST"
        done
        tet_infoline "Starting $CLIENT_FILE"
        echo "Starting $CLIENT_FILE"

        JOURNAL=$STTMPDIR/$CLIENT_FILE
        export JOURNAL

        if [ -z "$PRINC_NAME" ]
        then
                ./$CLIENT_FILE $HOSTLISTPARM $CLIENT_PARMS
                RC=$?
        else
                su.dce $PRINC_NAME -p $PRINC_NAME -c "$CLIENT_FILE \
                $HOSTLISTPARM $CLIENT_PARMS"
                RC=$?
        fi

	if [ "$RC" != 0 ]
        then
                tet_infoline "ERROR:Start of $CLIENT_FILE on `hostname` failed"
                error=1
        else
                tet_infoline "done"
                tet_infoline "Waiting for $CLIENT_FILE to complete"
        fi
	HOSTLISTPARM=""
	if [ $error -ne 0 ]
	then
		return 1
	fi

	return 0
}

# Terminate server processes.

kill_servers ()
{
        tet_infoline "Killing servers"
        echo "Killing servers"
        for HOST in $HOSTLIST
        do
		if [[ $HOST = $LOCAL_HOST ]]
		then
			$STDEXC/killproc "$SERVER_FILE $SERVER_PARMS"
			if [ $? -ne 0 ]
			then 
				tet_infoline "ERROR:Could not kill thd_server on $HOST"
				error=1
			fi
		else
	                rshsp $HOST $STDEXC/killproc "$SERVER_FILE $SERVER_PARMS"
	                if [ $? -ne 0 ]
	                then
				tet_infoline "ERROR:Could not kill thd_server on $HOST"
	                        error=1
	                fi
		fi
        done

        tet_infoline "done"

	if [ $error -ne 0 ] ; then
		return 1
	fi

	return 0
}

# Examine the logs and set the return code accordingly.

check_results ()
{
        tet_infoline "Checking results"
        echo "Checking results"
        grep RC=1 $STTMPDIR/$CLIENT_FILE > $STTMPDIR/dcethrpc_error_log.$THISPID
        for HOST in $HOSTLIST
        do
                if [ "$HOST" != "$LOCAL_HOST" ];then
                        rcp $HOST:/$STTMPDIR/$SERVER_FILE.$HOST /tmp 2>/dev/null
                        if [ "$?" != "0" ];then
                                tet_infoline "$HOST $SERVER_FILE.$HOST not found"
                                error=1
                                break
                        fi
                fi
        	grep  RC=1 $STTMPDIR/$SERVER_FILE.* >> $STTMPDIR/dcethrpc_error_log.$THISPID
        done
        tet_infoline "done"
        grep RC=1 $STTMPDIR/dcethrpc_error_log.$THISPID

	# This looks backwards, but if grep returns zero then there were errors

	if [ $? -ne 0 ] ; then
		rm $STTMPDIR/dcethrpc_error_log.$THISPID
        else
		tet_infoline "ERROR:Errors in $STTMPDIR/dcethrpc_error_log.$THISPID - Not deleting file"
                error=1
        fi
	if [ $error -ne 0 ]
	then
		return 1
	fi

	return 0
}


# tcc will fail if these files don't exist and get sourced
# so there is no need to check that this happens

. $TET_ROOT/profile.dcest
. ./dcethrpc.data
. $TET_ROOT/lib/ksh/tcm.ksh

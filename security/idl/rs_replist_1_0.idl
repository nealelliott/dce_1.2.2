/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: rs_replist_1_0.idl,v $
 * Revision 1.1.4.3  1996/03/09  23:28:46  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:44:11  marty]
 *
 * Revision 1.1.4.2  1995/12/08  17:35:53  root
 * 	Submit OSF/DCE 1.2.1
 * 
 * 	HP revision /main/HPDCE02/1  1995/05/15  21:33 UTC  greg
 * 	security migration merge
 * 	[1995/12/08  16:55:42  root]
 * 
 * $EndLog$
 */

/*
 * Copyright (c) Hewlett-Packard Company 1992, 1993
 * Unpublished work. All Rights Reserved.
 *
 *  NAME:
 *
 *      rs_replist.idl
 *
 *  FACILITY:
 *
 *      Security 
 *
 *  ABSTRACT:
 *
 *      Registry server replica list management interface
 */

[
 uuid(850446B0-E95B-11CA-AD90-08001E0145B1),
 version(1.0),
 pointer_default(ptr)
]

interface rs_replist
{
    import "dce/rgynbase.idl";
    import "dce/rplbase.idl";
    
    /*
     *  rs_replist_add_replica
     *
     *  add a replica to the replica list.
     *
     *  master-only operation.
     */
    void rs_replist_add_replica(
        [in]    handle_t                h,
        [in]    uuid_p_t                rep_id,
        [in]    rs_replica_name_p_t     rep_name,
        [in]    rs_replica_twr_vec_p_t  rep_twrs,
        [out]   error_status_t          *status
    );

    /*
     *  rs_replist_replace_replica
     *
     *  replace information about replica "rep_id" on the 
     *  replica list.  
     *
     *  master-only operation.
     */
    void rs_replist_replace_replica(
        [in]    handle_t                h,
        [in]    uuid_p_t                rep_id,
        [in]    rs_replica_name_p_t     rep_name,
        [in]    rs_replica_twr_vec_p_t  rep_twrs,
        [out]   error_status_t          *status
    );

    /*
     *  rs_replist_delete_replica
     *
     *  delete the replica identified by "rep_id".
     *  If "force_delete" is false, send the delete
     *  to the replica identified by "rep_id" as
     *  well as the other replicas.
     *  If "force_delete" is true, do not send the
     *  delete to the replica identified by "rep_id";
     *  it has been killed off some other way.
     *
     *  the master may NOT be deleted with this operation
     *
     *  master-only operation.
     */
    void rs_replist_delete_replica(
        [in]    handle_t                h,
        [in]    uuid_p_t                rep_id,
        [in]    boolean32               force_delete,
        [out]   error_status_t          *status
    );

    /*
     *  rs_replist_read 
     *
     *  read the replica list
     *
     *  To start reading at the beginning of the replica
     *  list, set marker to uuid_nil.
     *  To read information about a specific replica, set
     *  marker to its uuid and max_ents to 1.
     *
     *  The returned marker contains the uuid of the next
     *  replica on the list.  Marker contains uuid_nil
     *  when there are no more replicas on the list.
     */
    void rs_replist_read(
        [in]        handle_t            h,
        [in, out]   uuid_t              *marker,
        [in]        unsigned32          max_ents,
        [out]       unsigned32          *n_ents,
        [out, length_is(*n_ents), size_is(max_ents)]
                    rs_replica_item_t   replist[],
        [out]       error_status_t      *status
    );

    /*
     *  rs_replist_read_full
     *
     *  read the replica list getting additional
     *  propagation information about each replica.
     *
     *  To start reading at the beginning of the replica
     *  list, set marker to uuid_nil.
     *  To read information about a specific replica, set
     *  marker to its uuid and max_ents to 1.
     *
     *  The returned marker contains the uuid of the next
     *  replica on the list.  Marker contains uuid_nil
     *  when there are no more replicas on the list.
     */
    void rs_replist_read_full(
        [in]        handle_t            h,
        [in, out]   uuid_t              *marker,
        [in]        unsigned32          max_ents,
        [out]       unsigned32          *n_ents,
        [out, length_is(*n_ents), size_is(max_ents)]
                    rs_replica_item_full_t   
                                        replist[],
        [out]       error_status_t      *status
    );

}

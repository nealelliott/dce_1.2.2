#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test2s,v $
# Revision 1.1.10.1  1996/10/17  18:20:12  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:50:44  damon]
#
# Revision 1.1.4.4  1993/01/11  18:26:54  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:00:34  htf]
# 
# Revision 1.1.4.3  1992/10/28  16:22:14  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    No changes made.
# 	Transarc delta: jess-add-dumpkernel-in-fs-tests 1.3
# 	  Selected comments:
# 	    The icldump command and debug option for the tests have been added in the
# 	    fs test scripts. You can run fs/tests with -debug to dump kernel in case
# 	    of error. The delta also adds the icl_DumpKernel function in the C programm.
# 	    See above.
# 	    Put the debug option in test1.
# 	    When the debug is set the dumpfile is always created eventhough
# 	    there is no error.
# 	Transarc delta: jess-fs-path-for-icldump 1.1
# 	  Selected comments:
# 	    This delta adds the path for icldump command. The command has been
# 	    installed at "util" dir in test tree by Fred's delta.
# 	    See above.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/27  18:23:07  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:12:20  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Really no change
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    See above.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    Added error test err2 to the Makefile
# 	[1992/08/28  12:19:13  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  22:58:38  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/29  22:47:02  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:40:37  jaffe
# 	Transarc delta: fred-2980-and-2981-fix-sys 1.1
# 	  Files modified:
# 	    fs: Makefile, err1, err2, half_meg, test1, test10, test2
# 	    fs: test2b, test2s, test3, test4, test5, test6, test7, test8
# 	    fs: test9
# 	  Selected comments:
# 	    To fix reported defects indicating files could not be found.  Added two
# 	    shell scripts, one to issue the correct command to get the system type
# 	    (either AFS or DFS), and a second to generate a file from a string.
# 	    Change variable sys to dfs_fsSysName and use fsSetSysName shell script.
# 	Transarc delta: fred-merge-tests 1.1
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Files modified:
# 	    Makefile; cm: runtests, test0, test3, test4, test6
# 	    fs: Makefile, err1, err2, rtest1, test10, test2, test2b
# 	    fs: test2s, test3, test4, test5, test6, test7, test8, test9
# 	    low: progErrMap.c, rprogErrMapQuota.c, rtest1, rtest2
# 	    low: rtestErrMapQuota, test1, test10, test11, test12, test13
# 	    low: test14, test2, test3, test4, test5, test6, test7, test8
# 	    low: test9, testErrMap
# 	    util: Makefile, fs_GenerateFile, fs_SetSysName
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test2s,v $
# 	Revision 4.24  1994/11/01  22:23:13  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.23 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  19:10:06  jaffe]
# 
# $EndLog$
#
###############################################################################
#    Copyright (C) 1990, 1992 Transarc Corporation - All rights reserved      #
###############################################################################

# This script performs a variety of standard file operations, like creating,
# appending, modifying, linking (hard and symbolic), renaming, and removing.
# Multiple process can be run at once; all run in the same directory.

# Usage: test2s [-np #-processes] [-nt #-times] [-debug]

# Note:  default is test2s -np 1 -nt 1

# Highest error number is: 13.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName tests common Unix file operations"
    echo "Usage: $programName [-np #-procs] [-nt #-times]"
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}

if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/fs
fi

. $UTIL_DIR/fs_FunctionsScript
. $UTIL_DIR/fs_SetSysVar
createFileCmd="$UTIL_DIR/fs_GenerateFile"

trap '
    echo "Got kill signal - waiting for kids to die..." | tee -a $logFile
    wait
    cd $currentDir
    rm *.$$.[0-9]* orig orig.wc
    echo "$programName killed; returning $scriptErrorExit" | tee -a $logFile
    exit 1
    ' 2 3 15

#
# Initialise setup variables
#

fs_InitSetup fs

#
# Default option argument values
#

processCount=1
iterationCount=1

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage
                    exit $successExit
                    ;;

        np|-np)     CheckOptionValue "np" $testSuiteType $programName $*
                    processCount=$2
                    shift
                    shift
                    ;;

        nt|-nt)     CheckOptionValue "nt" $testSuiteType $programName $*
                    iterationCount=$2
                    shift
                    shift
                    ;;
        debug|-debug)
                    dumpkernel="true"
                    shift
                    ;;

        *)          echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile
                    exit $scriptErrExit
                    ;;
    esac
done

#
# Validate arguments
#

if [ $processCount -lt 1 ]
then 
    echo "$programName: number of processes must be >= 1" | tee -a $logFile
    exit 2
elif [ $iterationCount -lt 0 ]
then 
    echo "$programName: number of times must be >= 0" | tee -a $logFile
    exit 2
fi

#
# Start test
#

(
    echo "$programName (beater) starting in $currentDir"
    echo "Host `hostname` ($fs_sysName)"
    date
) | tee -a $logFile

echo "$processCount processes; $iterationCount times; parent process number $$" | tee -a $logFile

fs_DetermineFSType

cat > orig << ==END==
This is a test of the emergency broadcast system.
This is only a test.
Do not attempt to adjust your set.
This is only a test.
==END==
wc orig > orig.wc

iterationNum=1
while [ $iterationNum -le $iterationCount -o $iterationCount -eq 0 ]
do
    (
        echo ""
        echo "$programName starting iteration number $iterationNum"
        date
    ) | tee -a $logFile

    date1=`date`

    processNum=1
    while [ $processNum -le $processCount ]
    do
        echo "   $programName starting process number $processNum" | tee -a $logFile
        (
            identifer=$$.$processNum
            rm -rf *.$identifier
        
            date > srt.$identifier
            sort < orig > srt.$identifier
        
            echo "ed srt.$identifier << ==END==" >> eed.$identifier
            diff -e srt.$identifier orig >> eed.$identifier
        
            echo "w" >> eed.$identifier 
            echo "q" >> eed.$identifier 
            echo "==END==" >> eed.$identifier
           
            sh ./eed.$identifier > /dev/null
            wc srt.$identifier | sed 's/srt\.[0-9\.]*/orig/' > srt.wc.$identifier
            diff orig.wc srt.wc.$identifier > wcd.$identifier
        
            cp srt.$identifier s1.$identifier
            cp srt.wc.$identifier s2.$identifier
            mv s1.$identifier s2.$identifier
           
            cp orig.wc ow.$identifier
            ln ow.$identifier hardwc.$identifier
            rm ow.$identifier
        
            ln -s srt.wc.$identifier symwc.$identifier
        
            mv hardwc.$identifier hwc.$identifier
            mv symwc.$identifier swc.$identifier
        
            mkdir x.$identifier y.$identifier z.$identifier
            ln -s z.$identifier zz.$identifier
           
            mv x.$identifier xx.$identifier
            mv hwc.$identifier xx.$identifier
            cp swc.$identifier xx.$identifier
        
            rm xx.$identifier/* 
            rmdir xx.$identifier y.$identifier z.$identifier 
            rm zz.$identifier
        
            cp srt.wc.$identifier eed.$identifier
        
            alphaChars="a b c d e f g h i j k l m n o p q r s t u v w x y z"
            for f in $alphaChars
            do
                cp orig $f.$identifier
                if [ ! -f $f.$identifier ]
                then 
                    echo "- $programName: cannot create $f.$identifier (E1)" | tee -a $logFile
                    touch error.$$.$processNum
                fi
            done
        
            for f in $alphaChars
            do
                diff orig $f.$identifier > /dev/null 2> /dev/null
                if [ $? -ne 0 ]
                then 
                    echo "- $programName: $f.$identifier is wrong (E2)" | tee -a $logFile
                    touch error.$$.$processNum
                else
                    rm $f.$identifier
                    if [ -f $f.$identifier ]
                    then 
                        echo "- $programName: cannot delete $f.$identifier (E3)" | tee -a $logFile
                        touch error.$$.$processNum
                    fi
                fi
            done
        
            echo "   $programName process number $processNum done" | tee -a $logFile
        ) &
        processNum=`expr $processNum + 1`
    done

    echo "" | tee -a $logFile
    wait
    
###############################################################################
    
    echo "" | tee -a $logFile
    processNum=1
    while [ $processNum -le $processCount ]
    do
        correct=TRUE
        u=$$.$processNum
     
        if [ -f error.$$.$processNum  ]
        then 
		if [ $dumpkernel = "true" ]
		then
		   $UTIL_DIR/icldump >> $logFile
		fi
            errorCount=`expr $errorCount + 1`
            rm -f error.$$.$processNum 
        fi
     
        diff orig srt.$identifier > /dev/null 2> /dev/null
        if [ $? -ne 0 ]
        then 
            echo "- $programName process $processNum: sorted diff wrong (E4)" | tee -a $logFile
		if [ $dumpkernel = "true" ]
		then
		   $UTIL_DIR/icldump >> $logFile
		fi
            errorCount=`expr $errorCount + 1`
             correct=FALSE
        fi
        diff orig s2.$identifier > /dev/null 2> /dev/null
        if [ $? -ne 0 ]
        then 
            echo "- $programName process $processNum: s2 diff wrong (E5)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        fi
        if [ ! -f eed.$identifier ]
        then 
            echo "- $programName: eed.$identifier missing (E6)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        else
            diff srt.wc.$identifier eed.$identifier > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName: eed.$identifier wrong (E7)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
                correct=FALSE
            fi
        fi
        if [ ! -f srt.wc.$identifier ]
        then 
            echo "- $programName: srt.wc.$identifier missing (E8)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        else
            diff srt.wc.$identifier eed.$identifier > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName: srt.wc.$identifier wrong (E9)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
                correct=FALSE
            fi
            cat swc.$identifier | diff - srt.wc.$identifier > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName: srt.wc.$identifier wrong (E10)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
                correct=FALSE
            fi
        fi
        if [ ! -f wcd.$identifier ]
        then 
            echo "- $programName: wcd.$identifier missing (E11)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        elif [ -s wcd.$identifier ]
        then 
            echo "- $programName: wcd.$identifier wrong size (E12)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        fi

        mkdir tdir.$$
        mv eed.$identifier srt.$identifier srt.wc.$identifier swc.$identifier s2.$identifier wcd.$identifier tdir.$$
        if [ `ls *.$identifier 2> /dev/null | wc -l` -ne 0 ]
        then 
            echo "- $programName process $processNum: extra files (E13)" | tee -a $logFile
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
            correct=FALSE
        fi

        if [ $correct = TRUE ]
        then 
            echo "   $programName process $processNum results OK" | tee -a $logFile
        fi

        rm -rf tdir.$$ *.$identifier
        processNum=`expr $processNum + 1`
    done

    date2=`date`

    hour1=`echo $date1 | sed 's/^... ... [0-9]* \(..\).*/\1/'`
    minute1=`echo $date1 | sed 's/^... ... [0-9]* ..:\(..\).*/\1/'`
    second1=`echo $date1 | sed 's/^... ... [0-9]* ..:..:\(..\).*/\1/'`
    hour2=`echo $date2 | sed 's/^... ... [0-9]* \(..\).*/\1/'`
    minute2=`echo $date2 | sed 's/^... ... [0-9]* ..:\(..\).*/\1/'`
    second2=`echo $date2 | sed 's/^... ... [0-9]* ..:..:\(..\).*/\1/'`
    
    if [ $second2 -lt $second1 ]
    then 
        second2=`expr $second2 + 60`
        minute2=`expr $minute2 - 1`
    fi

    if [ $minute2 -lt $minute1 ]
    then 
        minute2=`expr $minute2 + 60`
        hour2=`expr $hour2 - 1`
    fi

    if [ $hour2 -lt 0 ]
    then 
        hour2=$hour1
    fi

    elapsedSeconds=`expr $second2 - $second1`
    elapsedMinutes=`expr $minute2 - $minute1`
    elapsedHours=`expr $hour2 - $hour1`
    elapsedTime=`expr $elapsedSeconds + $elapsedMinutes \* 60 + $elapsedHours \* 3600`

    echo "Elapsed time for iteration #$iterationNum is $elapsedTime seconds." | tee -a $logFile

    if [ $fsType = $DFS ]
    then 
        cm lsstores
    fi

    iterationNum=`expr $iterationNum + 1`
done

###############################################################################

rm -rf orig orig.wc

(
    echo ""
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"
    date
) | tee -a $logFile

exit $errorCount

###############################################################################


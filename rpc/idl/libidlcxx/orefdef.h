/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 * 
 */
/*
 * HISTORY
 * $Log: orefdef.h,v $
 * Revision 1.1.2.2  1996/03/09  20:45:15  marty
 * 	Add OSF copyright
 * 	[1996/03/09  20:24:49  marty]
 *
 * Revision 1.1.2.1  1995/12/08  00:13:18  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/07  23:55:14  root]
 * 
 * $EndLog$
 */
/* Generated by IDL compiler version DEC DCE T1.2.0-03 */
#ifndef ObjectRefTypes_v0_0_included
#define ObjectRefTypes_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>
#ifndef IDL_ObjectRefTypes_DEFINED
#define IDL_ObjectRefTypes_DEFINED 

typedef struct {
    rpc_binding_handle_t bh;
    uuid_t object_uuid;
} ObjectRefTypes;
#endif

#ifdef __cplusplus
    extern "C" {
#endif
  
#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
  typedef enum {OBJREF_NULL=0,
    OBJREF_STANDARD=1,
    OBJREF_CUSTOM=2,
    OBJREF_HANDLER=3,
    OBJREF_DCE=999,
    OBJREF_TWR=1000} OBJREFFLAGS;
  typedef uuid_t IPID;
  typedef uuid_t OXID;
  typedef uuid_t CLSID;
  typedef uuid_t IID;
  typedef idl_ushort_int PINGPERIOD;
#define PING_NRC (65534)
#define PING_INF (65535)
  typedef idl_ushort_int PRINCID;
  typedef struct tagSTDOBJREF {
    PINGPERIOD period;
    PRINCID princid;
    IPID ipid;
    OXID oxid;
  } STDOBJREF;
  typedef struct tagDCEOBJREF {
    idl_byte str[255];
  } DCEOBJREF;
  typedef struct tagTWRREP {
    PINGPERIOD period;
    PRINCID princid;
    uuid_t oid;
    unsigned32 count;
    twr_p_t *tower;
  } TWRREP;
  typedef struct tagCUSOBJREF {
    CLSID clsid;
    idl_ulong_int size;
    idl_byte *data;
  } CUSOBJREF;
  typedef struct tagHANDLER {
    CLSID clsid;
    STDOBJREF objref;
  } HANDLER;
  typedef union  {
    /* case(s): 1 */
    STDOBJREF std;
    /* case(s): 2 */
    CUSOBJREF custom;
    /* case(s): 3 */
    HANDLER handler;
    /* case(s): 999 */
    DCEOBJREF dce;
    /* case(s): 1000 */
    TWRREP twr;
  } U_OBJREF;
  typedef struct tagOBJREF {
    OBJREFFLAGS flags;
    idl_short_int mbz;
    U_OBJREF u_objref;
  } OBJREF;
  extern void junk(
#ifdef IDL_PROTOTYPES
      /* [in] */ OBJREF objref
#endif
  );
#if defined(__VMS) && (defined(__DECC) || defined(__cplusplus))
#pragma extern_model __save
#pragma extern_model __common_block __shr
#endif
  typedef struct ObjectRefTypes_v0_0_epv_t {
    void (*junk)(
#ifdef IDL_PROTOTYPES
        /* [in] */ OBJREF objref
#endif
    );
  } ObjectRefTypes_v0_0_epv_t;
  extern rpc_if_handle_t ObjectRefTypes_v0_0_c_ifspec;
  extern rpc_if_handle_t ObjectRefTypes_v0_0_s_ifspec;
#if defined(__VMS) && (defined(__DECC) || defined(__cplusplus))
#pragma extern_model __restore
#endif
  
#ifdef __cplusplus
      }

#else

/******* C Language Binding *******/


#define ObjectRefTypes_junk( obj , \
    objref) \
  (junk) ((obj)->bh , \
    (objref))
#endif


static idl_ulong_int interface_offset_vec[] = {
  0,	/* sentinel */
  		/* struct OBJREF size and offsets */
  /*      1 */ sizeof(OBJREF )	/* sizeof OBJREF */,
  /*      2 */ offsetof(OBJREF , flags),	/* field flags offset */
  /*      3 */ offsetof(OBJREF , mbz),	/* field mbz offset */
  /*      4 */ offsetof(OBJREF , u_objref),	/* field u_objref offset */
  		/* n_e union U_OBJREF size */
  /*      5 */ sizeof(U_OBJREF )	/* sizeof U_OBJREF */,
  		/* struct TWRREP size and offsets */
  /*      6 */ sizeof(TWRREP )	/* sizeof TWRREP */,
  /*      7 */ offsetof(TWRREP , period),	/* field period offset */
  /*      8 */ offsetof(TWRREP , princid),	/* field princid offset */
  /*      9 */ offsetof(TWRREP , oid.time_low),	/* field time_low offset */
  /*     10 */ offsetof(TWRREP , oid.time_mid),	/* field time_mid offset */
  /*     11 */ offsetof(TWRREP , oid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     12 */ offsetof(TWRREP , oid.clock_seq_hi_and_reserved),	/* field 
clock_seq_hi_and_reserved offset */
  /*     13 */ offsetof(TWRREP , oid.clock_seq_low),	/* field clock_seq_low 
offset */
  /*     14 */ offsetof(TWRREP , oid.node),	/* field node offset */
  /*     15 */ offsetof(TWRREP , count),	/* field count offset */
  /*     16 */ offsetof(TWRREP , tower),	/* field tower offset */
  		/* struct twr_t size and offsets */
  /*     17 */ offsetof(twr_t , tower_octet_string)	/* sizeof twr_t */,
  /*     18 */ offsetof(twr_t , tower_length),	/* field tower_length offset */
  /*     19 */ offsetof(twr_t , tower_octet_string),	/* field 
tower_octet_string offset */
  		/* struct DCEOBJREF size and offsets */
  /*     20 */ sizeof(DCEOBJREF )	/* sizeof DCEOBJREF */,
  /*     21 */ offsetof(DCEOBJREF , str),	/* field str offset */
  		/* struct HANDLER size and offsets */
  /*     22 */ sizeof(HANDLER )	/* sizeof HANDLER */,
  /*     23 */ offsetof(HANDLER , clsid.time_low),	/* field time_low offset */
  /*     24 */ offsetof(HANDLER , clsid.time_mid),	/* field time_mid offset */
  /*     25 */ offsetof(HANDLER , clsid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     26 */ offsetof(HANDLER , clsid.clock_seq_hi_and_reserved),	/* field 
clock_seq_hi_and_reserved offset */
  /*     27 */ offsetof(HANDLER , clsid.clock_seq_low),	/* field clock_seq_low 
offset */
  /*     28 */ offsetof(HANDLER , clsid.node),	/* field node offset */
  /*     29 */ offsetof(HANDLER , objref.period),	/* field period offset */
  /*     30 */ offsetof(HANDLER , objref.princid),	/* field princid offset */
  /*     31 */ offsetof(HANDLER , objref.ipid.time_low),	/* field time_low 
offset */
  /*     32 */ offsetof(HANDLER , objref.ipid.time_mid),	/* field time_mid 
offset */
  /*     33 */ offsetof(HANDLER , objref.ipid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     34 */ offsetof(HANDLER , objref.ipid.clock_seq_hi_and_reserved),	/* 
field clock_seq_hi_and_reserved offset */
  /*     35 */ offsetof(HANDLER , objref.ipid.clock_seq_low),	/* field 
clock_seq_low offset */
  /*     36 */ offsetof(HANDLER , objref.ipid.node),	/* field node offset */
  /*     37 */ offsetof(HANDLER , objref.oxid.time_low),	/* field time_low 
offset */
  /*     38 */ offsetof(HANDLER , objref.oxid.time_mid),	/* field time_mid 
offset */
  /*     39 */ offsetof(HANDLER , objref.oxid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     40 */ offsetof(HANDLER , objref.oxid.clock_seq_hi_and_reserved),	/* 
field clock_seq_hi_and_reserved offset */
  /*     41 */ offsetof(HANDLER , objref.oxid.clock_seq_low),	/* field 
clock_seq_low offset */
  /*     42 */ offsetof(HANDLER , objref.oxid.node),	/* field node offset */
  		/* struct CUSOBJREF size and offsets */
  /*     43 */ sizeof(CUSOBJREF )	/* sizeof CUSOBJREF */,
  /*     44 */ offsetof(CUSOBJREF , clsid.time_low),	/* field time_low offset */
  /*     45 */ offsetof(CUSOBJREF , clsid.time_mid),	/* field time_mid offset */
  /*     46 */ offsetof(CUSOBJREF , clsid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     47 */ offsetof(CUSOBJREF , clsid.clock_seq_hi_and_reserved),	/* field 
clock_seq_hi_and_reserved offset */
  /*     48 */ offsetof(CUSOBJREF , clsid.clock_seq_low),	/* field 
clock_seq_low offset */
  /*     49 */ offsetof(CUSOBJREF , clsid.node),	/* field node offset */
  /*     50 */ offsetof(CUSOBJREF , size),	/* field size offset */
  /*     51 */ offsetof(CUSOBJREF , data),	/* field data offset */
  		/* struct STDOBJREF size and offsets */
  /*     52 */ sizeof(STDOBJREF )	/* sizeof STDOBJREF */,
  /*     53 */ offsetof(STDOBJREF , period),	/* field period offset */
  /*     54 */ offsetof(STDOBJREF , princid),	/* field princid offset */
  /*     55 */ offsetof(STDOBJREF , ipid.time_low),	/* field time_low offset */
  /*     56 */ offsetof(STDOBJREF , ipid.time_mid),	/* field time_mid offset */
  /*     57 */ offsetof(STDOBJREF , ipid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     58 */ offsetof(STDOBJREF , ipid.clock_seq_hi_and_reserved),	/* field 
clock_seq_hi_and_reserved offset */
  /*     59 */ offsetof(STDOBJREF , ipid.clock_seq_low),	/* field 
clock_seq_low offset */
  /*     60 */ offsetof(STDOBJREF , ipid.node),	/* field node offset */
  /*     61 */ offsetof(STDOBJREF , oxid.time_low),	/* field time_low offset */
  /*     62 */ offsetof(STDOBJREF , oxid.time_mid),	/* field time_mid offset */
  /*     63 */ offsetof(STDOBJREF , oxid.time_hi_and_version),	/* field 
time_hi_and_version offset */
  /*     64 */ offsetof(STDOBJREF , oxid.clock_seq_hi_and_reserved),	/* field 
clock_seq_hi_and_reserved offset */
  /*     65 */ offsetof(STDOBJREF , oxid.clock_seq_low),	/* field 
clock_seq_low offset */
  /*     66 */ offsetof(STDOBJREF , oxid.node),	/* field node offset */
  0	/* sentinel */
};

static IDL_rtn_func_t interface_rtn_vec[] = {
  (IDL_rtn_func_t)NULL,	/* sentinel */
  (IDL_rtn_func_t)NULL	/* sentinel */
};

static idl_byte interface_type_vec[] = {
  /*      0 */ 0xff,0xff,0xff,0xff,
  /*      4 */ 1,		/* little endian */
  /*      5 */ 0,		/* ASCII */
  /*      6 */ 0xff,0xff,
  /*      8 */ 0x03,0x00,	/* interpreter encoding major version 3 */
  /*     10 */ 0x02,0x00,	/* interpreter encoding minor version 2 */
  /*     12 */ 0x00,0x00,	/* interface ObjectRefTypes major version 0 */
  /*     14 */ 0x00,0x00,	/* interface ObjectRefTypes minor version 0 */
  /*     16 */ 0x18,0xc3,0x62,0xff,	/* uuid time_low */
  /*     20 */ 0xa8,0xdb,	/* uuid time_mid */
  /*     22 */ 0xcd,0x11,	/* uuid time_hi_and_version */
  /*     24 */ 0xad,		/* uuid clock_seq_hi_and_reserved */
  /*     25 */ 0x71,		/* uuid clock_seq_low */
  /*     26 */ 0x08,0x00,0x2b,0x3d,0x84,0x12,	/* uuid node */
  /*     32 */ 0x88,0x02,0x00,0x00,	/* index of storage information = 648 */
  /*     36 */ 0x04,0x00,0x00,0x00,	/* number of bug flags = 4 */
  /*     40 */ 0x84,0x02,0x00,0x00,	/* index of bug flags = 644 */
  /*     44 */ 0xff,0xff,0xff,0xff,
  /*     48 */ 0xff,0xff,0xff,0xff,
  /*     52 */ 0xff,0xff,0xff,0xff,
  /*     56 */ 0xff,0xff,0xff,0xff,
  /*     60 */ 0x01,0x00,0x00,0x00,	/* number of operations = 1 */
  /*     64 */ 0x00,0x00,0x00,0x00,	/* operation junk flags */
  /*     68 */ 0x02,0x00,0x00,0x00,	/* number of junk params = 2 */
  /*     72 */ 0x01,0x00,0x00,0x00,	/* number of junk [in]s  = 1 */
  /*     76 */ 0x58,0x00,0x00,0x00,	/* index  of junk [in]s  = 88 */
  /*     80 */ 0x00,0x00,0x00,0x00,	/* number of junk [out]s = 0 */
  /*     84 */ 0xff,0xff,0xff,0xff,
  		/* Operation junk parameter objref */
  /*     88 */ 0x01,0x00,0x00,0x00,	/* long 1 index of parameter objref */
  /*     92 */ IDL_DT_FIXED_STRUCT,
  /*     93 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*     94 */ 0xff,0xff,	/* filler */
  /*     96 */ 0x68,0x00,0x00,0x00,	/* long 104 type OBJREF index */
  /*    100 */ IDL_DT_EOL,
  		/* struct OBJREF definition */
  /*    101 */ 0xff,0xff,0xff,	/* filler */
  /*    104 */ 0x01,0x00,0x00,0x00,	/* long 1 offset vector index */
  /*    108 */ IDL_DT_NDR_ALIGN_4,
  /*    109 */ IDL_DT_ENUM,	/* OBJREFFLAGS flags */
  /*    110 */ IDL_DT_SHORT,	/* mbz */
  /*    111 */ IDL_DT_N_E_UNION,
  /*    112 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*    113 */ 0xff,0xff,0xff,	/* filler */
  /*    116 */ 0x01,0x00,0x00,0x00,	/* long 1 switch flags index */
  /*    120 */ 0x80,0x00,0x00,0x00,	/* long 128 type U_OBJREF index */
  /*    124 */ IDL_DT_EOL,
  		/* union U_OBJREF definition */
  /*    125 */ 0xff,0xff,0xff,	/* filler */
  /*    128 */ 0x05,0x00,0x00,0x00,	/* long 5 offset vector index */
  /*    132 */ IDL_DT_ENUM,	/* OBJREFFLAGS switch type */
  /*    133 */ 0xff,0xff,0xff,	/* filler */
  /*    136 */ 0x05,0x00,0x00,0x00,	/* long 5 number of arms */
  /*    140 */ 0x01,0x00,0x00,0x00,	/* long 1 switch value */
  /*    144 */ IDL_DT_FIXED_STRUCT,
  /*    145 */ 0|IDL_PROP_DEP_INT|IDL_PROP_MAYBE_WIRE_ALIGNED,	/* properties */
  /*    146 */ 0xff,0xff,	/* filler */
  /*    148 */ 0x3c,0x02,0x00,0x00,	/* long 572 type STDOBJREF index */
  /*    152 */ 0xff,0xff,0xff,0xff,	/* filler */
  /*    156 */ 0x02,0x00,0x00,0x00,	/* long 2 switch value */
  /*    160 */ IDL_DT_FIXED_STRUCT,
  /*    161 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*    162 */ 0xff,0xff,	/* filler */
  /*    164 */ 0xec,0x01,0x00,0x00,	/* long 492 type CUSOBJREF index */
  /*    168 */ 0xff,0xff,0xff,0xff,	/* filler */
  /*    172 */ 0x03,0x00,0x00,0x00,	/* long 3 switch value */
  /*    176 */ IDL_DT_FIXED_STRUCT,
  /*    177 */ 0|IDL_PROP_DEP_INT|IDL_PROP_MAYBE_WIRE_ALIGNED,	/* properties */
  /*    178 */ 0xff,0xff,	/* filler */
  /*    180 */ 0x80,0x01,0x00,0x00,	/* long 384 type HANDLER index */
  /*    184 */ 0xff,0xff,0xff,0xff,	/* filler */
  /*    188 */ 0xe7,0x03,0x00,0x00,	/* long 999 switch value */
  /*    192 */ IDL_DT_FIXED_STRUCT,
  /*    193 */ 0|IDL_PROP_MAYBE_WIRE_ALIGNED,	/* properties */
  /*    194 */ 0xff,0xff,	/* filler */
  /*    196 */ 0x60,0x01,0x00,0x00,	/* long 352 type DCEOBJREF index */
  /*    200 */ 0xff,0xff,0xff,0xff,	/* filler */
  /*    204 */ 0xe8,0x03,0x00,0x00,	/* long 1000 switch value */
  /*    208 */ IDL_DT_FIXED_STRUCT,
  /*    209 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*    210 */ 0xff,0xff,	/* filler */
  /*    212 */ 0xe0,0x00,0x00,0x00,	/* long 224 type TWRREP index */
  /*    216 */ 0xff,0xff,0xff,0xff,	/* filler */
  /*    220 */ IDL_DT_DOES_NOT_EXIST,
  		/* struct TWRREP definition */
  /*    221 */ 0xff,0xff,0xff,	/* filler */
  /*    224 */ 0x06,0x00,0x00,0x00,	/* long 6 offset vector index */
  /*    228 */ IDL_DT_NDR_ALIGN_4,
  /*    229 */ IDL_DT_USHORT,	/* PINGPERIOD period */
  /*    230 */ IDL_DT_USHORT,	/* PRINCID princid */
  /*    231 */ IDL_DT_NDR_ALIGN_4,
  /*    232 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    233 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    234 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    235 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    236 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    237 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    238 */ IDL_DT_FIXED_ARRAY,
  /*    239 */ 0,	/* properties */
  /*    240 */ 0x53,0x01,0x00,0x00,	/* long 339 full array index */
  /*    244 */ 0x53,0x01,0x00,0x00,	/* long 339 flat array index */
  /*    248 */ IDL_DT_END_NESTED_STRUCT,
  /*    249 */ IDL_DT_ULONG,	/* unsigned32 count */
  /*    250 */ IDL_DT_UNIQUE_PTR,
  /*    251 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*    252 */ 0x01,0x01,0x00,0x00,	/* long 257 pointee index */
  /*    256 */ IDL_DT_EOL,
  /*    257 */ IDL_DT_CONF_ARRAY,
  /*    258 */ 0|IDL_PROP_DEP_INT|IDL_PROP_HAS_PTRS,	/* properties */
  /*    259 */ 0xff,	/* filler */
  /*    260 */ 0x0f,0x01,0x00,0x00,	/* long 271 full array index */
  /*    264 */ 0x0f,0x01,0x00,0x00,	/* long 271 flat array index */
  		/* array anon_array full instance */
  /*    268 */ 0xff,0xff,0xff,	/* filler */
  /*    271 */ 1,	/* num dimensions */
  /*    272 */ IDL_BOUND_FIXED,
  /*    273 */ 0xff,0xff,0xff,	/* filler */
  /*    276 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    280 */ IDL_BOUND_SIZE_IS,
  /*    281 */ IDL_DT_ULONG,	/* unsigned32 bound type */
  /*    282 */ 0xff,0xff,	/* filler */
  /*    284 */ 0x09,0x00,0x00,0x00,	/* long 9 field number of size_is 
reference */
  /*    288 */ IDL_DT_UNIQUE_PTR,
  /*    289 */ IDL_DT_CONF_STRUCT,
  /*    290 */ 0|IDL_PROP_DEP_INT|IDL_PROP_MAYBE_WIRE_ALIGNED,	/* properties */
  /*    291 */ 0xff,	/* filler */
  /*    292 */ 0x28,0x01,0x00,0x00,	/* long 296 type twr_t index */
  		/* struct twr_t definition */
  /*    296 */ 0x11,0x00,0x00,0x00,	/* long 17 offset vector index */
  /*    300 */ 0x3f,0x01,0x00,0x00,	/* long 319 flat conformant array index */
  /*    304 */ IDL_DT_NDR_ALIGN_4,
  /*    305 */ IDL_DT_ULONG,	/* unsigned32 tower_length */
  /*    306 */ IDL_DT_CONF_ARRAY,
  /*    307 */ 0|IDL_PROP_DEP_INT,	/* properties */
  /*    308 */ 0x3f,0x01,0x00,0x00,	/* long 319 full array index */
  /*    312 */ 0x3f,0x01,0x00,0x00,	/* long 319 flat array index */
  /*    316 */ IDL_DT_EOL,
  		/* array anon_array full instance */
  /*    317 */ 0xff,0xff,	/* filler */
  /*    319 */ 1,	/* num dimensions */
  /*    320 */ IDL_BOUND_FIXED,
  /*    321 */ 0xff,0xff,0xff,	/* filler */
  /*    324 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    328 */ IDL_BOUND_SIZE_IS,
  /*    329 */ IDL_DT_ULONG,	/* unsigned32 bound type */
  /*    330 */ 0xff,0xff,	/* filler */
  /*    332 */ 0x01,0x00,0x00,0x00,	/* long 1 field number of size_is 
reference */
  /*    336 */ IDL_DT_BYTE,
  		/* array anon_array full instance */
  /*    337 */ 0xff,0xff,	/* filler */
  /*    339 */ 1,	/* num dimensions */
  /*    340 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    344 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    348 */ IDL_DT_BYTE,
  		/* struct DCEOBJREF definition */
  /*    349 */ 0xff,0xff,0xff,	/* filler */
  /*    352 */ 0x14,0x00,0x00,0x00,	/* long 20 offset vector index */
  /*    356 */ IDL_DT_FIXED_ARRAY,
  /*    357 */ 0,	/* properties */
  /*    358 */ 0xff,0xff,	/* filler */
  /*    360 */ 0x73,0x01,0x00,0x00,	/* long 371 full array index */
  /*    364 */ 0x73,0x01,0x00,0x00,	/* long 371 flat array index */
  /*    368 */ IDL_DT_EOL,
  		/* array anon_array full instance */
  /*    369 */ 0xff,0xff,	/* filler */
  /*    371 */ 1,	/* num dimensions */
  /*    372 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    376 */ 0xfe,0x00,0x00,0x00,	/* long 254 fixed bound */
  /*    380 */ IDL_DT_BYTE,
  		/* struct HANDLER definition */
  /*    381 */ 0xff,0xff,0xff,	/* filler */
  /*    384 */ 0x16,0x00,0x00,0x00,	/* long 22 offset vector index */
  /*    388 */ IDL_DT_NDR_ALIGN_4,
  /*    389 */ IDL_DT_NDR_ALIGN_4,
  /*    390 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    391 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    392 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    393 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    394 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    395 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    396 */ IDL_DT_FIXED_ARRAY,
  /*    397 */ 0,	/* properties */
  /*    398 */ 0xff,0xff,	/* filler */
  /*    400 */ 0xdf,0x01,0x00,0x00,	/* long 479 full array index */
  /*    404 */ 0xdf,0x01,0x00,0x00,	/* long 479 flat array index */
  /*    408 */ IDL_DT_END_NESTED_STRUCT,
  /*    409 */ IDL_DT_NDR_ALIGN_4,
  /*    410 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    411 */ IDL_DT_USHORT,	/* PINGPERIOD period */
  /*    412 */ IDL_DT_USHORT,	/* PRINCID princid */
  /*    413 */ IDL_DT_NDR_ALIGN_4,
  /*    414 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    415 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    416 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    417 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    418 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    419 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    420 */ IDL_DT_FIXED_ARRAY,
  /*    421 */ 0,	/* properties */
  /*    422 */ 0xff,0xff,	/* filler */
  /*    424 */ 0xd3,0x01,0x00,0x00,	/* long 467 full array index */
  /*    428 */ 0xd3,0x01,0x00,0x00,	/* long 467 flat array index */
  /*    432 */ IDL_DT_END_NESTED_STRUCT,
  /*    433 */ IDL_DT_NDR_ALIGN_4,
  /*    434 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    435 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    436 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    437 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    438 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    439 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    440 */ IDL_DT_FIXED_ARRAY,
  /*    441 */ 0,	/* properties */
  /*    442 */ 0xff,0xff,	/* filler */
  /*    444 */ 0xc7,0x01,0x00,0x00,	/* long 455 full array index */
  /*    448 */ 0xc7,0x01,0x00,0x00,	/* long 455 flat array index */
  /*    452 */ IDL_DT_END_NESTED_STRUCT,
  /*    453 */ IDL_DT_END_NESTED_STRUCT,
  /*    454 */ IDL_DT_EOL,
  		/* array anon_array full instance */
  /*    455 */ 1,	/* num dimensions */
  /*    456 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    460 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    464 */ IDL_DT_BYTE,
  		/* array anon_array full instance */
  /*    465 */ 0xff,0xff,	/* filler */
  /*    467 */ 1,	/* num dimensions */
  /*    468 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    472 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    476 */ IDL_DT_BYTE,
  		/* array anon_array full instance */
  /*    477 */ 0xff,0xff,	/* filler */
  /*    479 */ 1,	/* num dimensions */
  /*    480 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    484 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    488 */ IDL_DT_BYTE,
  		/* struct CUSOBJREF definition */
  /*    489 */ 0xff,0xff,0xff,	/* filler */
  /*    492 */ 0x2b,0x00,0x00,0x00,	/* long 43 offset vector index */
  /*    496 */ IDL_DT_NDR_ALIGN_4,
  /*    497 */ IDL_DT_NDR_ALIGN_4,
  /*    498 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    499 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    500 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    501 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    502 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    503 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    504 */ IDL_DT_FIXED_ARRAY,
  /*    505 */ 0,	/* properties */
  /*    506 */ 0xff,0xff,	/* filler */
  /*    508 */ 0x2f,0x02,0x00,0x00,	/* long 559 full array index */
  /*    512 */ 0x2f,0x02,0x00,0x00,	/* long 559 flat array index */
  /*    516 */ IDL_DT_END_NESTED_STRUCT,
  /*    517 */ IDL_DT_ULONG,	/* size */
  /*    518 */ IDL_DT_UNIQUE_PTR,
  /*    519 */ 0|IDL_PROP_DEP_INT,	/* properties */
  /*    520 */ 0x0d,0x02,0x00,0x00,	/* long 525 pointee index */
  /*    524 */ IDL_DT_EOL,
  /*    525 */ IDL_DT_CONF_ARRAY,
  /*    526 */ 0,	/* properties */
  /*    527 */ 0xff,	/* filler */
  /*    528 */ 0x1b,0x02,0x00,0x00,	/* long 539 full array index */
  /*    532 */ 0x1b,0x02,0x00,0x00,	/* long 539 flat array index */
  		/* array anon_array full instance */
  /*    536 */ 0xff,0xff,0xff,	/* filler */
  /*    539 */ 1,	/* num dimensions */
  /*    540 */ IDL_BOUND_FIXED,
  /*    541 */ 0xff,0xff,0xff,	/* filler */
  /*    544 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    548 */ IDL_BOUND_SIZE_IS,
  /*    549 */ IDL_DT_ULONG,	/* bound type */
  /*    550 */ 0xff,0xff,	/* filler */
  /*    552 */ 0x07,0x00,0x00,0x00,	/* long 7 field number of size_is 
reference */
  /*    556 */ IDL_DT_BYTE,
  		/* array anon_array full instance */
  /*    557 */ 0xff,0xff,	/* filler */
  /*    559 */ 1,	/* num dimensions */
  /*    560 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    564 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    568 */ IDL_DT_BYTE,
  		/* struct STDOBJREF definition */
  /*    569 */ 0xff,0xff,0xff,	/* filler */
  /*    572 */ 0x34,0x00,0x00,0x00,	/* long 52 offset vector index */
  /*    576 */ IDL_DT_NDR_ALIGN_4,
  /*    577 */ IDL_DT_USHORT,	/* PINGPERIOD period */
  /*    578 */ IDL_DT_USHORT,	/* PRINCID princid */
  /*    579 */ IDL_DT_NDR_ALIGN_4,
  /*    580 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    581 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    582 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    583 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    584 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    585 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    586 */ IDL_DT_FIXED_ARRAY,
  /*    587 */ 0,	/* properties */
  /*    588 */ 0x77,0x02,0x00,0x00,	/* long 631 full array index */
  /*    592 */ 0x77,0x02,0x00,0x00,	/* long 631 flat array index */
  /*    596 */ IDL_DT_END_NESTED_STRUCT,
  /*    597 */ IDL_DT_NDR_ALIGN_4,
  /*    598 */ IDL_DT_BEGIN_NESTED_STRUCT,
  /*    599 */ IDL_DT_ULONG,	/* unsigned32 time_low */
  /*    600 */ IDL_DT_USHORT,	/* unsigned16 time_mid */
  /*    601 */ IDL_DT_USHORT,	/* unsigned16 time_hi_and_version */
  /*    602 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_hi_and_reserved */
  /*    603 */ IDL_DT_USMALL,	/* unsigned8 clock_seq_low */
  /*    604 */ IDL_DT_FIXED_ARRAY,
  /*    605 */ 0,	/* properties */
  /*    606 */ 0xff,0xff,	/* filler */
  /*    608 */ 0x6b,0x02,0x00,0x00,	/* long 619 full array index */
  /*    612 */ 0x6b,0x02,0x00,0x00,	/* long 619 flat array index */
  /*    616 */ IDL_DT_END_NESTED_STRUCT,
  /*    617 */ IDL_DT_EOL,
  		/* array anon_array full instance */
  /*    618 */ 0xff,	/* filler */
  /*    619 */ 1,	/* num dimensions */
  /*    620 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    624 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    628 */ IDL_DT_BYTE,
  		/* array anon_array full instance */
  /*    629 */ 0xff,0xff,	/* filler */
  /*    631 */ 1,	/* num dimensions */
  /*    632 */ 0x00,0x00,0x00,0x00,	/* long 0 fixed bound */
  /*    636 */ 0x05,0x00,0x00,0x00,	/* long 5 fixed bound */
  /*    640 */ IDL_DT_BYTE,
  /*    641 */ 0xff,0xff,0xff,	/* filler */
  /*    644 */ 0x10,0x00,0x00,0x00,	/* bug flags */
  /*    648 */ 0xbd,0x02,0x00,0x00,	/* type vector size = 701 */
  /*    652 */ 0x44,0x00,0x00,0x00,	/* offset vector size = 68 */
  /*    656 */ 0x02,0x00,0x00,0x00,	/* routine vector size = 2 */
  /*    660 */ 0x08,0x00,0x00,0x00,	/* number of offset types = 8 */
  /*    664 */ 0x9c,0x02,0x00,0x00,	/* index of offset types = 668 */
  /*    668 */ 0x5c,0x00,0x00,0x00,	/*     92 */
  /*    672 */ 0x6f,0x00,0x00,0x00,	/*    111 */
  /*    676 */ 0xd0,0x00,0x00,0x00,	/*    208 */
  /*    680 */ 0x21,0x01,0x00,0x00,	/*    289 */
  /*    684 */ 0xc0,0x00,0x00,0x00,	/*    192 */
  /*    688 */ 0xb0,0x00,0x00,0x00,	/*    176 */
  /*    692 */ 0xa0,0x00,0x00,0x00,	/*    160 */
  /*    696 */ 0x90,0x00,0x00,0x00,	/*    144 */
  0		/* sentinel */
};

const idl_ulong_int INTERFACE_XMIT_INDEX = 104;

#endif

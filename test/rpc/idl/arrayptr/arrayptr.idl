/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: arrayptr.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:09:15  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:51:27  marty]
 *
 * Revision 1.1.4.1  1995/12/11  19:56:21  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:28:17  root]
 * 
 * Revision 1.1.2.2  1993/01/07  19:04:30  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  13:26:12  bbelch]
 * 
 * Revision 1.1  1992/01/19  03:23:13  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
[uuid(41021c97-ffc4-11c8-8ae4-08002b104860), version(0)]

interface arrayptr
{
   const long MAXSIZE = 1000;

   boolean arrayified_ref_iptr 
    (
        [in] handle_t h, 
        [in, size_is(s)] short *pa,
        [in] short s,
        [in] long checksum
    );

   void arrayified_ref_optr 
    (
        [in] handle_t h, 
        [out, size_is(s)] short *pa,
        [in] short s,
        [out] long *checksum
    );

   boolean arrayified_ref_ioptr 
    (
        [in] handle_t h, 
        [in, out, size_is(s)] short *pa,
        [in] short s,
        [in, out] long *checksum
    );

    boolean arrayified_null_iptr 
    (
        [in] handle_t h, 
        [in, ptr, size_is(s)] short *pa,
        [in] short s,
        [in] long checksum
    );

    boolean arrayified_non_null_iptr 
    (
        [in] handle_t h, 
        [in, ptr, size_is(s)] short *pa,
        [in] short s,
        [in] long checksum
    );

    boolean arrayified_null_ioptr 
    (
        [in] handle_t h, 
        [in, out, ptr, size_is(s)] short *pa,
        [in] short s,
        [in, out] long *checksum
    );

    boolean arrayified_non_null_ioptr 
    (
        [in] handle_t h, 
        [in, out, ptr, size_is(s)] short *pa,
        [in] short s,
        [in, out] long *checksum
    );

   boolean varrayified_ref_iptr 
    (
        [in] handle_t h, 
        [in, length_is(l), size_is(s)] short *pa,
        [in] short l,
        [in] short s,
        [in] long checksum
    );

   void varrayified_ref_optr 
    (
        [in] handle_t h, 
        [out, length_is(*l), size_is(s)] short *pa,
        [out] short *l,
        [in] short s,
        [out] long *checksum
    );

   boolean varrayified_ref_ioptr 
    (
        [in] handle_t h, 
        [in, out, length_is(*l), size_is(s)] short *pa,
        [in, out] short *l,
        [in] short s,
        [in, out] long *checksum
    );

    boolean varrayified_null_iptr 
    (
        [in] handle_t h, 
        [in, ptr, length_is(l), size_is(s)] short *pa,
        [in] short l,
        [in] short s,
        [in] long checksum
    );

    boolean varrayified_non_null_iptr 
    (
        [in] handle_t h, 
        [in, ptr, length_is(l), size_is(s)] short *pa,
        [in] short l,
        [in] short s,
        [in] long checksum
    );

    boolean varrayified_null_ioptr 
    (
        [in] handle_t h, 
        [in, out, ptr, length_is(*l), size_is(s)] short *pa,
        [in, out] short *l,
        [in] short s,
        [in, out] long *checksum
    );

    boolean varrayified_non_null_ioptr 
    (
        [in] handle_t h, 
        [in, out, ptr, length_is(*l), size_is(s)] short *pa,
        [in, out] short *l,
        [in] short s,
        [in, out] long *checksum
    );
}

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: quota.test,v $
# Revision 1.1.11.1  1996/10/02  17:45:09  damon
# 	Newest DFS from Transarc
# 	[1996/10/01  18:36:26  damon]
#
# Revision 1.1.6.1  1994/06/09  14:06:13  annie
# 	fixed copyright in src/file
# 	[1994/06/09  13:21:43  annie]
# 
# Revision 1.1.4.2  1993/01/21  18:28:17  zeliff
# 	Embedding copyright notices
# 	[1993/01/19  16:52:13  zeliff]
# 
# Revision 1.1.2.2  1992/05/13  22:02:14  jdp
# 	Transarc delta: bwl-dir-create-2633 1.1
# 	  Files modified:
# 	    dir: dir_buffer.c, dir_buffer.h, dir_main.c, dir_salvage.c
# 	    dir: dtest.c, test_dir.c; salvage: walk.c
# 	    vnops: efs_dir.c, efs_vnodeops.c, quota.test
# 	  Selected comments:
# 	    Fix bugs in error recovery during directory insertion (create, mkdir, etc.);
# 	    as a by-product, reorganized directory insertion so that for multi-page
# 	    directories, only one search through the directory's pages is done.
# 	    Test the fix for bug 2633 (recovery from quota failure during directory growth)
# 	[1992/05/13  21:39:09  jdp]
# 
# $EndLog$
quota 1

# quota tests
#
# This tests what happens when we get a quota failure while growing a
# directory.  The operation (link) should fail cleanly.
#
# We are depending on EDQUOT being 88.  Need to do something about this!
# Also, it would be nice if we didn't have to figure out where to put the
# check_code 88, but could just keep on doing links until one of them failed.

open_device 1 4096 1024 1000
create_aggregate

exist_vol yyy 777,,888 6

mount_vol 777,,888

echo exceed quota

root_vnode
vfs_stat
vn_mkdir foo1
check_code 0
stack_vnode
vn_create foo2
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo3
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo4
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo5
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo6
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo7
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo8
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo9
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo10
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo11
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo12
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo13
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo14
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo15
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo16
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo17
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo18
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo19
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo20
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo21
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo22
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo23
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo24
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo25
check_code 0
unstack_vnode
stack_vnode
vn_link foo2 foo26
check_code 88

echo did we survive?

root_vnode
unstack_vnode
ls

release_vnode
unmount_vfs

check_device
end

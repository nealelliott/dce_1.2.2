/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*           
 * HISTORY
 * $Log: rs_prop_acct.idl,v $
 * Revision 1.1.6.2  1996/03/09  23:28:32  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:44:00  marty]
 *
 * Revision 1.1.6.1  1995/12/08  17:34:51  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  16:55:31  root]
 * 
 * Revision 1.1.4.2  1993/08/04  13:37:33  cuti
 * 	Insert dce/ in front of imported file name
 * 	[1993/08/03  20:51:22  cuti]
 * 
 * Revision 1.1.2.4  1993/03/19  22:19:59  emartin
 * 	CR 7472 rs_prop_acct_replace takes unix_passwd arg.
 * 	[1993/03/19  00:06:41  emartin]
 * 
 * Revision 1.1.2.3  1992/12/29  13:31:08  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/28  20:48:52  zeliff]
 * 
 * Revision 1.1.2.2  1992/08/31  18:21:03  sekhar
 * 	First replication code drop.
 * 	[1992/08/31  17:48:57  sekhar]
 * 
 * $EndLog$
 */

/*
 * Copyright (c) Hewlett-Packard Company 1992
 * Unpublished work. All Rights Reserved.
 *
 *  NAME:
 *
 *      rs_prop_acct.idl
 *
 *  FACILITY:
 *
 *      Security 
 *
 *  ABSTRACT:
 *
 *      Registry server propagation interface - accounts
 */

[
    uuid(68097130-de43-11ca-a554-08001e0394c7),
    version(1),
    pointer_default(ptr)
]

interface rs_prop_acct
{

    import 
        "dce/rgynbase.idl",
        "dce/rsbase.idl",
        "dce/rplbase.idl";

   /* 
    * Data type used for bulk account add propagations during 
    * replica initialization.  The security server stores only
    * the "current" key version for most principals.  If the 
    * principal has multiple key versions, the additional versions
    * must be propagated using rs_prop_acct_add_key_version.  Only
    * curent keys may be propagated in via rs_prop_acct_add.
    *
    * During  initialization, "client" is filled with nil uuids to
    * indicate that keys are encrypted under a session key.  For
    * incremental add propagations, "client" identifies the principal
    * under whose key the account's key is encrypted. 
    *
    * The "unix_passwd" field, if not NULL, contains the pickled and 
    * encrypted unix passwd (generated by the unix crypt() function). 
    * The "plain" arm of the decrypted and unpickled sec_passwd_rec_t
    * contims the unix passwd.
    */
    typedef struct {
        sec_rgy_login_name_t         login_name;
        sec_rgy_acct_user_t           user_part;
        sec_rgy_acct_admin_t          admin_part;
        rs_acct_key_transmit_t        * key;  
        [ptr] rs_acct_key_transmit_t  * unix_passwd;  /* may be NULL */
        sec_rgy_foreign_id_t          client;   /* client that originated the update */
        sec_passwd_type_t             keytype;  /* currently only DES is valid */  
    } rs_prop_acct_add_data_t;
        

    /* 
     * Data type for bulking up multiple key propagations in 
     * rs_prop_acct_key_add_version below
     */
    typedef  struct {
        rs_acct_key_transmit_t  *key;
        boolean32               current;
        sec_timeval_sec_t       garbage_collect;
    } rs_prop_acct_key_data_t;

    /*
     * rs_prop_acct_add 
     */
    void  rs_prop_acct_add (
        [in]       handle_t                  h,
        [in]       unsigned32                num_accts,
        [in, ref, size_is(num_accts)]
                   rs_prop_acct_add_data_t   accts[],
        [in, ref]  rs_replica_master_info_t  * master_info,
        [in]       boolean32                 propq_only,
        [out]      error_status_t            * status
    );

    /*
     * rs_prop_acct_delete
     */
    void rs_prop_acct_delete (
        [in]       handle_t                  h,
        [in]       sec_rgy_login_name_t      * login_name,
        [in, ref]  rs_replica_master_info_t  * master_info,
        [in]       boolean32                 propq_only,
        [out]      error_status_t            * status
    );  


    /*
     * rs_prop_acct_rename
     */
    void rs_prop_acct_rename (
        [in]       handle_t                  h,
        [in]       sec_rgy_login_name_t      * old_login_name,
        [in]       sec_rgy_login_name_t      * new_login_name,
        [in, ref]  rs_replica_master_info_t  * master_info,
        [in]       boolean32                 propq_only,
        [out]      error_status_t            * status
    );

    /* rs_prop_acct_replace 
     *  
     * "client" identifies (by uuid) the principal under whose key the
     * updated "key" and "unix_passwd" are encrypted.  If "client_ids" 
     * contains NIL uuids, "key" and "unix_passwd" are encrypted under 
     * a session key.
     * "time_now" is used for garbage collecting expired versions of 
     * multi-version keys.
     */
    void rs_prop_acct_replace (
        [in]       handle_t                  h,
        [in]       sec_rgy_login_name_t      * login_name,
        [in]       rs_acct_parts_t           modify_parts,
        [in]       sec_rgy_acct_user_t       * user_part,
        [in]       sec_rgy_acct_admin_t      * admin_part,
        [in, ptr]  rs_acct_key_transmit_t    * key,          /* may be NULL */
        [in, ref]  sec_rgy_foreign_id_t      *client,
        [in]       sec_passwd_type_t         new_keytype,    /* only DES supported */
        [in, ptr]  rs_acct_key_transmit_t    * unix_passwd,  /* may be NULL */
        [in, ref]  sec_timeval_sec_t         * time_now,
        [in, ref]  rs_replica_master_info_t  * master_info,
        [in]       boolean32                 propq_only,
        [out]      error_status_t            * status
    ); 


    /* rs_prop_acct_add_key_version
     *
     * Add specific versions of an account key.  If current is true
     * the key is added as the current version and "garbage_collect"
     * is ignored (current keys are never garbage collected).  If
     * current is false, the key is stored as a back-version of the 
     * account's key using "garbage_collect."  This routine is used 
     * only during initialization to propagate all extant key types 
     * and versions from a surrogate master to an initializing slave.  
     * 
     * ERRORS:
     *    sec_rgy_key_bad_version  - key version already exists or there is already
     *                                  a current version of this type key
     *    sec_rgy_key_bad_type     - key type not supported at this server.
     *    sec_rgy_object_not_found - account does not exist
     *
     */
    void rs_prop_acct_add_key_version (
        [in]       handle_t                  h,
        [in]       sec_rgy_login_name_t      * login_name,
        [in]       unsigned32                num_keys,
        [in, ref, size_is(num_keys)]
                   rs_prop_acct_key_data_t   keys[],
        [in]       rs_replica_master_info_t  * master_info,
        [out]      error_status_t            * status
    );                                                         
}

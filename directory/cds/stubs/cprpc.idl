/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: cprpc.idl,v $
 * Revision 1.1.6.2  1996/03/09  23:12:15  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:29:27  marty]
 *
 * Revision 1.1.6.1  1995/12/08  15:35:15  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  14:50:59  root]
 * 
 * Revision 1.1.4.1  1994/04/07  10:22:28  kevins
 * 	CR 10304 Export some header files for cross component dependency issues
 * 	[1994/04/07  10:18:14  kevins]
 * 
 * Revision 1.1.2.4  1993/01/20  20:52:39  jd
 * 	Backed out the fix for #6673. It broke the nightly build on the RIOS.
 * 	[1993/01/20  20:48:06  jd]
 * 
 * Revision 1.1.2.2  1992/12/30  14:26:29  zeliff
 * 	Embedding copyright notices
 * 	[1992/12/29  23:34:42  zeliff]
 * 
 * Revision 1.1  1992/01/19  15:24:40  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
/*
** Module: cprpc.idl
**
** COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1991. ALL RIGHTS RESERVED.
**
** THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
** ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
** INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
** COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
** OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
** TRANSFERRED.
**
** THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
** AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
** CORPORATION.
**
** DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
** SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
**
**
** ABSTRACT:
**
** Interface Definition Language file for DNS Control Program
**
** This file contains some basic typedef's and definitions used throughout
** the RPC related modules of the DNS Control Program.  Definitions found
** here are required by other IDL files.  This module does not declare any
** interfaces that generate code (stubs).
**
**
** MODIFICATION HISTORY:
**
** 05-apr-1991 mbs original version
** 12-apr-1991 mbs changes for SERVER CREATE CLEARINGHOUSE
** 16-apr-1991 mbs changing definition of clh_info_t
** 08-may-1991 mbs [ref] -> [ptr]
** 05-jun-1991 mbs fixes to timer handling
** 19-jul-1991 mbs add to clearinghouse information structure
** 23-aug-1991 mbs add nameserver structure
** 29-aug-1991 mbs work on nameserver structure
**
*/

[pointer_default(ptr)] interface cprpc
{
    import "dce/cds_types.idl";
    import "dce/cds_solicit.idl";

    /*
     * our basic command status type
     */
    typedef long int command_status_t, *command_status_p_t;

    /*
     * a 64-bit counter (used by the server)
     */
    typedef unsigned hyper int CP_counter64_t;
    typedef [ptr]CP_counter64_t *CP_counter64_p_t;

    /*
     * a 64-bit time
     */
    typedef unsigned hyper int CP_time_quad_t;
    typedef [ptr]CP_time_quad_t *CP_time_quad_p_t;

    /*
     * union discriminator values for all the attribute types that
     * we know about
     */
    const small CP_none = 0;
    const small CP_long = 1;
    const small CP_short = 2;
    const small CP_small = 3;
    const small CP_double = 4;
    const small CP_boolean  = 5;
    const small CP_uuid = 6;
    const small CP_Timestamp = 7;
    const small CP_Timeout = 8;
    const small CP_Version = 9;
    const small CP_char = 10;
    const small CP_AttributeName = 11;
    const small CP_ClassName = 12;
    const small CP_byte  = 13;
    const small CP_ReplicaPointer = 14;
    const small CP_GroupMember = 15;
    const small CP_ParentPointer = 16;
    const small CP_SimpName = 17;
    const small CP_FullName = 18;
    const small CP_CHDirectory = 19;
    const small CP_ASN1 = 20;
    const small CP_utctime = 21;
    const small CP_state = 22;
    const small CP_counter = 23;
    const small CP_counter64 = 24;
    const small CP_time_quad = 25;

    /*
     * a discriminated union of all the attribute types that we know
     * about
     */
    typedef union switch (ValueType_t av_valuetype) av_val {
	case CP_none:           ;
	case CP_long:           long int av_long;
	case CP_short:          short int av_short;
	case CP_small:          small int av_small;
   	case CP_double:         double av_double;
	case CP_boolean:        boolean av_boolean;
	case CP_uuid:           uuid_t av_uuid;
	case CP_Timestamp:      cds_Timestamp_t av_timestamp;
	case CP_Timeout:     	cds_Timeout_t av_timeout;
	case CP_Version:        cds_Version_t av_version;
	case CP_char:           [ptr]cds_OpenChar_t *av_char_p;
	case CP_AttributeName:
	case CP_ClassName:
	case CP_ASN1:
	case CP_byte:           [ptr]cds_OpenByte_t *av_byte_p;
	case CP_ReplicaPointer:	[ptr]cds_ReplicaPointer_t *av_rp_p;
	case CP_GroupMember:    [ptr]cds_GroupMember_t *av_gm_p;
	case CP_ParentPointer:  [ptr]cds_ParentPointer_t *av_pp_p;
	case CP_SimpName:       [ptr]cds_Name_t *av_simpname_p;
	case CP_FullName:       [ptr]cds_FullName_t *av_fullname_p;
	case CP_CHDirectory:    [ptr]cds_CHDirectory_t *av_cp_p;
	case CP_utctime:        byte av_utctime[16];
	case CP_state:		short int av_state;
	case CP_counter:	long int av_counter;
        case CP_counter64:      CP_counter64_t av_counter64;
        case CP_time_quad:      CP_time_quad_t av_time_quad;

    } attr_AtomicValue_t;

    /*
     * NOTE: Clerk/server state value is placed in av_state;
     *       Counters are placed in av_counter;
     */

    /*
     * An attribute
     */
    typedef struct {
        long    attr_id;	        /* attribute id code     */
        attr_AtomicValue_t value;	/* attribute value       */
    } cprpc_attr_t;
    typedef [ptr]cprpc_attr_t *cprpc_attr_p_t;

    /*
     * Attribute list
     */
    typedef struct {
        unsigned short attr_len;
        [size_is(attr_len)] cprpc_attr_t *attr_members[];
    } cprpc_attr_list_t;
    typedef [ptr]cprpc_attr_list_t *cprpc_attr_list_p_t;

    /*
     * Info about 1 clearinghouse
     */
    typedef struct {
        [ptr]cds_FullName_t       *clh_name_p;        /* clearinghouse name */
        [ptr]cds_ReplicaPointer_t *clh_replica_p;     /* clh replica pointer */
        [ptr]cds_FullName_t       *replica_name_p;    /* create clh only */
             unsigned small        replica_type;      /* create clh only */
        [ptr]cds_Version_t        *dir_version_p;     /* create clh only */
             short int             how_disable;       /* disable clh only */
        [ptr]cprpc_attr_list_t    *attr_list_p;       /* clh attribute list */
    } clh_info_t;
    typedef [ptr]clh_info_t *clh_info_p_t;

    /*
     * List of n-clearinghouses
     */
    typedef struct {
        unsigned short clh_count;    /* no. of clearinghouses */
        [size_is(clh_count)] clh_info_t *clh_members[];
    } clh_info_list_t;
    typedef [ptr]clh_info_list_t *clh_info_list_p_t;

    /*
     * Info about 1 nameserver
     */
    typedef struct {
        [ptr]cds_Name_t         *ns_tag_p;      /* nameserver 'tag' */
        [ptr]cprpc_attr_list_t  *attr_list_p;   /* ns attribute list */
    } ns_info_t;
    typedef [ptr]ns_info_t *ns_info_p_t;

    /*
     * List of n-nameservers
     */
    typedef struct {
        unsigned short ns_count;                /* no. of nameservers */
        [size_is(ns_count)] ns_info_t *ns_members[];
    } ns_info_list_t;
    typedef [ptr]ns_info_list_t *ns_info_list_p_t;
}

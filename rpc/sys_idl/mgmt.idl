/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: mgmt.idl,v $
 * Revision 1.1.8.1  1996/06/04  21:56:53  arvind
 * 	merge u2u addition of rpc__mgmt_inq_svr_name_tgt
 * 	[1996/05/06  20:09 UTC  burati  /main/DCE_1.2/1]
 *
 * 	merge u2u work
 * 	[1996/04/29  19:48 UTC  burati  /main/mb_u2u/1]
 *
 * 	u2u work off Mothra, before 1.2 branch is available
 * 	[1996/04/29  19:46 UTC  burati  /main/mb_mothra8/1]
 *
 * Revision 1.1.6.2  1996/03/09  23:26:40  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:42:12  marty]
 * 
 * Revision 1.1.6.1  1995/12/08  00:23:21  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  00:01:07  root]
 * 
 * Revision 1.1.4.1  1993/09/29  17:42:24  markar
 * 	     OT CR 7550 fix:  make mgmt inquiry interfaces idempotent
 * 	[1993/09/29  16:13:56  markar]
 * 
 * Revision 1.1.2.3  1993/01/03  23:56:33  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/03  20:15:15  bbelch]
 * 
 * Revision 1.1.2.2  1992/12/23  21:20:12  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/23  15:46:55  zeliff]
 * 
 * Revision 1.1  1992/01/19  03:13:36  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
**  Copyright (c) 1989 by
**      Hewlett-Packard Company, Palo Alto, Ca. & 
**      Digital Equipment Corporation, Maynard, Mass.
**
**
**  NAME:
**
**      mgmt.idl
**
**  FACILITY:
**
**      Remote Procedure Call (RPC) 
**
**  ABSTRACT:
**
**  Management Remote Interface (IDL)
**
**  This interface defines procedures that provide remote access to
**  management operations in the RPC runtime.
**  
**
*/

[uuid(afa8bd80-7d8a-11c9-bef4-08002b102989), version(1)]

interface mgmt
{
import "dce/rpctypes.idl";

/*
 * R P C _ _ M G M T _ I N Q _ I F _ I D S
 */

[idempotent]
void rpc__mgmt_inq_if_ids
(
    [in]        handle_t                binding_handle,
    [out]       rpc_if_id_vector_p_t    *if_id_vector,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I N Q _ S T A T S
 */

[idempotent]
void rpc__mgmt_inq_stats
(
    [in]        handle_t                binding_handle,
    [in, out]   unsigned32              *count,
    [out, size_is (*count)] unsigned32  statistics[*],
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I S _ S E R V E R _ L I S T E N I N G
 */

[idempotent]
boolean32 rpc__mgmt_is_server_listening
(
    [in]        handle_t                binding_handle,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ S T O P _ S E R V E R _ L I S T E N I N G
 */

void rpc__mgmt_stop_server_listening
(
    [in]        handle_t                binding_handle,
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I N Q _ P R I N C _ N A M E
 */

[idempotent]
void rpc__mgmt_inq_princ_name
(
    [in]        handle_t                binding_handle,
    [in]        unsigned32              authn_proto,
    [in]        unsigned32              princ_name_size,
    [out, string, size_is(princ_name_size)]       
                char                    princ_name[],
    [out]       error_status_t          *status
);


/*
 * R P C _ _ M G M T _ I N Q _ S V R _ N A M E _ T G T
 */

[idempotent]
void rpc__mgmt_inq_svr_name_tgt
(
    [in]        handle_t                binding_handle,
    [in]        unsigned32              authn_proto,
    [in]        unsigned32              princ_name_size,
    [in]        unsigned32              tkt_size_avail,
    [out, string, size_is(princ_name_size)]       
                char                    princ_name[],
    [out]       unsigned32              *tkt_length,
    [out, size_is(tkt_size_avail), length_is(*tkt_length)]
                char                    *data,
    [out]       error_status_t          *status
);

}

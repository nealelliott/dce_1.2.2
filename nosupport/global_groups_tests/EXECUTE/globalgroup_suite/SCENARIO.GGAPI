Details for manipulating foreign principals by API's testing

    Existing API's listed below are modified to handle foreign
    principal as `person_name` as well as local principal.
    - sec_rgy_pgo_add_member()
    - sec_rgy_pgo_delete_member()
    - sec_rgy_pgo_is_member()
    - sec_rgy_pgo_get_members()

    We will plan to do the testing bellow (see ATTACH 1), and these tests will
    be written as scripts for automatic testing.


------------------------------ ATTACH 1 ------------------------------

GLOBALGROUP TEST SCENARIO (API testing)

1. Prerequisites

    We need two DCE cells in this test.

	cL	local cell (cell on the local host)
	cR	remote cell (cell on the remote host)

2. Test Scenario
2.1 Setting up test condition

    Create a group and an account into the local cell like bellow;

	dcecp> group create gG
	dcecp> principal create pL
	dcecp> account create pL -group none -organization none

	- gG means a group object which will include local/foreign principals
	- pL means a principal object which belongs to the local cell

    Create a group and some accounts into the remote cell like bellow;

	dcecp> group create gR
	dcecp> principal create pR
	dcecp> principal create pRl
	dcecp> principal create pRs
	dcecp> account create pR -group none -organization none
	dcecp> account create pRl -group none -organization none
	dcecp> account create pRs -group none -organization none

	- gR means a group object which belongs to the remote cell
	- pR means a principal object which belongs to the remote cell
	- pRl means a principal object which belongs to the remote cell, and
	  has a long enough principal name (maximal length of principal name)
	- pRs means a principal object which belongs to the remote cell, and
	  has a short enough principal name (minimal length of principal name)

    NOTICE:
	At this time, these cells don't know each other; cannot see in the
	name space.
	Exporting/importing the name space, or authorizing each other will be
	executed in the test scripts.

2.2 Details for testing

    For this test scenario, I will reuse the some basic ideas from 'all_pgo'
testing, especially 'pgo_member' testing, in the security tests in DCE R1.1
release; these tests are located in 'test/security/api' directory.

    The following shows how and what we verify in our globalgroup testing.

	- The first column in the following means a operation in the scenario;
	  add_member, delete_member, get_member and is_member are the test
	  program which execute sec_rgy_pgo_xxx() function to be verified.

	- The second column, S or F listed, means a return code from the
	  function to be verified; S requires to succeed and F requires to fail.

	- The third column shows what we should verify in the operation.
	  In the failure case testing, it is associated with status code in
	  each API's.

(1) Login to local cell and verify the initial condition

	dce_login cell_admin	S	login to cell /.../cL
	is_member(gG, pL)	S	not a member
	get_member(gG)		F	no more entries

(2) Verify adding/deleting local principal

	add_member(gG, pL)	S	add principal as a member
	is_member(gG, pL)	S	is a member
	get_member(gG)		S	principal exist as a member
	add_member(gG, pL)	S	(principal ALREADY exist as a member)
	is_member(gG, pL)	S	is a member
	get_member(gG)		S	principal exist as a member
	delete_member(gG, pL)	S	delete from membership list
	is_member(gG, pL)	S	not a member
	get_member(gG)		F	no more entries
	delete_member(gG, pL)	S	(principal is NOT registered)
	is_member(gG, pL)	S	not a member
	get_member(gG)		F	no more entries

(3) Verify adding/deleting local principal (with fully qualified name format)

	add_member(gG, /.../cL/pL)	S	add principal as a member
	is_member(gG, /.../cL/pL)	S	is a member
	get_member(gG)			S	principal exist as a member
	add_member(gG, /.../cL/pL)	S	(principal ALREADY exist as a member)
	is_member(gG, /.../cL/pL)	S	is a member
	get_member(gG)			S	principal exist as a member
	delete_member(gG, /.../cL/pL)	S	delete from membership list
	is_member(gG, /.../cL/pL)	S	not a member
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cL/pL)	S	(principal is NOT registered)
	is_member(gG, /.../cL/pL)	S	not a member
	get_member(gG)			F	no more entries

(4) Verify adding/deleting remote principal in the UNKNOWN cell

    NOTICE:
	At this time, these cells don't know each other; cannot see in the
	name space.

	add_member(gG, /.../cR/pR)	F	object not found
	is_member(gG, /.../cR/pR)	S	not a member
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cR/pR)	S	(principal is NOT registered)
	is_member(gG, /.../cR/pR)	S	not a member
	get_member(gG)			F	no more entries

    - After these tests, enable to show each name space using
      "dcecp cdscache create".
      This operation is done automatically in the script.

(5) Verify adding/deleting remote principal in the UNTRUSTED cell

    NOTICE:
	At this time, these cells don't authorized each other.

	add_member(gG, /.../cR/pR)	F	not authorized
	is_member(gG, /.../cR/pR)	F	not authorized
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cR/pR)	F	not authorized
	is_member(gG, /.../cR/pR)	F	not authorized
	get_member(gG)			F	no more entries

    - After these tests, connect to remote cell using "dcecp registry connect".
      This operation is done automatically in the script.

(6) Verify adding/deleting UNKNOWN principal in the remote cell

	add_member(gG, /.../cR/pU)	F	object not found
	is_member(gG, /.../cR/pU)	S	not a member
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cR/pU)	S	(principal is NOT registered)
	is_member(gG, /.../cR/pU)	S	not a member
	get_member(gG)			F	no more entries

(7) Verify adding/deleting object which is NOT the principal in the remote cell

	add_member(gG, /.../cR/gR)	F	object not found
	is_member(gG, /.../cR/gR)	S	not a member
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cR/gR)	S	(principal is NOT registered)
	is_member(gG, /.../cR/gR)	S	not a member
	get_member(gG)			F	no more entries

(8) Verify adding/deleting remote principal

	add_member(gG, /.../cR/pR)	S	add principal as a member
	is_member(gG, /.../cR/pR)	S	is a member
	get_member(gG)			S	principal exist as a member
	add_member(gG, /.../cR/pR)	S	(principal ALREADY exist as a member)
	is_member(gG, /.../cR/pR)	S	is a member
	get_member(gG)			S	principal exist as a member
	get_member(/.../cR/pR)		S	globalgroup is in the list
	delete_member(gG, /.../cR/pR)	S	delete from membership list
	is_member(gG, /.../cR/pR)	S	not a member
	get_member(gG)			F	no more entries
	delete_member(gG, /.../cR/pR)	S	(principal is NOT registered)
	is_member(gG, /.../cR/pR)	S	not a member
	get_member(gG)			F	no more entries

(9) Variety of remote principal name

	add_member(gG, /.../cR/pRs)	S	add principal as a member
	is_member(gG, /.../cR/pRs)	S	is a member
	get_member(gG)			S	principal exist as a member
	get_member(/.../cR/pRs)		S	globalgroup is in the list
	delete_member(gG, /.../cR/pRs)	S	delete from membership list
	add_member(gG, /.../cR/pRl)	S	add principal as a member
	is_member(gG, /.../cR/pRl)	S	is a member
	get_member(gG)			S	principal exist as a member
	get_member(/.../cR/pRl)		S	globalgroup is in the list
	delete_member(gG, /.../cR/pRl)	S	delete from membership list

(10) Verify containing multiple members in the group membership list

	add_member(gG, /.../cR/pRl)	S	add principal as a member
	add_member(gG, pL)		S	add principal as a member
	add_member(gG, /.../cR/pRs)	S	add principal as a member
	get_member(gG)			S	principal exist as a member
	delete_member(gG, /.../cR/pRl)	S	delete from membership list
	delete_member(gG, pL)		S	delete from membership list
	delete_member(gG, /.../cR/pRs)	S	delete from membership list
	get_member(gG)			F	no more entries

(11) Verify sub effects in the membership operation

	add_member(gG, pL)		S	add principal as a member
	add_member(gG, /.../cR/pR)	S	add principal as a member
	is_member(gG, /.../cR/pR)	S	is a member
	get_member(gG)			S	principal exist as a member
	get_member(pL)			S	globalgroup is in the list
	get_member(/.../cL/pL)		S	globalgroup is in the list
	get_member(/.../cR/pR)		S	globalgroup is in the list
	exit from /.../cL		S	logout from /.../cL

	dce_login /.../cR/cell_admin	S	login to cell /.../cR
	is_member(/.../cL/gG, pR)	S	is a member
	get_member(/.../cL/gG)		S	principal exist as a member
	get_member(pR)			S	globalgroup is in the list
	get_member(/.../cR/pR)		S	globalgroup is in the list
	get_member(/.../cL/pL)		S	globalgroup is in the list
	exit from /.../cR		S	logout from /.../cR

	dce_login cell_admin		S	login to cell /.../cL
	delete_member(gG, pL)		S	delete from membership list
	delete_member(gG, /.../cR/pR)	S	delete from membership list
	is_member(gG, /.../cR/pR)	S	not a member
	get_member(gG)			F	no more entries
	get_member(pL)			F	no more entries
	get_member(/.../cL/pL)		F	no more entries
	get_member(/.../cR/pR)		F	no more entries
	exit from /.../cL		S	logout from /.../cL

	dce_login /.../cR/cell_admin	S	login to cell /.../cR
	is_member(/.../cL/gG, pR)	S	not a member
	get_member(/.../cL/gG)		F	no more entries
	get_member(pL)			F	no more entries
	get_member(/.../cR/pR)		F	no more entries
	get_member(/.../cL/pL)		F	no more entries
	exit from /.../cR		S	logout from /.../cR

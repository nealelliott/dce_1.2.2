/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: op_results.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:15:54  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:54:10  marty]
 *
 * Revision 1.1.4.1  1995/12/11  19:26:20  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:14:15  root]
 * 
 * Revision 1.1.2.2  1993/01/07  20:34:25  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  13:36:47  bbelch]
 * 
 * Revision 1.1  1992/01/19  03:25:36  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
/*	
** This interface tests all possible kinds of return results of operations
** (that I can think of anyway).  
*/
[uuid(6a054480-2ba9-11c9-80ef-08002b13d56d)] interface op_results
{
    typedef enum {RED, GREEN, BLUE} color_t;

    /* Constant values to be returned by the operations */
    const boolean boolean_return_val = TRUE; 
    const char char_return_val = 'N'; 
    const unsigned small byte_return_val = 0xC1;
    const long float_return_val = 177;
    const long double_return_val = 399;
    const small small_return_val = 127;
    const short short_return_val = 32767;
    const long long_return_val = 0XFFFFFFFF;
    const unsigned long hyper_low_return_val = 0xFDFDFDFD;
    const unsigned long hyper_high_return_val = 0xABABABAB;
    const unsigned  small usmall_return_val = 0xFF;
    const unsigned  short ushort_return_val = 0xFFFF;
    const unsigned  long  ulong_return_val = 0xFFFFFFFF;
    const unsigned  long uhyper_low_return_val = 0xFDFDFDFD;
    const unsigned  long uhyper_high_return_val = 0xABCDABCD;
    const long enum_return_val = GREEN;


    /* context handle for use below */
    typedef [context_handle] void *context_handle_t;


    /* Various types to be returned as the function value */
    const   long    fixed_array_size = 3;
    typedef long    fixed_array_t[fixed_array_size];
    const   long    varying_array_size = 2;
    typedef long    varying_array_t[fixed_array_size];
    const   long    conformant_array_size = 8;
    typedef long    conformant_array_t[];
    typedef long    varying_conformant_array_t[];

    

    typedef struct {
	long	size;
	fixed_array_t	arr;
	} fixed_struct_t;

    typedef struct {
	long	size;
	[last_is(size)] varying_array_t	arr;
	} varying_struct_t;

    typedef struct {
	long	size;
	[max_is(size)] conformant_array_t	arr;
	} conf_struct_t;

    typedef struct {
	long	size;
	long	used;
	[max_is(size),last_is(used)] varying_conformant_array_t	arr;
	} var_conf_struct_t;


    /* operations returning the various base types */
    error_status_t              comm_status_t_op();
    context_handle_t            context_handle_op();
    boolean                     boolean_op();
    char                        char_op();
    byte                        byte_op();           
    float                       float_op();          
    double                      double_op();                   
    small                       small_op();                    
    short                       short_op();                    
    long                        long_op(    /* verifies context_handle_op */
                                    [in] context_handle_t ch);
    hyper                       hyper_op();                    
    unsigned small              usmall_op();           
    unsigned short              ushort_op();           
    unsigned long               ulong_op();            
    unsigned hyper              uhyper_op();           
    color_t                     enum_op();


    /* operations returning pointers to the various base types */
    boolean                   * p_boolean_op();
    char                      * p_char_op();
    byte                      * p_byte_op();           
    float                     * p_float_op();          
    double                    * p_double_op();                   
    small                     * p_small_op();                    
    short                     * p_short_op();                    
    long                      * p_long_op();                     
    hyper                     * p_hyper_op();                    
    unsigned small            * p_usmall_op();           
    unsigned short            * p_ushort_op();           
    unsigned long             * p_ulong_op();            
    unsigned hyper            * p_uhyper_op();           
    color_t                   * p_enum_op();


    /* operations returning complicated results */
    fixed_array_t *fixed_array_t_op();

    fixed_struct_t *fixed_struct_t_op();
    varying_struct_t *varying_struct_t_op();
    conf_struct_t *conformant_struct_t_op();
    var_conf_struct_t *varying_conformant_struct_t_op();
}

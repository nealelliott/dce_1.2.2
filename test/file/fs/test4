#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test4,v $
# Revision 1.1.10.1  1996/10/17  18:20:18  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:50:46  damon]
#
# Revision 1.1.4.4  1993/01/11  18:27:00  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:00:53  htf]
# 
# Revision 1.1.4.3  1992/10/28  16:22:28  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    No changes made.
# 	Transarc delta: jess-add-dumpkernel-in-fs-tests 1.3
# 	  Selected comments:
# 	    The icldump command and debug option for the tests have been added in the
# 	    fs test scripts. You can run fs/tests with -debug to dump kernel in case
# 	    of error. The delta also adds the icl_DumpKernel function in the C programm.
# 	    See above.
# 	    Put the debug option in test1.
# 	    When the debug is set the dumpfile is always created eventhough
# 	    there is no error.
# 	Transarc delta: jess-fs-path-for-icldump 1.1
# 	  Selected comments:
# 	    This delta adds the path for icldump command. The command has been
# 	    installed at "util" dir in test tree by Fred's delta.
# 	    See above.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/27  18:25:43  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:12:47  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Really no change
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    See above.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    Added error test err2 to the Makefile
# 	[1992/08/28  12:20:01  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  22:58:58  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/29  12:12:20  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:40:54  jaffe
# 	Transarc delta: fred-2980-and-2981-fix-sys 1.1
# 	  Selected comments:
# 	    To fix reported defects indicating files could not be found.  Added two
# 	    shell scripts, one to issue the correct command to get the system type
# 	    (either AFS or DFS), and a second to generate a file from a string.
# 	    Change variable sys to dfs_fsSysName and use fsSetSysName shell script.
# 	Transarc delta: fred-fs-fix-test4-5 1.1
# 	  Selected comments:
# 	    Fixed bugs in test4 and test5.
# 	    Was invoking an unknown shell script, fsSetSysVar, and now invokes
# 	    fsSetSysName.
# 	Transarc delta: fred-merge-tests 1.1
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test4,v $
# 	Revision 4.25  1994/11/01  22:23:22  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.24 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  19:15:44  jaffe]
# 
# $EndLog$
#
###############################################################################
#    Copyright (C) 1990, 1992 Transarc Corporation - All rights reserved      #
###############################################################################

# This script cats 16 1K files to produce a 16K file, then cats that file
# 16 times to produce a 256K file. It can be run multiple times by multiple
# processes.

# Usage: test4 [-np #-procs] [-nt #-times]

# Note:  default is test4 -np 1 -nt 1

# Disk usage is 1K for the startup file, plus 272K per process.

# Highest error number is: 1.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName creates 16K and 256K files"
    echo "Usage: $programName [-np #-procs] [-nt #-times]"
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}

if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/fs
fi

. $UTIL_DIR/fs_FunctionsScript
. $UTIL_DIR/fs_SetSysVar
createFileCmd="$UTIL_DIR/fs_GenerateFile"

trap '
    cd $currentDir
    rm -f onek $programName.[1256]*k.[1-9]* $programName.*.err
    echo "$programName killed returning $scriptErrorExit" | tee -a $logFile
    exit $scriptErrorExit
     ' 2 3 15

#
# Initialise setup variables
#

fs_InitSetup fs

#
# Default option argument values
#

processCount=1
iterationCount=1

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage
                    exit $successExit
                    ;;

        np|-np)     CheckOptionValue "np" $testSuiteType $programName $*
                    processCount=$2
                    shift
                    shift
                    ;;

        nt|-nt)     CheckOptionValue "nt" $testSuiteType $programName $*
                    iterationCount=$2
                    shift
                    shift
                    ;;
        debug|-debug)
                    dumpkernel="true"
                    shift
                    ;;
        *)          echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile
                    exit $scriptErrExit
                    ;;
    esac
done

#
# Validate arguments
#

if [ $processCount -lt 1 ]
then 
    echo "$programName: number of processes must be >= 1" | tee -a $logFile
    exit $scriptErrorExit
elif [ $iterationCount -lt 0 ]
then 
    echo "$programName: number of times must be >= 0" | tee -a $logFile
    exit $scriptErrorExit
fi

#
# Start test
#

(
    echo "$programName (16/256 k) starting in $currentDir"
    echo "Host `hostname` ($fs_sysName)"
    date
) | tee -a $logFile
echo "$processCount processes, $iterationCount times" | tee -a $logFile

fs_DetermineFSType

echo "" | tee -a $logFile

cat > onek << ==END==
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
123456789012345678901234567890123456789012345678901234567890123
==END==

processNum=1
while [ $processNum -le $processCount ]
do
    echo "$programName process number $processNum starting" | tee -a $logFile
    (
        i=1
        while [ $i -le $iterationCount -o $iterationCount -eq 0 ]
        do
            echo "$programName process number $processNum iteration $i" | tee -a $logFile
            rm -f $programName.16k.$processNum $programName.256k.$processNum

            cat onek onek onek onek onek onek onek onek onek onek onek onek onek onek onek onek > $programName.16k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum
            cat $programName.16k.$processNum >> $programName.256k.$processNum

            checkString="123456789012345678901234567890123456789012345678901234567890123"
            count1=`egrep "^$checkString$" $programName.16k.$processNum $programName.256k.$processNum | wc -l`
            count2=`cat $programName.16k.$processNum $programName.256k.$processNum | wc -l`
            if [ $count1 -ne 4352 -o  $count2 -ne 4352 ]
            then 
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                touch $programName.$processNum.err
            fi
        
            rm -f $programName.16k.$processNum $programName.256k.$processNum
            i=`expr $i + 1`
        done
        echo "$programName process $processNum done" | tee -a $logFile
    ) &
    processNum=`expr $processNum + 1`
done

wait

###############################################################################

echo "" | tee -a $logFile

processNum=1
while [ $processNum -le $processCount ]
do
    if [ -f $programName.$processNum.err ]
    then
        echo "$programName process $processNum failed (E1)" | tee -a $logFile
        errorCount=`expr $errorCount + 1`
    else 
        echo "$programName process $processNum results OK" | tee -a $logFile
    fi
    processNum=`expr $processNum + 1`
done

###############################################################################

rm -f onek $programName.[1256]*k.[1-9]* $programName.*.err

(
    echo ""
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"
    date
) | tee -a $logFile

exit $errorCount

###############################################################################

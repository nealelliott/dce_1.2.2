/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: arrayswith.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:09:34  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:51:34  marty]
 *
 * Revision 1.1.4.1  1995/12/11  19:56:58  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:28:31  root]
 * 
 * Revision 1.1.2.2  1993/01/07  19:06:03  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  13:26:55  bbelch]
 * 
 * Revision 1.1  1992/01/19  03:23:25  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
[uuid (52817c7c-ffc4-11c8-8ae4-08002b104860),
pointer_default(ptr)] interface arrayswith
{
    void op_hyper (
        [in] handle_t h,
        [in,out] hyper *y_h[3][3]
    );

    void op_long (
        [in] handle_t h,
        [in,out] long *f_l,
        [in,out] long *l_l,
        [in,out,first_is(*f_l),last_is(*l_l)] long *y_l[10]
    );

    void op_short (
        [in] handle_t h,
        [in] long s_o,
        [in,out,size_is(s_o)] short *y_o[]
    );

    void op_small (
        [in] handle_t h,
        [in] long s_a,
        [in,out] long *f_a,
        [in,out] long *l_a,
        [in,out,size_is(s_a),first_is(*f_a),last_is(*l_a)] small *y_a[]
    );

    typedef struct unsigned_p_t {
        unsigned small *p_a;
        unsigned short *p_o;
        unsigned long  *p_l;
        unsigned hyper *p_h;
    } unsigned_p_t;

    void op_unsigned (
        [in] handle_t h,
        [in] long s_u,
        [in,out,size_is(s_u)] unsigned_p_t y_u[][2]
    );

    typedef struct compact_p_t {
        boolean *p_bool[2];
        byte *p_byte[3];
        char *p_char[5];
    } compact_p_t;

    void op_compact (
        [in] handle_t h,
        [in,out] compact_p_t *p_compacts
    );

    typedef struct real_p_t {
        long f_f;
        long l_f;
        [first_is(f_f),last_is(l_f)]float *y_f[10];
        long s_d;
        long f_d;
        long l_d;
        [size_is(s_d),first_is(f_d),last_is(l_d)]double *y_d[];
    } real_p_t;

    void op_real (
        [in] handle_t h,
        [in,out,ptr] real_p_t *p_reals
    );

}

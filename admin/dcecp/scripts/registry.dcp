# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: registry.dcp,v $
# Revision 1.1.7.1  1996/08/09  11:52:31  arvind
# 	Merge changes.
# 	[1996/07/01  14:49 UTC  truitt  /main/DCE_1.2.2/truitt_dcecp_pk/1]
#
# 	Merge with latest HP changes and enhancements.
# 	[1996/03/13  15:24 UTC  truitt  /main/HPDCE02/2]
#
# 	Merge changes.
# 	[1996/03/13  15:24 UTC  truitt  /main/HPDCE02/truitt_dcecp_chf68/1]
#
# 	CHFts17673: Fix the verify operation so it is accurate in an active
# 	cell environment with multiple replicas.
#
# 	Initial DCE_1.2.2 branch.
# 	[1996/07/01  14:31 UTC  truitt  /main/DCE_1.2.2/1]
#
# Revision 1.1.5.2  1996/03/09  23:06:39  marty
# 	Update OSF copyright year
# 	[1996/03/09  22:25:29  marty]
# 
# Revision 1.1.5.1  1995/12/08  21:24:31  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/1  1995/03/21  19:19 UTC  truitt
# 	Merge registry command changes.
# 
# 	HP revision /main/truitt_dcecp_chfts20/1  1995/03/21  19:15 UTC  truitt
# 	CHFts14299: 'registry dump' and 'registry verify'
# 	now accept a command line argument, like the rest
# 	of the registry commands.
# 	[1995/12/08  17:57:59  root]
# 
# Revision 1.1.2.3  1994/08/24  15:04:48  salamone
# 	CR11838 - Add support for "registry set" command.
# 	[1994/08/23  21:27:26  salamone]
# 
# Revision 1.1.2.2  1994/07/20  19:28:19  salamone
# 	Add "registry verify" support.
# 	[1994/07/20  19:25:21  salamone]
# 
# Revision 1.1.2.1  1994/06/20  21:03:14  salamone
# 	Provide auto-loading procedure support.
# 	[1994/06/20  18:03:29  salamone]
# 
# $EndLog$


#
# PROCEDURE:
# _dcp_registry_dump
#
# OVERVIEW:
# Returns the replica information for each replica in the cell.
# It takes one argument and _s(sec) is set to the name of the 
# last replica displayed. Replicas are displayed with a blank 
# line between them.
#
# INPUTS:
# None
#
# INPUTS/OUTPUTS
# None
#
# OUTPUTS
# None
#
# RETURNS:
# Output from registry show -replica for each replica in the master
# replica list.
#
proc _dcp_registry_dump {rep_name} {
    #
    # Get the replica list as known by either some default replica
    # that security will pick for us, or from the specified replica.
    #
    if {$rep_name == "NULL"} {
        set j [catch {registry catalog} rlist]
    } else {
        set j [catch {registry catalog $rep_name} rlist]
    }
    if {$j != 0} {
        append result "Error: $rlist"
        return $result
    }

    #
    # Loop through the replica list and contact each replica
    # to see what it thinks about itself.
    #
    foreach i $rlist {
        if {[info local result] > 0} {
            append result "\n\n"
        }
        set code [catch {registry show $i -replica} answer] 
        if {$code == 0} {
            append result "$answer"
        } else {
            append result "{name $i}\n" 
            append result "Error: $answer" 
        }
    } 
    return $result
}

 
#
# PROCEDURE:
# _dcp_registry_verify
#
# OVERVIEW:
# Checks if all registry replicas are up-to-date with the master. 
# It takes one argument and _s(sec) is set to the name of the 
# last replica displayed. 
#
# INPUTS:
# None
#
# INPUTS/OUTPUTS
# None
#
# OUTPUTS
# None
#
# RETURNS:
# If all registry replicas are up-to-date, returns an empty string. 
# If not, a list of out-of-date and unreachable replica names (or 
# bindings if names are not available) is returned.
#
proc _dcp_registry_verify {rep_name} {
    set upseq_master 0

    #
    # Get the replica list as known by either some default replica
    # that security will pick for us, or from the specified replica.
    #
    if {$rep_name == "NULL"} {
        set j [catch {registry catalog} rlist]
    } else {
        set j [catch {registry catalog $rep_name} rlist]
    }
    if {$j != 0} {
        append result "Error: $rlist"
        return $result
    }

    #
    # Get the name of the master security server
    #
    if {$rep_name == "NULL"} {
        set j [catch {registry catalog -master} secmaster]
    } else {
        set j [catch {registry catalog -master $rep_name} secmaster]
    }
    if {$j != 0} {
        append result "Error: $secmaster"
        return $result
    }

    #
    # Get the current update sequence number of the master security server.
    #
    set code [catch {attrlist getvalues [registry show -replica $secmaster] \
                     -type lastupdseq} answer]
    if {$code != 0} {
        append result "Error: $answer"
        return $result
    } else {
        set upseq_master $answer
    }
    if {$upseq_master == 0} {
        error "Cannot get last update sequence number of master."
    }

    #
    # For each replica in the cell, compare the last update sequence of
    # the replica with that of the master.  If the values match, then the
    # replica is in synch with the master.  If they do not, it's possible
    # that new propagations are coming from the master and the master
    # update sequence number we are using is no longer valid.  Get the
    # (possibly) new update sequence number from the master and try the
    # comparison again.  If it still fails, then this indicates there is
    # still propagation information that the master has not sent to the
    # replica, so that replica is out of synch.
    #
    foreach i $rlist {
        #
        # Compare the current update sequence number of the master with
        # the current update sequence number of this replica.
        #
        set code [catch {registry show $i -replica} answer]
        if {$code == 0} {
            #
            # The 'show' operation worked and we should be able to get a
            # valid update sequence number from the replica.
            #
            set upseq_replica [attrlist getvalues $answer -type lastupdseq]
            if {[string compare $upseq_master $upseq_replica] != 0} {
                #
                # The update sequences do not match.  Re-compute the master
                # sequence number and try the compare again.  If it still
                # fails, then report it.
                #
                set code [catch {attrlist getvalues [registry show -replica $secmaster] \
                                 -type lastupdseq} answer]
                if {$code != 0} {
                    error "Cannot get new update sequence number of master."
                } else {
                    set upseq_master $answer
                }
                if {$upseq_master == 0} {
                    error "Cannot get new update sequence number of master."
                }

                #
                # One last chance at matching...
                #
                if {[string compare $upseq_master $upseq_replica] != 0} {
                    #
                    # Even with this most up-to-date update sequence number
                    # from the master, it still doesn't match, so report it.
                    #
                    if {[info local result] > 0} {
                        append result "\n"
                    }
                    append result "$i"
                }
            }
        } else {
            #
            # Something went wrong with the 'show' operation that has
            # nothing to do with sequence numbers.  The replica must
            # be in a sad state, so report it as invalid.
            #
            if {[info local result] > 0} {
                append result "\n"
            }
            append result "$i"
        }
    }

    #
    # Return list of out-dated replicas, otherwise just return.
    #
    if {[catch {set result}]} {
        return
    } else {
        return $result
    }
}

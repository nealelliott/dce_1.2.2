#
# ID: $Id: README,v 1.4 1993/11/24 15:21:38 vijay Exp $
#
# COMPONENT_NAME: bak tests
#
# The following functions list may not be complete.
# Functions defined by/via macros may not be included.
#
# FUNCTIONS:
#    README file contains instructions on how to configure and run the bak 
# test suite and on how to interpret the results of the test run
#
# ORIGINS: Transarc Corp.
#
# (C) COPYRIGHT Transarc Corp. 1993
# All Rights Reserved
# Licensed Materials - Property of Transarc
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
#
# HISTORY
# $TALog: README,v $
# Revision 1.4  1993/11/24  15:21:38  vijay
# The kill_job routine needed some work because it wasn't expecting output on
# butc, but it should. Also made backup_driver.exp executable by adding
# expect on the first line. Explained alternate methods of running the driver
# in the README file.
#
# explain methods of running the driver
# [from r1.3 by delta vijay-db3516-add-bak-test-driver, r1.6]
#
# Revision 1.3  1993/11/18  19:55:00  vijay
# fixes to bugs introduced while merging and enhancing util.exp
#
# a few additional details
# [from r1.2 by delta vijay-db3516-add-bak-test-driver, r1.3]
#
# Revision 1.2  1993/11/15  21:20:03  vijay
# This revision checks in a working set of scripts to test the DFS backup
# system. The files checked in for this delta are high level scripts to
# configure and run the test suite. Separate deltas would export the scripts
# to test individual bak commands.
#
# The README file provides a description on how to configure and run these tests.
#
# Description to configure and run the backup system
# [from r1.1 by delta vijay-db3516-add-bak-test-driver, r1.2]
#


   Automated Tests for the DFS backup system command interface(bak)

Instructions for configuring, running the backup automated tests are provided
below. Also listed are a few notes about the tests themselves. Please read
this fully before running the tests.

SETUP

1. Configure the bakserver in the cell. You could run either one or multiple
   bakservers in the cell. Configure a tape drive with a writable tape in it.

2. Change directory to test/file/bak in the install tree.

3. Edit the generic.exp file to set desired values for the variables. Each
   variable has a description of what it means and has a default value 
   associated with it. Some of the variables that need attention are,
   the pathnames for binaries such as bak, butc, fts; the host on which bak
   and butc should run, the tcid for butc, the test directory in DFS where
   fileset mounts can be made, and login user information.

4. Each bak command has an associated command directory. These directories
   contain tests for that command and would also contain the LOG file produced
   by running the tests and a RESULTS file indicating which tests passed and
   which didn't.

5. Get the latest Expect binary and place it somewhere so that it is in your
   path.

6. Make sure you run dce_login to acquire necessary DFS credentials. You should
   have the necessary rights to run bak and butc (you should be a member of the
   admin.bak and other admin files). dce_login as cell_admin is usually 
   sufficient. Make sure the login information in the generic.exp file is 
   accurate. Make sure you have the necessary AFS or other filesystem access 
   credentials. If you choose to run bak and/or butc on a remote machine, the 
   scripts telnet onto that machine. For this, it needs the login name and 
   password (AFS login name and password if AFS login is used or if script 
   files in AFS) and DCE login and password.

7. Run "expect -f backup_driver.exp". Alternatively, make sure the first line
   of backup_driver.exp refers to the correct expect binary location, and run
   "backup_driver.exp" after doing any necessary chmod to mark the driver as
   executable. Run time information is printed both to the tty and to the LOG 
   files. To run a tests for a specific command or a specific test use the
   command line options of backup_driver.exp,

   backup_driver.exp [-cmds <bak commands...>] [-tests <tests for commands...>]

   Leaving out the tests would run all tests for the commands specified.

8. Once the tests are done, use the results.exp script to obtain a summary of
   the test results by running "expect -f results.exp".

NOTES

1. These tests do not destroy any backup configuration information already in
   the backup database or in the TapeConfig file. So, these tests can be run
   on a cell containing valid backup information in the database. In spite of
   this, it is recommended that you backup the information in the database
   using the bak savedb command before you run these tests.

2. Multiple instances of these tests cannot be run on the same cell.

3. For now, the bak dump, restoreft, restoredisk, savedb and restoredb commands   have automated tests associated with them. Tests for the other commands 
   would be written in the future.

4. Each test in the command directories has a number associated with them. For
   example dump/dump-1.1.3.1b. The "1.1.3.1b" in the test name signifies the
   particular test in the backup test checklist that is being tested. The 
   backup checklist is present in the bak.checklist file. Each test in the
   checklist has a number prefixed and can be used to correlate the test file 
   to the entry in the checklist.

4. The tests take several hours to run to completion.

5. When reporting errors please furnish the LOG files.

6. The tests can be run in verbose mode by setting bak_verbose variable to
   "-verbose". This produces a lot of expect verbosity useful in diagnosing
   test problems and is appended to the appropriate LOG files.

7. These tests are fully automated and need no manual intervention. 
   Consequently, tests requiring manual intervention such as dump/restore 
   to/from multiple tapes are not tested. These should be tested manually.

8. Don't run the tests in background, expect can't seem to handle this.




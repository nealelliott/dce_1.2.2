#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
#
# HISTORY
# $Log: Makefile.in,v $
# Revision 1.1.2.1  1996/08/09  17:23:14  arvind
# 	DCE 1.2.2 Intermediate drop (post bl3/pre bl4)
# 	[1996/08/09  14:08:20  arvind]
#
# $EndLog$
#

#
# Makefile for Expect
#

VERSION = \"5.19.0\"
SHORT_VERSION = 5.19

# Requires at least Tcl 7.0
# Known to work with up to Tcl 7.4

# While Tk is optional, if you do use Tk, it must be at least Tk 3.3
# Known to work with up to Tk 4.0

srcdir = @srcdir@
VPATH = @srcdir@
SUBDIRS = @subdirs@

######################################################################
# The following lines are things you may want to change
######################################################################

# Tcl include files.  (If you haven't installed Tcl yet, read the README file).
# This must point to the directory that contains ALL of Tcl's include
# files, not just the public ones.
TCLHDIR = @TCLHDIR@

# Tcl library.  Should be something like -ltcl or ../tcl/libtcl.a
TCLLIB = @TCLLIB@

# The following three defs are only nec. if you want to use Tk with Expect.
# Tk include files
TKHDIR = @TKHDIR@
# Tk library
TKLIB = @TKLIB@
# X11 include files
X11HDIR = @XINCLUDES@
# X library
X11_LIB_FLAGS = @XLIBPATH@
X11_LIB = @XLIBS@
X11_PROGS = @XPROGS@

# flags to pass to both cc and ld
# You should be able to leave this just the way it is.  However, here are some
# note if you run into problems:
#
# Avoid -O (optimize) unless you are convinced your optimizer is flawless
# (hint: not a chance).  I have heard many reports of -O causing Expect to
# misbehave.
# I encourage you to use -g (debugging).  While it is unlikely you will
# encounter an internal error in Expect, should this happen, I may just need
# the -g information and then you will need to recompile Expect.  As an aside,
# Expect is not a space or time pig, so this won't affect the performance of
# your Expect scripts.
# Note: On Linux systems which only have dynamic X libraries, the -g prevents
# the linker from using them.  So do not use -g on such systems.
CFLAGS = @EXP_CFLAGS@

# flags to pass only to linker (after .o files but before libraries)
# If you are on a NeXT, add "-m" flag to avoid complaints about multiple strtod
LFLAGS =

# which C compiler to use.  This is normally decided by the configure script.
# Note that changing this here can screw up deductions that the configure
# script made on the assumption that you were using a different compiler.
# Hence, if you want to change this, reread the INSTALL file and pay close
# attention to where it describes how to tell configure that you want to
# use some other compiler.
CC = @CC@

# By default, "make install" will install the appropriate files in
# /usr/local/bin, /usr/local/lib, /usr/local/man, etc.  By changing this
# variable, you can specify an installation prefix other than /usr/local.
# You may find it preferable to call configure with the --prefix option
# to control this information.  This is especially handy if you are
# installing Expect several times (perhaps on a number of machines or
# in different places).  Then you don't have to hand-edit this file.
# See the INSTALL file for more information.  (Analogous information
# applies to the next variable as well.)
prefix = @prefix@

# You can specify a separate installation prefix for architecture-specific
# files such as binaries and libraries.
exec_prefix = @exec_prefix@

# The following Expect scripts are not necessary to have installed as
# commands, but are very useful.  Edit out what you don't want installed.
# The INSTALL file describes these and others in more detail.
# Some Make's screw up if you delete all of them because SCRIPTS is a
# target.  If this is a problem, just comment out the SCRIPTS target itself.
SCRIPTS = timed-run timed-read ftp-rfc autopasswd lpunlock weather \
	passmass rftp kibitz rlogin-cwd xpstat tkpasswd dislocate xkibitz \
	tknewsbiff unbuffer mkpasswd cryptdir decryptdir autoexpect
# A couple of the scripts have man pages of their own.
# You can delete these too if you don't want'em.
SCRIPTS_MANPAGES = kibitz dislocate xkibitz tknewsbiff unbuffer mkpasswd \
	passmass cryptdir decryptdir autoexpect

# Short directory path where expect binary can be found to support #! hack.
# This directory path can be the same as the directory in which the binary
# actually sits except when the path is so long that the #! mechanism breaks
# (usually at 32 characters).
# The solution is to create a directory with a very short name, which consists
# only of symbolic links back to the true binaries.  Subtracting two for "#!"
# and a couple more for arguments (typically " -f" or " --") gives you 27
# characters.  Pathnames over this length won't be able to use the #! magic.
# For more info on this, see the execve(2) man page.
SHORT_BINDIR = $(exec_prefix)/bin

# If you have ranlib but it should be avoided, change this from "ranlib"
# to something innocuous like "echo".  Known systems with this problem:
# older SCO boxes.
RANLIB = @RANLIB@

# One of the following: select, poll, or simple
EVENT_TYPE = @EVENT_TYPE@
#
# You will need to change EVENT_TYPE to poll if your system is:
# NCR SVR4 (1.03.01)			where select is broken on ttys
# StarServer (SVR3 and SVR4.0)		where select is broken on ttys
#
# You will need to change EVENT_TYPE to select if your system is:
# Pyramid OSx in the att universe	where poll is broken (see LIBS below)
#
# You will need to change EVENT_TYPE to simple if your system is:
# old SCO				where select is broken on ptys
# 3b2 SVR3				where poll is broken on ptys
#    If you do use "simple":
# 1) you must also edit expect_cf.h and change
#    "#undef SIMPLE_EVENT" to "#define SIMPLE_EVENT",
# 2) you cannot use Expect with Tk since Tk's event manager insists on
#    reading all events through select, and
# 3) you cannot expect or interact with two or more processes simultaneously

# Define default parameters for ptys.  This is used when 1) running in the
# background, 2) user has not defined the variable STTY_INIT to initialize
# ptys, and 3) the pty-driver's defaults suck.
#
# If your system doesn't understand "sane", try "cooked".  Apollo systems
# need nothing at all and should delete this line.  Systems using 8-bit
# character sets may need to disable parity.
# Systems that define sane to use @ as line kill and # as erase should
# use something like "sane kill  erase ".
STTY = -DDFLT_STTY=\"@DEFAULT_STTY_ARGS@\"

######################################################################
# End of things you may want to change
#
# Do not change anything after this
######################################################################

bindir 	= $(exec_prefix)/bin
bindir_arch_indep = $(prefix)/bin
libdir 	= $(exec_prefix)/lib
tooldir = $(libdir)
datadir = $(prefix)/lib
execdatadir = $(exec_prefix)/lib

mandir 	= $(prefix)/man
man1dir = $(mandir)/man1
man3dir = $(mandir)/man3
infodir = $(prefix)/info
includedir = $(prefix)/include
oldincludedir =
docdir = $(datadir)/doc

# Where to store Expect's utility scripts - arch-independent and arch-non-
# independent.  (The first is currently just a placeholder since there are no
# arch-independent utility scripts.)  These correspond to the variables
# "exp_library" and "exp_exec_library".
SCRIPTDIR	= $(datadir)/expect
EXECSCRIPTDIR	= $(execdatadir)/expect

SHELL = /bin/sh

INSTALL = @INSTALL@
#INSTALL_PROGRAM = $(INSTALL)
#INSTALL_DATA = $(INSTALL)
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

AR = ar
ARFLAGS = cr

# these are used by the "subdirs_do" target to pass
# the compile flags down recursively.
FLAGS_TO_PASS = \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"CFLAGS_INT=$(CFLAGS_INT)" \
	"HDEFS=$(HDEFS)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"LDFLAGS=$(LDFLAGS)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)"

#
# Following defines are for DejaGnu
#

# These let the DejaGnu test suite run when DejaGnu isn't 
# installed yet, so run it from the srcdir and objdir.
EXPECT = ` \
  if [ -f $${rootme}/expect ] ; then \
    echo $${rootme}/expect ; \
  else echo expect ; fi`

RUNTESTFLAGS =
RUNTEST = ` \
  if [ -f $${srcdir}/../dejagnu/runtest ] ; then \
    echo $${srcdir}/../dejagnu/runtest ; \
  else echo runtest ;  fi`

EVENT = exp_$(EVENT_TYPE)
PTY_TYPE = @PTY_TYPE@
PTY = pty_$(PTY_TYPE)
CFILES = exp_command.c expect.c $(PTY).c \
	exp_inter.c exp_regexp.c exp_tty.c \
	exp_log.c exp_main_sub.c exp_pty.c \
	exp_printify.c exp_trap.c exp_strf.c \
	exp_console.c exp_glob.c exp_win.c Dbg.c exp_clib.c \
	exp_closetcl.c exp_memmove.c exp_tty_comm.c
OFILES = exp_command.o expect.o $(PTY).o exp_inter.o exp_regexp.o exp_tty.o \
	exp_log.o exp_main_sub.o exp_pty.o exp_printify.o exp_trap.o \
	exp_console.o exp_strf.o exp_glob.o exp_win.o Dbg.o exp_clib.o \
	exp_closetcl.o exp_memmove.o exp_tty_comm.o
LIBEXPECT = libexpect.a
LIBEXPECTK = libexpectk.a

# expect must be setuid on crays in order to open ptys (and accordingly,
# you must run this Makefile as root).
# See the FAQ for more info on why this is necessary on Crays.
SETUID = @SETUID@
# SETUID = chmod u+s

# allow us to handle null list gracefully, "end_of_list" should not exist
SCRIPT_LIST = $(SCRIPTS) end_of_list
SCRIPT_MANPAGE_LIST = $(SCRIPTS_MANPAGES) end_of_list

# Both TKHDIR and TCLHDIR include "-I"

# because STTY can include whitespace and quotes, pass STTY separately
CPPFLAGS = -I. -I$(srcdir) $(TCLHDIR) $(TKHDIR) $(X11HDIR) \
		-DEXP_VERSION=$(VERSION) \
		-DSCRIPTDIR=\"$(SCRIPTDIR)\" \
		-DEXECSCRIPTDIR=\"$(EXECSCRIPTDIR)\" \
		-DTCL_DEBUGGER

#
# Flags to pass to cc (i.e. add to the end of the CLFLAGS line below).
# Note that setting one will not set others automatically.  Set all that
# are relevant.
#
# NOTE THAT THESE FLAGS ARE NO LONGER SUPPORTED.  THE FUNCTIONALLY IS REPLACED
# BY THE AUTOMATIC CONFIGURATION CODE.  ONLY MESS WITH THE FOLLOWING DEFS IF
# YOU ARE POSITIVE THE AUTO CONFIG CODE IS FAILING.
# 
# -DSYSV3 if you are running SVR3 or later.
# -DSYSV4 if you are running SVR4.  This option does not preclude -DSYSV3.
# -DAUX2 if you are running Mac A/UX 2.
# -DMIPS_BSD if you are on a Mips machine using the BSD universe.
# -D_BSD_SIGNALS if you are on a Silicon Graphics AND want BSD semantics when
#	using the expect library.  Otherwise, you are better off just sticking
#	with rearming signals.

# Flags to pass to ld (i.e., add to the end of the LIBS line below).
#
# -lc -lBSD     If you are using the BSD compatibility library on an HP/UX,
#		force libc.a to be loaded first.
# -lsocket	For SCO UNIX 3.2.2 (this should now be done automatically)
#  /usr/ucblib/libucb.a is needed for solaris 2.0 after -lm
# -lX11		For Pyramid OSx, poll is broken, so use select from X lib
LIBS = $(LFLAGS) @LIBS@

CFLAGS_INT = $(MH_CFLAGS) $(CPPFLAGS) $(CFLAGS)

.c.o:
	$(CC) -c $(CFLAGS_INT) $(STTY) $(HDEFS) $<

all: expect $(LIBEXPECT) ${X11_PROGS}
	@$(MAKE) subdir_do DO=$@  $(FLAGS_TO_PASS)

info:
dvi:

expect:	$(OFILES) exp_main_exp.o $(EVENT).o
	$(CC) $(CFLAGS) -o expect $(OFILES) exp_main_exp.o \
	      $(EVENT).o $(TCLLIB) $(LIBS)
	$(SETUID) expect

# Build Expect with TestCenter
expect.tc:	$(OFILES) exp_main_exp.o $(EVENT).o
	proof $(CC) $(CFLAGS) -o expect.tc $(OFILES) exp_main_exp.o $(EVENT).o $(TCLLIB) $(LIBS) 
	$(SETUID) expect.tc

expectk:        $(OFILES) exp_main_tk.o exp_tk.o
	$(CC) $(CFLAGS) -o expectk $(OFILES) exp_main_tk.o exp_tk.o $(TKLIB) $(TCLLIB) $(X11_LIB_FLAGS) $(X11_LIB) $(LIBS) 
	$(SETUID) expectk

# Build Expectk with TestCenter
expectk.tc:        $(OFILES) exp_main_tk.o exp_tk.o
	proof $(CC) $(CFLAGS) -o expectk.tc $(OFILES) exp_main_tk.o exp_tk.o $(TKLIB) $(TCLLIB) $(X11_LIB_FLAGS) $(X11_LIB) $(LIBS) 
	$(SETUID) expectk.tc

$(LIBEXPECT): $(OFILES) $(EVENT).o
	$(AR) $(ARFLAGS) $(LIBEXPECT) $(OFILES) $(EVENT).o
	-$(RANLIB) $(LIBEXPECT)

$(LIBEXPECTK): $(OFILES) exp_tk.o
	$(AR) $(ARFLAGS) $(LIBEXPECTK) $(OFILES) exp_tk.o
	-$(RANLIB) $(LIBEXPECTK)

# Delete all the installed files that the `install' target creates
# (but not the noninstalled files such as `make all' creates)
uninstall:
	-rm -f  $(bindir)/expectk \
		$(man1dir)/expectk.1 \
		$(man1dir)/expectk.1 \
		$(libdir)/$(LIBEXPECT) \
		$(man3dir)/libexpect.3 \
		$(libdir)/$(LIBEXPECTK) \
		$(includedir)/expect_cf.h \
		$(includedir)/expect.h \
		$(includedir)/expect_tcl.h \
		$(includedir)/expect_comm.h \
		$(EXECSCRIPTDIR)/cat-buffers
# debugger is not removed, since other things could depend on it
# remove standalone scripts and man pages
	-for i in $(SCRIPT_LIST) ; do \
	  rm -f $(bindir_arch_indep)/$$i ; \
	done
	-for i in $(SCRIPT_MANPAGE_LIST) ; do \
	  rm -f $(man1dir)/$$i.1 ; \
	done

.PHONY: install-info install info
install-info:

install:	expect ${X11_PROGS} $(LIBEXPECT) $(SCRIPTS)
	${srcdir}/mkinstalldirs $(man1dir) $(man3dir) $(bindir) $(libdir) $(includedir)
# install Expect
	$(INSTALL_PROGRAM) expect $(bindir)/expect
# install Expectk (and man page) if present
	-if [ -s expectk ] ; then \
	  $(INSTALL_PROGRAM) expectk $(bindir)/expectk ; \
	  $(INSTALL_DATA) $(srcdir)/expectk.man $(man1dir)/expectk.1 ; \
	else true; fi
# install Expect man page
	$(INSTALL_DATA) $(srcdir)/expect.man $(man1dir)/expect.1
# install Expect library
	$(INSTALL_DATA) $(LIBEXPECT) $(libdir)/$(LIBEXPECT)
	-$(RANLIB) $(libdir)/$(LIBEXPECT)
# install man page for Expect and Expectk libraries
	$(INSTALL_DATA) $(srcdir)/libexpect.man $(man3dir)/libexpect.3
# install Expect-Tk library if present
	-if [ -s $(LIBEXPECTK) ] ; then \
	  $(INSTALL_DATA) $(LIBEXPECTK) $(libdir)/$(LIBEXPECTK) ; \
	  $(RANLIB) $(libdir)/$(LIBEXPECTK) 2>>/dev/null ; \
	else true; fi
# install Expect's public include files
	$(INSTALL_DATA) expect_cf.h $(includedir)
	$(INSTALL_DATA) $(srcdir)/expect.h $(includedir)
	$(INSTALL_DATA) $(srcdir)/expect_tcl.h $(includedir)
	$(INSTALL_DATA) $(srcdir)/expect_comm.h $(includedir)
# install Debugger's public include file (just in case it's not there)
	$(INSTALL_DATA) $(srcdir)/Dbg.h $(includedir)
# some people don't install Tcl, sigh
	TCL_LIBRARY=`echo @TCLHDIR@ | sed -e 's/-I//'`/library ; \
	   export TCL_LIBRARY ; \
	   if ./expect $(srcdir)/fixcat ; then \
	      $(INSTALL_DATA) $(srcdir)/fixcat $(EXECSCRIPTDIR)/cat-buffers ; \
	   else true; fi
# install standalone scripts and their man pages, if requested
	${srcdir}/mkinstalldirs $(bindir_arch_indep) $(man1dir) $(SCRIPTDIR) $(EXECSCRIPTDIR)
	-for i in $(SCRIPT_LIST) ; do \
	  if [ -f $$i ] ; then \
	    $(INSTALL_PROGRAM) $$i $(bindir_arch_indep)/$$i ; \
	    rm -f $$i ; \
	  else true; fi ; \
	done
	-for i in $(SCRIPT_MANPAGE_LIST) ; do \
	  if [ -f $(srcdir)/example/$$i.man ] ; then \
	    $(INSTALL_DATA) $(srcdir)/example/$$i.man $(man1dir)/$$i.1 ; \
 	  else true; fi ; \
	done

$(SCRIPT_LIST):
	TCL_LIBRARY=`echo @TCLHDIR@ | sed -e 's/-I//'`/library ; \
	export TCL_LIBRARY ; \
	./expect $(srcdir)/fixline1 $(SHORT_BINDIR) < $(srcdir)/example/$@ > $@

################################################
# Various "clean" targets follow GNU conventions
################################################

# delete all files from current directory that are created by "make"
clean:
	-rm -f *~ *.o core expect expectk dumb exho devtty $(LIBEXPECT) $(LIBEXPECTK) $(SCRIPT_LIST)
	@$(MAKE) subdir_do DO=$@ $(FLAGS_TO_PASS)

# like "clean", but also delete files created by "configure"
distclean: clean
	@$(MAKE) subdir_do DO=$@  $(FLAGS_TO_PASS)
	-rm -f Makefile config.status config.cache config.log expect_cf.h

# like "clean", but doesn't delete test utilities or massaged scripts
# because most people don't have to worry about them
mostlyclean:
	-rm -f *~ *.o core expect expectk $(LIBEXPECT) $(LIBEXPECTK)
	@$(MAKE) subdir_do DO=$@ $(FLAGS_TO_PASS)

# delete everything from current directory that can be reconstructed
# except for configure
realclean:	distclean

check:
	@if [ -f testsuite/Makefile ]; then \
	   rootme=`pwd`; export rootme; \
	   cd testsuite; \
	   $(MAKE) $(FLAGS_TO_PASS) check; \
	else true; fi

# Let "make -f Makefile.in" produce a configure file
configure: $(srcdir)/configure.in $(srcdir)/Makefile.in \
		$(srcdir)/expect_cf.h.in $(srcdir)/aclocal.m4
	@echo "Rebuilding configure..."
	if [ x"${srcdir}" = x"@srcdir@" ] ; then \
	  srcdir=. ; export srcdir ; \
	else true ; fi ; \
	(cd $${srcdir}; autoconf)

# Original Dbgconfig.in comes from the NIST Tcl debugger distribution.
Dbgconfigure: $(srcdir)/Dbgconfig.in $(srcdir)/Makefile.in \
		$(srcdir)/Dbg_cf.h.in $(srcdir)/aclocal.m4
	@echo "Rebuilding Dbgconfigure..."
	@if [ x"${srcdir}" = x"@srcdir@" ] ; then \
	  srcdir=. ; export srcdir ; \
	else true ; fi ; \
	(cd $${srcdir}; rm -fr Dbgconfigure ; \
	 autoconf Dbgconfig.in > Dbgconfigure ; \
	 chmod a+x Dbgconfigure)

config.status: $(srcdir)/configure
	@echo "Rebuilding config.status..."
	$(SHELL) ./config.status --recheck

LINTFLAGS = -h -q -x 

lint:
	lint $(LINTFLAGS) $(CPPFLAGS) $(STTY) $(CFILES) exp_main_exp.c $(EVENT).c $(TCLLINTLIB) | tee expect.lint

##################################
# Following defines are conveniences for testing at NIST
##################################

# the unsets allow calling this via Makefile.in

nist:
	unset CC ; \
	configure --verbose --prefix=/depot/tcl --exec-prefix=/depot/tcl/arch

epg:
	unset CC ; \
	echo configure --verbose --prefix=/users/libes --exec-prefix=/users/libes/arch

mink:
	unset CC ; \
	configure --verbose --prefix=/usr/tmp --exec-prefix=/usr/tmp/arch

cam:
	unset CC ; \
	configure --verbose --prefix=/tmp_mnt/home/fs1a/libes \
		      --exec-prefix=/tmp_mnt/home/fs1a/libes/arch

granta:
	unset CC ; \
	configure --verbose --prefix=/home/nist/libes/cray --exec-prefix=/home/nist/libes/cray/arch


hudson:
	unset CC ; \
	configure --verbose --prefix=/granta/home/nist/libes/ibm --exec-prefix=/granta /home/nist/libes/ibm/arch

# report globals that shouldn't be public but are
bad_globals:
	nm $(LIBEXPECT) | egrep -v " [a-zU] | _exp| _Exp| _Dbg"
	nm $(LIBEXPECTK) | egrep -v " [a-zU] | _exp| _Exp| _Dbg"	

#########################################
# Following defs are for building with CodeCenter
#########################################

GCCROOT = /depot/gnu/arch/lib/gcc-lib/sparc-sun-sunos4.1/2.3.3
GCCLIB = $(GCCROOT)/libgcc.a
GCCINC = -I$(GCCROOT)/include
# following only on Sparcs
SABERDEFINE = -D__sparc__

# Following target builds expect under CodeCenter.
exp:	$(CFILES) exp_main_exp.c $(EVENT).c
	#load $(CPPFLAGS) $(STTY) $$(CFILES) exp_main_exp.c $(EVENT).c $(TCLLIB) $(GCCLIB) $(LIBS)

# Following target builds expectk under CodeCenter.  Notes:
# Because of explicit #includes of <X11/...> in tk.h, you need to create
# a symlink from your X11 include directory to this directory
tk:     $(CFILES) exp_main_tk.c exp_tk.c
	#load $(CPPFLAGS) $(STTY) $(CFILES) exp_main_tk.c exp_tk.c $(TKLIB) $(TCLLIB) $(X11_LIB) $(LIBS)

# Follow definitions are for building expect and expectk under ObjectCenter
oexp:   $(CFILES) exp_main_exp.c $(EVENT).c
	#load $(CPPFLAGS) $(STTY) -C $(CFILES) exp_main_exp.c $(EVENT).c $(TCLLIB)

otk:    $(CFILES) exp_main_tk.c exp_tk.c
	#load $(CPPFLAGS) $(STTY) -C $(CFILES) exp_main_tk.c exp_tk.c $(TKLIB)

FTPDIR = /proj/elib/online/pub/expect

# make a private tar file for myself
tar:	expect-$(SHORT_VERSION).tar
	mv expect-$(SHORT_VERSION).tar expect.tar

# make a release and install it on ftp server
ftp:	expect-$(SHORT_VERSION).tar.Z expect-$(SHORT_VERSION).tar.gz
	cp expect-$(SHORT_VERSION).tar.Z $(FTPDIR)/expect.tar.Z
	cp expect-$(SHORT_VERSION).tar.gz $(FTPDIR)/expect.tar.gz
	cp HISTORY $(FTPDIR)
	cp example/README $(FTPDIR)/example
	cp `pubfile example` $(FTPDIR)/example
	rm expect-$(SHORT_VERSION).tar*
	ls -l $(FTPDIR)/expect.tar*

# make an alpha relase and install it on ftp server
alpha:	expect-$(SHORT_VERSION).tar.Z expect-$(SHORT_VERSION).tar.gz
	cp expect-$(SHORT_VERSION).tar.Z $(FTPDIR)/alpha.tar.Z
	cp expect-$(SHORT_VERSION).tar.gz $(FTPDIR)/alpha.tar.gz
	cp HISTORY $(FTPDIR)
	rm expect-$(SHORT_VERSION).tar*
	ls -l $(FTPDIR)/alpha.tar*

expect-$(SHORT_VERSION).tar: configure
	rm -f ../expect-$(SHORT_VERSION)
	ln -s `pwd` ../expect-$(SHORT_VERSION)
	rm -f ../pubfile
	ln pubfile ..
	cd ..;tar cvfh $@ `pubfile expect-$(SHORT_VERSION)`
	mv ../$@ .

expect-$(SHORT_VERSION).tar.Z:	expect-$(SHORT_VERSION).tar
	compress -fc expect-$(SHORT_VERSION).tar > $@

expect-$(SHORT_VERSION).tar.gz:	expect-$(SHORT_VERSION).tar
	gzip -fc expect-$(SHORT_VERSION).tar > $@

test:   expect
	rm -f .tmp
	echo "set objdir" `pwd` > .tmp
	if [ "$(srcdir)" = "." ] ; then \
	   echo "set srcdir" `pwd` >> .tmp ; \
	else echo "set srcdir" $(srcdir) >> .tmp ; fi
	echo "cd \$${srcdir}/tests" >> .tmp
	echo "source all" >> .tmp
	rootme=`pwd`; export rootme; \
	srcdir=${srcdir} ; export srcdir ; \
	if [ -f ./expect ] ; then  \
	   TCL_LIBRARY=`echo @TCLHDIR@ | sed -e 's/-I//'`/library ; \
	   export TCL_LIBRARY ; fi ; \
	./expect -f .tmp
	rm -f .tmp

WEBDIR = /proj/elib/internal/libes

# create the FAQ in html form
FAQ.html:	FAQ.src FAQ.tcl
	FAQ.src html > FAQ.html

# create the FAQ in text form
FAQ:	FAQ.src FAQ.tcl
	FAQ.src text > FAQ

# generate Expect home page
homepage.html:	homepage.src homepage.tcl
	homepage.src > homepage.html

# install various html docs on our web server
install-html:	FAQ.html homepage.html
	cp FAQ.html $(WEBDIR)
	cp homepage.html $(WEBDIR)/index.html

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) config.status
	@echo "Rebuilding the Makefile..."
	$(SHELL) ./config.status

# add recursive support to the build process.
subdir_do: force
	@for i in $(SUBDIRS); do \
	   echo "Making $(DO) in $${i}..." ; \
	   if [ -d ./$$i ] ; then \
	     if (rootme=`pwd`/ ; export rootme ; \
	       rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
	       cd ./$$i; \
	       $(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
	     else exit 1 ; fi ; \
	   else true ; fi ; \
	done
force:

## dependencies will be put after this line... ##
Dbg.o: $(srcdir)/Dbg.c Dbg.h 
exp_command.o: $(srcdir)/exp_command.c expect_cf.h exp_tty.h \
	exp_rename.h expect.h exp_command.h \
	exp_log.h exp_printify.h exp_event.h exp_pty.h 
exp_inter.o: $(srcdir)/exp_inter.c expect_cf.h \
	exp_tty_in.h exp_tty.h exp_rename.h expect.h exp_command.h \
	exp_log.h exp_printify.h exp_regexp.h exp_tstamp.h
exp_log.o: $(srcdir)/exp_log.c expect_cf.h expect.h \
	exp_rename.h exp_log.h exp_printify.h 
exp_main_exp.o: $(srcdir)/exp_main_exp.c expect_cf.h \
	expect.h exp_rename.h exp_command.h exp_log.h exp_printify.h
exp_main_sub.o: $(srcdir)/exp_main_sub.c expect_cf.h \
	exp_rename.h \
	expect.h exp_command.h exp_tty_in.h exp_tty.h exp_log.h \
	exp_printify.h exp_event.h 
exp_main_tk.o: $(srcdir)/exp_main_tk.c expect_cf.h Dbg.h 
exp_poll.o: $(srcdir)/exp_poll.c expect_cf.h expect.h \
	exp_command.h exp_event.h 
exp_printify.o: $(srcdir)/exp_printify.c expect_cf.h 
exp_pty.o: $(srcdir)/exp_pty.c expect_cf.h exp_rename.h exp_pty.h 
exp_regexp.o: $(srcdir)/exp_regexp.c expect_cf.h \
	expect.h exp_regexp.h 
exp_select.o: $(srcdir)/exp_select.c expect_cf.h \
	expect.h exp_command.h exp_event.h 
exp_simple.o: $(srcdir)/exp_simple.c expect_cf.h \
	expect.h exp_command.h exp_event.h 
exp_strf.o: $(srcdir)/exp_strf.c
exp_tk.o: $(srcdir)/exp_tk.c expect_cf.h expect.h exp_command.h exp_event.h 
exp_trap.o: $(srcdir)/exp_trap.c expect_cf.h expect.h \
	exp_command.h exp_log.h exp_printify.h 
exp_tty.o: $(srcdir)/exp_tty.c expect_cf.h \
	expect.h exp_rename.h exp_tty_in.h exp_tty.h exp_log.h \
	exp_printify.h exp_command.h 
exp_win.o: $(srcdir)/exp_win.c exp_win.h 
expect.o: $(srcdir)/expect.c expect_cf.h \
	exp_rename.h expect.h exp_command.h \
	exp_log.h exp_printify.h exp_event.h exp_tty.h exp_tstamp.h
lib_exp.o: $(srcdir)/lib_exp.c expect_cf.h exp_rename.h expect.h \
	exp_printify.h
pty_sgttyb.o: $(srcdir)/pty_sgttyb.c expect_cf.h exp_rename.h exp_tty_in.h \
	exp_tty.h exp_pty.h 
pty_termios.o: $(srcdir)/pty_termios.c expect_cf.h exp_win.h \
	exp_tty_in.h exp_tty.h exp_rename.h exp_pty.h 
pty_unicos.o: $(srcdir)/pty_unicos.c expect_cf.h exp_rename.h 

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
# HISTORY
# $Log: README,v $
# Revision 1.1.8.3  1996/03/11  02:37:39  marty
# 	Update OSF copyright years
# 	[1996/03/10  20:05:03  marty]
#
# Revision 1.1.8.2  1995/12/11  21:54:45  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  20:55:03  root]
# 
# Revision 1.1.4.1  1994/10/17  17:59:03  fadden
# 	Rewrite to reflect final test structure.
# 	[1994/10/17  17:46:07  fadden]
# 
# $EndLog$


DCED System Tests
------------------

The system tests in this directory branch exercise the
functionality provided by the DCE Daemon (dced) process.
This includes:

  1. Endpoint resolution
  2. Remote Key Table Management
  3. Remote Host Data Management
  4. Remote Server Configuration and Execution
  5. ACL operations on all the above functions

The DCED System Test consists of three reliability tests 
which use a "run" control script as a test driver
in the same way as many of the other DCE system tests. For
these tests, the run script is run.dced, which is installed
in the directory $TET_ROOT/system/dced/ts/rel. 

The tests must be installed on each machine on which they will be
run, using dcetest_config. Setup requirements are the same as for 
the other run script based DCE system tests. 

The supported command line options for the tests are -l, -t, -e,
-E, -m, and -M. These options function in the same manner as for 
the other DCE system tests. (See the Porting and Testing Guide for
details.)

All sub-components and other executables for DCE daemon system 
testing are installed in the directory $TET_ROOT/system/dced/ts/rel/. 

The test cases provided are:

  dcdrel001

    This test exercises some of the endpoint operations provided by
    dced. It starts two test servers and a test client on each
    machine included in the test. The test servers register in CDS
    and are then contacted by the test clients on all machines
    involved in the test. For each series of client-server
    interactions, the client requests the server to register its
    interface and endpoints with a newly-generated list of object
    uuids, and then contacts the server using each of the
    newly-registered object uuids and requests that the endpoint be
    unregistered. 

    As many machines as desired can be included in the test run
    using the command line options -m or -M, and the number of 
    endpoints registered can be modified by recompiling the tests 
    with a different value for the constant UUID_VEC_COUNT.

    The test starts two servers, both of which register endpoints
    using rpc_ep_register. This test could be readily enhanced by
    modifying one of the two server's manager routines to use the
    dced API functions for registering and unregistering endpoints 
    instead.


  dcdrel002

    This test exercises some of the server configuration and 
    execution operations provided by dced. It configures four 
    variations of a test server, using the dcecp "server create"
    command. Then it tests several cases of starting, stopping,
    and restarting the servers. 

    At present the test creates the tests servers on each of the
    nodes identified on the "run" command line, and then executes
    dcecp operations on those servers from the node that the 
    servers are executing on. A future enhancement would be to execute
    the dcecp commands on each node to control servers on other
    nodes.

  dcdrel003

    This tests exercises some of the keytab, hostdata, and acl
    operations provided by dced. It executes a dcecp script on 
    each of the nodes identified on the "run" command line to 
    test out some of the hostdata operations, then it executes a
    separate dcecp script on each of the nodes to test out some of
    the keytab operations, and finally it runs a dcecp script on 
    each of the nodes to test out some of the acl operations.

    NOTE: When running dcdrel003_acl.tcl, no other dced related
    testing should be taking place.  This test subcomponent
    changes ACL's to disallow DCED operations and would thus
    cause the other tests to fail.

  all

    This selection causes each of the tests in turn to be run with 
    the specified command line options.

/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: ftserver_proc.idl,v $
 * $EndLog$
 */
/*
*/
/*
 * Copyright (C) 1996, 1991 Transarc Corporation
 * All Rights Reserved.
 */

/* $Header: /afs/tr/project/fs/dev/dfs-dev/src/file/ftserver/RCS/ftserver_proc.idl,v 4.31 1996/10/16 12:02:03 gait Exp $ */

[
uuid(4d37f2dd-ed43-0004-02c0-37cf1e000000),
version(4.0)
 /* provider_version(2) */
]

interface FTSERVER
{

import "dcedfs/ftserver_data.idl";

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_CreateTrans([in] handle_t h,
				    [in] afsHyper *fsIdp,
				    [in] unsigned32 aggrId,
				    [in] unsigned32 flags,
				    [out] unsigned32 *transp);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_AbortTrans([in] handle_t h,
				   [in] unsigned32 transId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_DeleteTrans([in] handle_t h,
				  [in] unsigned32 transId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_CreateVolume([in] handle_t h,
				   [in] unsigned32 aggrId,
				   [in] volNamep_string * volNamep,
				   [in] unsigned32 type,
				   [in] unsigned32 flags,
				   [in] afsHyper *parVolIdp,
				   [in] afsHyper *volIdp,
				   [out] unsigned32 *transIdp);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_DeleteVolume([in] handle_t h,
				   [in] unsigned32 transId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
/* has a pipe */
error_status_t FTSERVER_Dump([in] handle_t h,
			   [in] unsigned32 fromTransId,
			   [in] ftserver_Date *dumpDatep,
			   [out] pipe_t * dataPipeP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
/* has a pipe */
error_status_t FTSERVER_Restore([in] handle_t h,
			      [in] unsigned32 toTransId,
			      [in] unsigned32 flags,
			      [in] pipe_t *dataPipeP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_Forward([in] handle_t h,
			      [in] unsigned32 fromTransId,
			      [in] ftserver_Date *dumpDatep,
			      [in] ftserver_dest *dest,
			      [in] unsigned32 restoreFlags,
			      [in] unsigned32 toTransId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_Clone([in] handle_t h,
			    [in] unsigned32 transId,
			    [in] unsigned32 newType,
			    [in] volNamep_string *newName,
			    [in,out] afsHyper *volumeId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_ReClone([in] handle_t h,
			      [in] unsigned32 transId,
			      [in] afsHyper *cloneId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_GetFlags([in] handle_t h,
			       [in] unsigned32 transId,
			       [out] unsigned32 *flags);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_SetFlags([in] handle_t h,
			       [in] unsigned32 transId,
			       [in] unsigned32 flags);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_GetStatus([in] handle_t h,
				  [in] unsigned32 transId,
				  [out] ftserver_status *statusP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_SetStatus([in] handle_t h,
				  [in] unsigned32 transId,
				  [in] unsigned32 mask,
				  [in] ftserver_status *statusP,
				  [in] unsigned32 spare1);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_ListVolumes([in] handle_t h,
				    [in] unsigned32 aggrId,
				    [in] ftserver_iterator *inCookie,
				    [out] ftserver_iterator *outCookie,
				    [out] ftserver_statEntries *statEntries);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	NO
 * provider_version(1)
 */
error_status_t FTSERVER_ListAggregates([in] handle_t h,
				       [in] ftserver_iterator *inCookie,
				       [out] ftserver_iterator *outCookie,
				       [out]
				       ftserver_aggrEntries *aggrEntriesP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	NO
 * provider_version(1)
 */
error_status_t FTSERVER_AggregateInfo([in] handle_t h,
				      [in] unsigned32 aggrId,
				      [out]
				      struct ftserver_aggrInfo *aggrInfoP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_Monitor([in] handle_t h,
				[out] ftserver_transEntries *aggrInfoP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	NO
 * provider_version(1)
 */
error_status_t FTSERVER_GetOneVolStatus(
			[in] handle_t h,
			[in] afsHyper *fsIdp,
			[in] unsigned32 aggrId,
			[in] unsigned32 spare1,
			[out] ftserver_status *statusP);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	NO
 * provider_version(1)
 */
error_status_t FTSERVER_GetServerInterfaces(
			[in] handle_t h,
			[in, out] dfs_interfaceList *serverInterfacesP);


/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(1)
 */
error_status_t FTSERVER_SwapIDs([in] handle_t h,
			      [in] unsigned32 transIdA,
			      [in] unsigned32 transIdB,
			      [in] unsigned32 spare1,
			      [out] unsigned32 *spare2p);

#if !defined(OSF_NO_SOCKET_DUMP)
/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(2)
 */
error_status_t FTSERVER_ConnectSock([in] handle_t h,
			            [in] unsigned32 transId,
				    [in] ftserver_addr_t *clntAddr,
				    [out] ftserver_addr_t *srvrAddr);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(2)
 */
error_status_t FTSERVER_DisconnectSock([in] handle_t h,
			               [in] unsigned32 transId);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(2)
 */
error_status_t FTSERVER_ListenSock([in] handle_t h,
			           [in] unsigned32 transId,
				   [out] ftserver_addr_t *srvrAddr);

/*
 * implemented in file:	ftserver_vprocs.c
 * requires authnz:	YES
 * provider_version(2)
 */
error_status_t FTSERVER_AcceptSock([in] handle_t h,
			           [in] unsigned32 transId,
				   [in] ftserver_addr_t *clntAddr);
#endif /* OSF_NO_SOCKET_DUMP */
}

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
# HISTORY
# $Log: README,v $
# Revision 1.1.7.3  1996/03/09  23:15:14  marty
# 	Update OSF copyright year
# 	[1996/03/09  22:32:30  marty]
#
# Revision 1.1.7.2  1995/12/08  20:54:24  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/08  20:49:34  root]
# 
# Revision 1.1.2.3  1994/10/27  20:06:27  rrizzo
# 	expand copyright
# 	[1994/10/27  19:38:51  rrizzo]
# 
# Revision 1.1.2.2  1994/10/21  20:43:10  weir
# 	Added build section (CR 12635)
# 	[1994/10/21  20:43:02  weir]
# 
# Revision 1.1.2.1  1994/10/21  19:11:35  weir
# 	Submit sample program sources (CR 12635)
# 	[1994/10/21  19:10:48  weir]
# 
# $EndLog$
#
------------------------------------------------------------------------------
# [3.VIII.94]                                                                #
#                               -77 cols-                                    #
------------------------------------------------------------------------------
# 
# 
Directory:

  <dce-root-dir>/dce/src/examples/demo/data_test_app


This directory contains the code for a test platform for the various
RPC data type examples in the OSF DCE Application Development Guide --
Introduction and Style Guide volume.

The following files are contained in this directory:

        Makefile
        README
        data_test.acf
        data_test.idl
        data_test_client.c
        data_test_manager.c
        data_test_server.c
        data_test_xmit.c


------------------------------------------------------------------------------

                 BUILDING THE DATA TEST APPLICATION

To build the data test application, you must first install the DCE Application
Development Environment (by running dce_config). After this has been done,
you can type:

    make -f Makefile_data_test_app

to build the example. Note that in order to build the program on the HP
platform, you must uncomment several lines in Makefile_data_test_app; see
that file for further details.



------------------------------------------------------------------------------

                  RUNNING THE DATA TEST APPLICATION

Very little is required in the way of preparation to run this applica-
tion:

    1. You must have a DCE cell up and running.

    2. You must create the following CDS directory:

           /.:/sample

    3. You must create the following namespace entry for the application
       server:

           /.:/sample/data_test_server_entry

    4. On the client machine (or winow, if you're running the application
       on a single machine), you must set the value of the environment
       variable RPC_DEFAULT_ENTRY to the pathname of the server's name-
       space entry.


Note that the server entry pathname is determined by the value of the
EXPORT_ENTRY string constant defined at the top of the data_test_server.c
file; you can change the value of the latter, in which case you must make
the corresponding change in the pathname given in steps 2 and 3 above.

Steps 2 and 3 can be accomplished as follows:


    1. Login as the cell administrator:

           $ dce_login cell_admin -dce-

       Note that the password at your site will probably be different from
       that given above (as the last parameter). For further information
       about the use of dce_login, see the OSF DCE Administration Guide.

    2. Create the CDS entry that will be used to hold the server's binding
       information. For example (using the names given above):

           $ cdscp create directory /.:/sample
           $ rpccp add entry /.:/sample/data_test_server_entry

       For further information about cdscp and rpccp, see the OSF DCE Admini-
       stration Guide -- Core Components, and the OSF DCE Administration Ref-
       erence.


That's all there is to it. In order to keep things simple, the application
makes no use at all of DCE Security; hence there is no need to set up the
ACL on the server entry, or to create a keytab file, and so on.

Once the above steps have been completed, the server can be invoked as
follows:

        # ./data_test_server

The client can be invoked (either from another machine in the cell, or from
another window if on the same machine) as follows:

        # setenv RPC_DEFAULT_ENTRY /.:/sample/data_test_server_entry
        # ./data_test_client [ls | ps]

where "ls" or "ps" is the (optional) shell command that will be invoked by
the server if requested, the output from which will be sent back to the
client via an RPC pipe.


#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test9,v $
# Revision 1.1.137.1  1996/10/17  18:17:25  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:49:41  damon]
#
# Revision 1.1.132.1  1994/02/04  20:39:51  devsrc
# 	Merged from 1.0.3a to 1.1
# 	[1994/02/04  15:22:15  devsrc]
# 
# Revision 1.1.130.1  1993/12/07  17:41:23  jaffe
# 	1.0.3a update from Transarc
# 	[1993/12/03  18:39:22  jaffe]
# 
# Revision 1.1.4.6  1993/01/11  17:39:07  htf
# 	Embedded copyright notice
# 	[1993/01/11  16:56:04  htf]
# 
# Revision 1.1.4.5  1992/12/09  21:02:38  jaffe
# 	Transarc delta: comer-ot6087-make-tests-stop-AND-wait 1.1
# 	  Selected comments:
# 	    The bos stop command does not wait for the bosserver-controlled
# 	    process to die before it returns unless the -wait option is specified.
# 	    The change is to add -wait to all the stops.
# 	    See above.
# 	[1992/12/04  20:25:50  jaffe]
# 
# Revision 1.1.4.4  1992/11/10  18:40:02  jaffe
# 	Fixed /bin/sh line
# 	[1992/11/10  16:08:32  jaffe]
# 
# Revision 1.1.4.3  1992/10/28  16:00:39  jaffe
# 	Transarc delta: comer-ot4849-misc-bos-command-test-cleanup 1.3
# 	  Selected comments:
# 	    Miscellaneous clean-up of the bos command test suite.
# 	    More cleanup of the bos test suite
# 	    Installed a working version.
# 	    Change Makefiles to install files into the export tree.  This should
# 	    later be changed to install into the install tree as soon as we decide
# 	    on the correct tree layout.  In the meantime, put the files under
# 	    export/<machine>/test/bos.
# 	[1992/10/27  16:54:52  jaffe]
# 
# Revision 1.1.4.2  1992/09/25  17:01:58  jaffe
# 	Transarc delta: rajesh-ot5014-delete-proc-tp46 1.2
# 	  Selected comments:
# 	    To make test9 clean itself up on completion.
# 	    Change test9 to delete process tp46 from the BosConfig file on completion.
# 	    Correct error numbers
# 	    Increment error numbers generated by successive commands by one to
# 	    compensate for the command that deletes tp46
# 	Transarc delta: rajesh-ot5015-bos-test-fixes 1.7
# 	  Selected comments:
# 	    Various changes to fix problems in Ot 5015. This version of the delta
# 	    is only a checkpoint and is not yet ready.
# 	    Test bos commands with localauth flag only on server machines that have a
# 	    DCE dfs-server principal.
# 	    Add in a utility functions that is used to check if a server has
# 	    a dfs-server DCE principal.
# 	    Accidentally deleted all functions except DetermineLocalAuth() in
# 	    util/gen_FunctionsScript. So modified to include all functions previously
# 	    existing in the util/gen_FunctionsScript.
# 	    Some more fixes.
# 	    Fix problem in DetermineLocalAuth function in gen_FunctionsScript.
# 	    Just another checkpoint.
# 	    Changes to fix problems found during execution of test11. The delta is now
# 	    ready for export.
# 	Transarc delta: rajesh-ot5142-convert-bos-tests-from-csh-to-sh 1.3
# 	  Selected comments:
# 	    Convert bos tests 4,5,6,8,9 and 10 from csh to sh.
# 	    Convert test from csh to sh.
# 	    Addition of a utility function to determine if a dfs-server principal
# 	    exists for a machne. And more of csh-to-sh conversions.
# 	    More of csh-to-sh conversions.
# 	    More to csh-to-sh conversion. This version has been tested.
# 	    See above.
# 	[1992/09/23  20:47:37  jaffe]
# 
# Revision 1.1.2.2  1992/05/21  12:35:56  jaffe
# 	Transarc delta: fred-merge-tests 1.1
# 	  Files modified:
# 	    Makefile
# 	    bos: Makefile, READ_ME, init_dce, kills, runc, runtests
# 	    bos: setup, shows
# 	    bos/tests: Makefile, test0, test1, test10, test11, test12
# 	    bos/tests: test2, test3, test4, test5, test6, test7, test8
# 	    bos/tests: test9; bos/tests/procs: Makefile
# 	    cm: Makefile, runtests, test0, test1, test2, test3, test4
# 	    cm: test5, test6; config: chk_errnr, echeck, environment
# 	    fs: Makefile, READ_ME, err1, err2, longalpha, longfox
# 	    fs: longmix, prog1.c, rtest1, shortalpha, shortfox, shortmix
# 	    fs: test1, test10, test2, test2b, test2s, test3, test4
# 	    fs: test5, test6, test7, test8, test9
# 	    fts: Makefile, check, etest.sed, etest1, etest2, etest3
# 	    fts: etest4, etest5, etest6, rtest1, rtest2, runrtests
# 	    fts: runtests, test1, test10, test11, test12, test13, test2
# 	    fts: test3, test4, test5, test6, test7, test8, test9
# 	    low: Makefile, ctrl.asc, prog11.c, prog12.c, prog14.c
# 	    low: prog3a.c, prog8.c, prog9.c, rtest1, rtest2, styl.asc
# 	    low: test1, test10, test11, test12, test13, test14, test2
# 	    low: test3, test4, test5, test6, test7, test8, test9
# 	    naming: Makefile, bostest, fstest, ftstest
# 	    scout: Makefile, test1, test2; setup: Makefile, environment
# 	    ubik: Makefile, READ_ME, init, kills, runc, setup, shows
# 	    ubik: udbg; util: Makefile, sys.c
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 
# 	$TALog: test9,v $
# 	Revision 4.18  1994/11/01  22:21:36  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.17 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	Revision 4.17  1993/11/15  23:02:41  andi
# 	[merge of changes from 4.14 to 4.16 into 4.15]
# 
# Revision 4.16  1993/11/11  21:19:11  comer
# 	A few more places where $(pwd) was being used.  Changed to `pwd`.
# 	[from r4.14 by delta comer-db4664-fix-minor-bos-test-problems, r1.2]
# 
# Revision 4.15  1993/08/24  15:17:54  bwl
# 	More changes for HP port.  Milestone:  got the low tests built;
# 	can run cthon on DFS.  (But not on glued UFS.)
# 
# 	Changes for HP port.
# 	[from r4.14 by delta bwl-o-db3961-port-103-to-HP, r1.11]
# 
# Revision 4.14  1993/01/14  17:33:19  jaffe
# 	revdrop of latest OSF copyright changes to these files
# 	[from r4.13 by delta osf-revdrop-01-12-92, r1.1]
# 
# 	Revision 4.11  1992/11/11  20:16:36  jaffe
# 	Picked up the final changes.
# 	[from revision 4.10 by delta osf-revdrop-11-09-92, r1.2]
# 
# 	[1992/05/20  17:55:29  jaffe]
# 
# $EndLog$
#

###############################################################################
#    Copyright (C) 1991, 1992 Transarc Corporation - All rights reserved      #
###############################################################################

# This test is applicable to DFS running bosserver.
# The script tests the bos process-management commands, using proc1 and
# proc4. It concentrates on error conditions.

###############################################################################

# Usage:                test9

# Typically run via:    test9 >& test9.out
# or via the bos/runtests script.

###############################################################################

# Test environment:
# This test requires DFS server $SERVER_1 to be running bosserver.

# Privilege required:
# You must be authenticated to DCE as someone who's in admin.bos, and
# you must be logged into Unix as local root.

# Highest error number is: 50.

###############################################################################

d=`pwd`
hn=`hostname`
p=`basename $0`
p1="$p:"
rc=0
ty=bos

: ${AUTH_ARG=""}
: ${CELL_NAME=`sed -n '/cellname/s/cellname[         ]*\/\.\.\.\///p' /opt/dcelocal/dce_cf.db`}
: ${CELL_ARG=""}
: ${VERB_ARG=""}
: ${SERVER_1=$hn}
: ${TESTTOP=`pwd`}

: ${bin_dir=/opt/dcelocal/bin}
: ${dns_cell_name=/.../$CELL_NAME}
: ${dns_server_prefix=/.:/hosts/}

PATH=":"$bin_dir":"$PATH
sav_arg="-server $dns_server_prefix$SERVER_1 $AUTH_ARG $VERB_ARG"
sv_arg="-server $dns_server_prefix$SERVER_1 $VERB_ARG"
bos_testhome=$TESTTOP/$ty/tests/procs
outfile=/opt/dcelocal/var/dfs/adm/BosExecOut

echo cat $outfile

baddir=xyzdir
badfile=xyzfile
badserver=fred

#
# Source in functions script
#

. $TESTTOP/util/gen_FunctionsScript

###############################################################################

echo ""
echo "RUNNING bos COMMANDS on SERVER $SERVER_1 in CELL $CELL_NAME."
echo "========================================================================"
date
echo ""

if [ "$CELL_NAME" = "" ] 
then
   echo "Can't find cellname in /opt/dcelocal/dce_cf.db - aborting."
   exit 2
   fi

rm -f $outfile

###############################################################################

#
# Determine if commands can be issued with localauth.
#

DetermineLocalAuth

###############################################################################

echo ""; echo "Initial status:"

echo bos status $sav_arg -long
bos status $sav_arg -long
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E1)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Create process tp40 twice..."

echo bos create -process tp40 -type simple $sav_arg -cmd "$bos_testhome/proc1 5"
bos create -process tp40 $sav_arg -type simple -cmd "$bos_testhome/proc1 5"
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E2)"
  rc=`expr $rc + 1`
fi

echo bos create -process tp40 $sav_arg -type simple -cmd "$bos_testhome/proc1 5"
bos create -process tp40 $sav_arg -type simple -cmd "$bos_testhome/proc1 5"
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E3)"
  rc=`expr $rc + 1`
fi

echo ""; echo "Now stop and delete process tp40..."

echo bos stop -process tp40 $sav_arg -wait
bos stop -process tp40 $sav_arg -wait
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E4)"
  rc=`expr $rc + 1`
fi

echo bos delete -process tp40 $sav_arg
bos delete -process tp40 $sav_arg
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E5)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E6)"
     rc=`expr $rc + 1`
   fi

fi

echo ""; echo "Re-create process tp40..."

echo bos create -process tp40 $sav_arg -type simple -cmd "$bos_testhome/proc1 5"
bos create -process tp40 $sav_arg -type simple -cmd "$bos_testhome/proc1 5"
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E7)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E8)"
     rc=`expr $rc + 1`
   fi

fi

###############################################################################

echo ""; echo "Attempt to delete process tp40 before stopping it..."

echo bos delete -process tp40 $sav_arg
bos delete -process tp40 $sav_arg
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E9)"
  rc=`expr $rc + 1`
fi

echo bos stop -process tp40 $sav_arg -wait
bos stop -process tp40 $sav_arg -wait
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E10)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E11)"
     rc=`expr $rc + 1`
   fi

fi

echo ""; echo "Now try again to delete tp40 (it's stopped now)..."

echo bos delete -process tp40 $sav_arg
bos delete -process tp40 $sav_arg
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E12)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E13)"
     rc=`expr $rc + 1`
   fi

fi

###############################################################################

echo ""; echo "Attempt to delete process tp40, which doesn't exist..."

echo bos delete -process tp40 $sav_arg
bos delete -process tp40 $sav_arg
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E14)"
  rc=`expr $rc + 1`
fi
echo ""

###############################################################################

echo ""; echo "Attempt to get the status of a non-existent process..."

echo bos status -process tp40 $sav_arg 
bos status -process tp40 $sav_arg 
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E23)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Use invalid time formats in the setrestart subcommand..."

echo bos setrestart $sav_arg -general 25:00
bos setrestart $sav_arg -general 25:00
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E24)"
  rc=`expr $rc + 1`
fi

echo bos setrestart $sav_arg -newbinary 26:00
bos setrestart $sav_arg -newbinary 26:00
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E25)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Manipulate a process with a long name..."

echo bos create $sav_arg -proc abcdefghijklmnopqrstuvwxyz0123456789 \
   -type simple -cmd "$bos_testhome/proc1 5"
bos create $sav_arg -proc abcdefghijklmnopqrstuvwxyz0123456789 \
    -type simple -cmd "$bos_testhome/proc1 5"
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E26)"
  rc=`expr $rc + 1`
fi

echo bos stop -process abcdefghijklmnopqrstuvwxyz0123456789 $sav_arg -wait
bos stop -process abcdefghijklmnopqrstuvwxyz0123456789 $sav_arg -wait
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E27)"
  rc=`expr $rc + 1`
fi

echo bos delete -process abcdefghijklmnopqrstuvwxyz0123456789 $sav_arg
bos delete -process abcdefghijklmnopqrstuvwxyz0123456789 $sav_arg
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E28)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E29)"
     rc=`expr $rc + 1`
   fi

fi


###############################################################################

echo ""; echo "Use an invalid server name in the status subcommand..."

echo bos status -server $dns_server_prefix$badserver $AUTH_ARG
bos status -server xyz
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E30)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Attempt to restart a non-existent process..."

echo bos restart -process tp40 $sav_arg 
bos restart -process tp40 $sav_arg 
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E31)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Use various invalid arguments in the create subcommand..."

echo bos create -proc tp41 -type garbage $sav_arg  -cmd "$bos_testhome/proc4 tag8 10"
bos create -proc tp41 -type garbage $sav_arg -cmd "$bos_testhome/proc4 tag8 10"
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E32)"
  rc=`expr $rc + 1`
fi

echo bos create -proc tp43 -type fs $sav_arg -cmd "$bos_testhome/proc4 tag10 10"
bos create -proc tp43 -type fs $sav_arg -cmd "$bos_testhome/proc4 tag10 10"
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E33)"
  rc=`expr $rc + 1`
fi

echo bos create -proc -tp45 simple $sav_arg -cmd "$bos_testhome/proc4 tag12 10"
bos create -proc -tp45 simple $sav_arg -cmd "$bos_testhome/proc4 tag12 10"
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E34)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E35)"
     rc=`expr $rc + 1`
   fi

fi

###############################################################################

echo ""; echo "Use the options -noauth $localAuth "

echo bos create -proc tp46 -type simple $sav_arg  -cmd "$bos_testhome/proc4 tag13 10"
bos create -proc tp46 -type simple $sav_arg -cmd "$bos_testhome/proc4 tag13 10"
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E36)"
  rc=`expr $rc + 1`
fi

echo ""
echo bos create -proc tp47 -type simple $sav_arg -cmd "$bos_testhome/proc4 tag14 10"
bos create -proc tp47 -type simple $sav_arg  -cmd "$bos_testhome/proc4 tag14 10"
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E37)"
  rc=`expr $rc + 1`
fi

sleep 5

echo bos stop -proc tp46 $sav_arg -wait
bos stop -proc tp46 $sav_arg -wait
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E38)"
  rc=`expr $rc + 1`
fi

echo bos stop -proc tp47 $sav_arg -wait
bos stop -proc tp47 $sav_arg -wait
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E39)"
  rc=`expr $rc + 1`
fi

#
# Test noauth
#
echo bos delete -proc tp46 $sv_arg -noauth
bos delete -proc tp46 $sv_arg -noauth
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E40)"
  rc=`expr $rc + 1`
fi

#
# Delete tp46 from BosConfig finally
#

echo bos delete -proc tp46 $sv_arg 
bos delete -proc tp46 $sv_arg 
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E41)"
  rc=`expr $rc + 1`
fi

#
# Test localauth on servers only. On clients localAuth="".
# So the commands should be safe.
#

echo bos delete -proc tp47 $sv_arg $localAuth
bos delete -proc tp47 $sv_arg $localAuth
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E42)"
  rc=`expr $rc + 1`
fi

if [ "$VERB_ARG" != "" ] 
then

   echo; echo "Current status:"
   echo bos status $sav_arg -long
   bos status $sav_arg -long
   if [ $? -ne 0 ] 
then
     echo "- failed ($p1 E43)"
     rc=`expr $rc + 1`
   fi

fi


###############################################################################

echo ""; echo "Use invalid names in the getdates subcommand..."

echo bos getdates -file $badfile $sav_arg 
bos getdates -file $badfile $sav_arg 
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E44)"
  rc=`expr $rc + 1`
fi

echo bos getdates -dir $baddir -file $badfile $sav_arg 
bos getdates -dir $baddir -file $badfile $sav_arg 
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E45)"
  rc=`expr $rc + 1`
fi

###############################################################################

echo ""; echo "Use a non-existent server name..."

echo bos start -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG 
bos start -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E46)"
  rc=`expr $rc + 1`
fi

echo bos stop -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG -wait
bos stop -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG -wait
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E47)"
  rc=`expr $rc + 1`
fi

echo bos startup -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG
bos startup -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E48)"
  rc=`expr $rc + 1`
fi

echo bos shutdown -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG
bos shutdown -proc tp48 -server $dns_server_prefix$badserver $AUTH_ARG
if [ $? -eq 0 ] 
then
  echo "- worked ($p1 E49)"
  rc=`expr $rc + 1`
fi

echo; echo "Final status:"
echo bos status $sav_arg -long
bos status $sav_arg -long
if [ $? -ne 0 ] 
then
  echo "- failed ($p1 E50)"
  rc=`expr $rc + 1`
fi

###############################################################################

rm -f $outfile

sync; sync; sleep 2

echo ""; echo "Done at `date`."; echo ""
if [  $rc -eq 0 ] 
then
   echo "$ty/$p PASSED"
   else
   echo "$ty/$p FAILED ($rc errors)"
   fi
exit $rc

###############################################################################

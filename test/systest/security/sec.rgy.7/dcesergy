#!/bin/ksh 
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: dcesergy,v $
# Revision 1.1.8.2  1996/03/11  02:48:33  marty
# 	Update OSF copyright years
# 	[1996/03/10  20:09:21  marty]
#
# Revision 1.1.8.1  1995/12/11  22:46:45  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/3  1994/10/12  20:51 UTC  bissen
# 	Merge Hpdce02_04 to HPDCE02 branch
# 	[1995/12/11  22:22:09  root]
# 
# Revision 1.1.4.3  1994/09/29  19:31:55  petero
# 	Use variable for server wait
# 	[1994/09/29  19:30:42  petero]
# 
# 	Sleep for 30 seconds after test server is started
# 	[1994/09/29  17:32:03  petero]
# 
# 	HP revision /main/HPDCE02/2  1994/08/23  15:05 UTC  bissen
# 	Merge from Hpdce02_01
# 
# Revision 1.1.4.2  1994/07/08  18:43:23  petero
# 	Modify dcsergy to run in client/server mode
# 	[1994/07/08  18:08:21  petero]
# 
# 	HP revision /main/HPDCE02/1  1994/07/05  15:37 UTC  bissen
# 	Merge hpdce02 (DCE 1.1 beta) and HPDCE01 into HPDCE02
# 
# 	HP revision /main/HPDCE01/1  1994/04/12  15:22 UTC  truitt
# 
# 	HP revision /main/truitt_junk/1  1994/04/12  15:16 UTC  truitt
# 	clean up reference to profile
# 
# Revision 1.1.2.1  1993/11/03  18:09:14  qbarry
# 	Runs many copies simultaneously in the same cell.
# 	[1993/11/03  17:28:45  qbarry]
# 
# 	Did all the modifications necessary to make this file run under
# 	RUN.SEC.  Also, renamed this file to be DCESERGY, making it consistent
# 	with the other security system test names.  Changes included: Got rid
# 	of a fair amount of obsolete stuff.  Made some output changes to
# 	eliminate the words FAIL and ERROR.  Took out the infinite loop flag.
# 	Made the internal time loop accept decimal hours.  Renamed some
# 	variables.  Fixed a bug where it was not deleting registry entries or
# 	creds it created.  Renamed SECRGY.CFG to DCESERGY.DATA.
# 	[1993/11/03  17:21:51  qbarry]
# 
# 	    Loading drop DCE1_0_2FNL
# 	[1993/05/04  22:23:05  mgm]
# 
# Revision 1.1.59.3  1993/10/20  21:59:10  ohara
# 	svr4 changes
# 	[1993/10/20  21:58:40  ohara]
# 
# Revision 1.1.59.2  1993/09/14  18:28:59  cmckeen
# 	Updated paths to find profile.dcest.tet and common_functions
# 	[1993/09/14  18:28:40  cmckeen]
# 
# Revision 1.1.59.1  1993/09/09  19:56:24  cmckeen
# 	 HP's TET'ized version
# 	[1993/09/09  19:51:12  cmckeen]
# 
# Revision 1.1.4.3  1993/07/06  18:31:16  eheller
# 	Modified the directory of the sourced common_functions file.
# 	[1993/07/06  18:29:47  eheller]
# 
# Revision 1.1.4.2  1993/07/02  16:31:17  eheller
# 	GAMMERA version which runs under TET.
# 	[1993/07/02  16:14:35  eheller]
# 
# Revision 1.1.2.2  1993/03/25  19:19:09  eperkins
# 	Sample test driver, initial version.
# 	[1993/03/25  19:18:32  eperkins]
# 
# $EndLog$

iclist="ic1"
ic1="tp1"
tet_testlist="tp1"
tet_startup="startup"
tet_cleanup="cleanup"

startup()
{

	# create the accounts
	./secrgy_setup -n $SERV_PRINC -p $SERV_PWD
	if [ $? != 0 ]
	then
	        for test_purp in $tet_testlist
        	do
            		tet_delete $test_purp "startup(): secrgy_setup has failed."
        	done
		return
	fi

	# start the server
        $TET_ROOT/system/tools/su.dce cell_admin -p -dce- -c "./secrgy_server -n $SERV_PRINC -p $SERV_PWD" &
        BK_COUNT=0

        # These lines get secrgy_server's pid

        until ( ps -ef |grep secrgy_server > /dev/null )
        do
                sleep 1
                BK_COUNT=`expr $BK_COUNT + 1`
                if [ $BK_COUNT -eq 120 ]        # Give it 120 seconds to start.
                then
                        tet_infoline "Cannot start secrgy_server"
                	for test_purp in $tet_testlist
	                do
	                        tet_delete $test_purp "startup(): secrgy_server has failed."
	                done
			return
                fi
        done

	sleep $SERVER_WAIT

}

myecho()
{
	tet_infoline $1
	echo $1
}

call_tm()
{
cat $1 | awk '
	BEGIN { count = 0 ; call_time = 0 }
	$10 ~ /[0-9]+.[0-9]+/ { call_time +=  $10; count += 1 }
	END {
		if ( count > 0 ) {
			avg = call_time/count 
			if ( old_avg > 0 )
				printf("%.3g\n", (avg + old_avg)/2 )
			else
				printf("%.3g\n", avg)
			}
}' old_avg=$2
} 


login_call()
{
SERVER=$1
MACH=$2
RUN_TOT=0
OPS=0

	
	myecho "Running login on ${MACH} ${RSH_COMM}"
	
	remjou="${STTMPDIR}/sergy7.${MACH}.journal"

	rm -f ${remjou}

	myecho "${RSH_COMM} ${MACH} $TET_ROOT/system/security/ts/sec.rgy.7/secrgy_client -n ${SERVER} -p $SERV_PWD -s $SERV_PRINC -r $THD_NUM -i $CN >> ${remjou}"

	${RSH_COMM} ${MACH} "$TET_ROOT/system/security/ts/sec.rgy.7/secrgy_client -n ${SERVER} -p $SERV_PWD -s $SERV_PRINC -r $THD_NUM -i $CN" >> ${remjou}

	cp -p ${remjou} $SECRGY_OUT

      if [ -f $SECRGY_OUT ]
      then
      	cat $SECRGY_OUT |
	while read line
	do
		if echo $line | grep "Client ${SERVER}" 
		then
			OPS=`echo $line | cut -d" " -f7`
			OPS_TOTAL=`expr $OPS_TOTAL + $OPS`
			RUN_TOT=`expr $RUN_TOT + $OPS`
			echo $line >> $LOG
		fi
	done
      fi
      export TEMP=`call_tm $SECRGY_OUT $TEMP`   	
      if [ "$DEBUG" -eq 0 ]
      then
	echo "" >  $SECRGY_OUT
      fi
      if [ "$RUN_TOT" -lt "$THD_NUM" ]
      then 
	FAILS=`expr $THD_NUM - $RUN_TOT`	
      	TOTAL_FAILS=`expr $TOTAL_FAILS + $FAILS`
      fi		

      export TOTAL_OPS=`expr $TOTAL_OPS + $THD_NUM`
      date
      date >> $LOG
      myecho "Cumulative cell login-logout time avg: $TEMP sec"
      myecho "Cumulative pass/not pass: $OPS_TOTAL/$TOTAL_FAILS"
      echo "Cumulative cell login-logout time avg: $TEMP sec" >> $LOG
      echo "Cumulative pass/not pass: $OPS_TOTAL/$TOTAL_FAILS" >> $LOG 
} 

acct_call()
{
  SERVER=$1
  MACH=$2
  SECRGY_USER=${MACH}_${PID}
  if [ "$ADD" = "true" ]
  then
	myecho "Running acct add on ${MACH} ${RSH_COMM}"
	remjou="${STTMPDIR}/sergy7.${MACH}.journal"

	rm -f ${remjou}

	if ${RSH_COMM} ${MACH} "$TET_ROOT/system/security/ts/sec.rgy.7/secrgy_client -n $SERVER -p $SERV_PWD -s $SERV_PRINC -u $SECRGY_USER -j $ACCT_NUM -i $CN | grep account" > ${remjou}

      then
	cp -p ${remjou} $SECRGY_OUT
        cat $SECRGY_OUT
	cat $SECRGY_OUT >> $LOG
        echo "" > $SECRGY_OUT 
	if [ -n "$OPS_TOTAL" ]
	then
		OPS_TOTAL=`expr $OPS_TOTAL + 1`
	fi
      else
	if [ -n "$TOTAL_FAILS" ]
	then
		TOTAL_FAILS=`expr $TOTAL_FAILS + 1`
	fi
      fi
   else 
   if [ "$DELETE" = "true" ]
   then
	myecho "Running acct del on ${MACH} ${RSH_COMM}"

	remjou="${STTMPDIR}/sergy7.${MACH}.journal"
	rm -f ${remjou}

	if ${RSH_COMM} ${MACH} "$TET_ROOT/system/security/ts/sec.rgy.7/secrgy_client -n $SERVER -p $SERV_PWD -s $SERV_PRINC -k $SECRGY_USER -j $ACCT_NUM -i $CN | grep account" > ${remjou}
      then
	cp -p ${remjou} $SECRGY_OUT
        cat $SECRGY_OUT
	cat $SECRGY_OUT >> $LOG
        echo "" > $SECRGY_OUT 
        if [ -n "$OPS_TOTAL" ]
        then
                OPS_TOTAL=`expr $OPS_TOTAL + 1`
        fi
      else
        if [ -n "$TOTAL_FAILS" ]
        then
                TOTAL_FAILS=`expr $TOTAL_FAILS + 1`
        fi
      fi
    fi
   fi
   date
   myecho "Cumulative pass/not pass: $OPS_TOTAL/$TOTAL_FAILS"
   date >> $LOG
   echo "Cumulative pass/not pass: $OPS_TOTAL/$TOTAL_FAILS" >> $LOG 
} 

tp1()
{

TOTAL_OPS=0

if [[ -n "$internal_loop_hours" ]]
then
        x=`awk "BEGIN { printf (\"%d\", 3600 * $internal_loop_hours); exit; }"`
        ((RUN_T=$x+$SECONDS))
else
        RUN_T=0
fi

if [ -z "$internal_loops" ]
then
        internal_loops=0
fi

if [ -z "$CELLS" ]
then
        CELLS=`getcellname`
        myecho "Using cell list:$CELLS"
        if [ -z "$CELLS" ]
        then
                myecho "The cell list is null"
		tet_result FAIL
		return
        fi
fi

PID=$$
LOG=${LOG:-"/tmp/secrgy_out$PID"}
SECRGY_OUT="/tmp/tmp_secrgy_out$PID"
FAIL_STAT=0
DEBUG=${DEBUG:-0}
THD_NUM=${THD_NUM:-1}
BASE_NM=${BASE_NM:-`uname -n`}
CN=ncacn_ip_tcp
export FAIL_STAT PID DEBUG THD_NUM CN SECRGY_OUT LOG
touch $LOG

PRINC_NUM=1
myecho "Server principal name $SERVERS"

if [ "$SERVERS" = "$SERV_PRINC" ]
then

	for PRINCIPAL in ${SEC_MACHINES}
	do
        	PRINC[$PRINC_NUM]=$PRINCIPAL$PID
		((PRINC_NUM+=1))

	done
else
	for PRINCIPAL in `echo "$SERVERS"`
	do
        	PRINC[$PRINC_NUM]=$PRINCIPAL$PID
		((PRINC_NUM+=1))
	done
fi

MACHINE_NUM=1
for MACH in `echo $SEC_MACHINES`
do
	MACHINE[$MACHINE_NUM]=$MACH
      	((MACHINE_NUM+=1))
done

acc_num=1
# create the accounts
while [ $acc_num -lt $PRINC_NUM ]
do
	USER=${PRINC[$acc_num]}
	./secrgy_client -n $SERV_PRINC -p $SERV_PWD -s $SERV_PRINC -u $USER -j 1 -i $CN 
	((acc_num+=1))
done


PWN=0
myecho "Passwords = $SERVER_PW_LST"
for PW in `echo "$SERVER_PW_LST"`
do
        PW[$PWN]="$PW"
        PWN=`expr $PWN + 1`
done

if [ "$PRINC_NUM" -gt "PWN" ]
then
        while [ `expr $PRINC_NUM - $PWN` -gt 0 ]
        do
                PWN=`expr $PWN + 1`
                PW[$PWN]=" -dce-"
        done
fi

export PS=0 TOTAL_FAILS=0 OPS_TOTAL=0 CALLS=0

export PRINC_NUM PWN PRINC PW
PRINC_COUNT=$PRINC_NUM
export PRINC_COUNT 

while [[ "$internal_loops" -gt 0 || "$RUN_T" -gt $SECONDS ]]
do
  for CELL in `echo "$CELLS"`
  do
    export CELL
    PRINC_NUM=1
    while [ "$PRINC_NUM" -lt "$PRINC_COUNT" ]
    do
      	touch $SECRGY_OUT
      	login_call ${PRINC[$PRINC_NUM]} ${MACHINE[$PRINC_NUM]}
     	ADD="true"; DELETE="false"
      	# setup for long run add and delete command line number of principals
      	if acct_call ${PRINC[$PRINC_NUM]} ${MACHINE[$PRINC_NUM]}
      	then 
		DELETE="true"; ADD="false"
      		acct_call ${PRINC[$PRINC_NUM]} ${MACHINE[$PRINC_NUM]}
     	 fi	
     	 ((PRINC_NUM+=1))
    done 
    # principal loop end	
  done 
  # cell loop end
  ((internal_loops-=1))
done
# main loop end

acc_num=1
# delete the accounts
while [ "$acc_num" -lt "$PRINC_COUNT" ]
do
	./secrgy_client -n $SERVER -p $SERV_PWD -s $SERV_PRINC -k ${PRINC[$acc_num]} -j 1 -i $CN 
        acc_num=`expr $acc_num + 1`
done

if [ -f $SECRGY_OUT ]
then
	rm $SECRGY_OUT
fi

if [ $TOTAL_FAILS != 0 ]
then
	tet_result FAIL
else
	tet_result PASS
fi

}

cleanup()
{
	echo "Cleaning up..."
	# kill server
	killproc secrgy_server

        # Use a feature of dce_login that allows authentication from a shell script
        if [ -f /usr/bin/dce_login -a ! -f /usr/bin/dce_login_noexec ]
        then
                ln -s /usr/bin/dce_login /usr/bin/dce_login_noexec >/dev/null
        fi

        KRB5CCNAME=`dce_login_noexec cell_admin -dce-`
        export KRB5CCNAME

	# delete registry entries
	rgy_edit -update <<-EOF
		do p
		del $SERV_PRINC
		q
		EOF
	if [[ $? != 0 ]]
	then
		myecho "WARNING: unable to delete $SERV_PRINC from registry"
	fi

	kdestroy	
}
	

. $TET_ROOT/profile.dcest
. ./dcesergy.data
. $TET_ROOT/rpc/ts/common_functions
. $TET_ROOT/lib/ksh/tcm.ksh

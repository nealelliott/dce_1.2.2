# @OSF_FREE_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# COPYRIGHT NOTICE
# Copyright (c) 1993, 1992, 1991, 1990, 1996 Open Software Foundation, Inc.
# Permission is hereby granted to use, copy, modify and freely distribute
# the software in this file and its documentation for any purpose without
# fee, provided that the above copyright notice appears in all copies and
# that both the copyright notice and this permission notice appear in
# supporting documentation.  Further, provided that the name of Open
# Software Foundation, Inc. ("OSF") not be used in advertising or
# publicity pertaining to distribution of the software without prior
# written permission from OSF.  OSF makes no representations about the
# suitability of this software for any purpose.  It is provided "as is"
# without express or implied warranty.
#
# HISTORY
# $Log: README,v $
# Revision 1.2.10.2  1996/03/11  12:31:34  marty
# 	Update OSF copyright years
# 	[1996/03/11  12:29:54  marty]
#
# Revision 1.2.10.1  1995/12/11  20:15:40  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  19:48:40  root]
# 
# Revision 1.2.8.1  1994/06/10  20:44:56  devsrc
# 	cr10872 - fixed copyright
# 	[1994/06/10  17:16:40  devsrc]
# 
# Revision 1.2.5.1  1993/11/03  12:38:00  weir
# 	Replacing wrong with right text
# 	[1993/11/03  12:36:33  weir]
# 
# Revision 1.2.3.4  1993/10/29  13:19:54  weir
# 	Test submit -- no change
# 	[1993/10/29  13:19:02  weir]
# 
# 	Updated for DCE 1.0.3
# 	[1993/10/28  20:38:09  weir]
# 
# Revision 1.2.2.3  1993/02/04  20:32:11  cjd
# 	Embedded copyright notice
# 	[1993/02/04  20:29:17  cjd]
# 
# Revision 1.2.2.2  1992/12/18  18:17:47  marcyw
# 	Defect 4998: adding disclaimer comment
# 	[1992/12/18  18:11:43  marcyw]
# 
# Revision 1.2  1992/01/19  22:14:27  devrcs
# 	Dropping DCE1.0 OSF1_misc port archive
# 
# $EndLog$
#
# * The Example code is provided to you as "Pass-through Code".
# * Pass-through Code and its related Documentation are not warrented,
# * supported, or indemnified by OSF, and are provided "AS IS".
# * You can use, sublicense, or disribute the same at your own risk.
#
#  OSF DCE Version 1.0 


[Note: the following text is derived from Chapter 3 of the OSF DCE
       Application Development Guide.]


				 TIMOP
		DCE Time Operations Sample Application

The timop program is a tutorial DCE application example.  It exercises
the basic DCE technologies: threads, RPC, security, directory and time.
It doesn't try to be particularly careful -- industrial-strength
programs do better fault management, use getopt(), have a nice Motif
interface, are internationalized, are performance tuned, etc., etc.,
none of which are really important for this tutorial.  timop just tries
to do things in a straightforward illustrative way (insofar as that is
possible given the complexity of the technologies involved!).

We assume, of course, that you have a DCE cell up and running.  This
means, in particular, your system must support thread-safe system
interfaces (e.g., printf()).  You must also be registered as a DCE
principal (or at least know the password of a principal) in your cell in
order to do authenticated RPCs, and you must be authorized to use
certain of the cell's facilities (e.g., execute rgy_edit, and place
objects in the namespace).

What timop does is the following.  It has two parts, a client and a
server, implemented by the timop_client and timop_server processes.  The
server manages just one operation: to get the span of time it takes the
server do a certain job (the particular job our server does is calculate
the factorial of a random number specified by the client, but it could
be anything).  The client spawns a bunch of threads, which make parallel
RPC service calls to designated servers.  The namespace is used to
identify the servers and to mediate the RPC binding between client and
servers.  The client prints out the name, invocation order and time
spans reported by the servers, and the random numbers it asked the
servers to take the factorial of.  It also prints out a total time span
that encompasses all the job events at the servers, and the sum of the
random numbers.  We use only UDP, as a least common denominator
transport provider.  We use authentication and integrity-secure RPC to
make sure the communicated data is right, and we use a tiny bit of
authorization (named-based, not ACLs).  Note that, in general, all the
server and client clocks are different physical clocks, but they are all
commensurable with one another because they're synchronized by the time
service.  Finally, we do all our work in UTC with TDF = 0 (the "Z"
("Zulu") or "UTC Reference" time zone, corresponding to and generally
equivalent with the classical UT GMT time zone), not local civil time,
because the client(s) and server(s) may be in different time zones.

Since timop uses the security service, the timop clients and servers
must run as security principals.  But, consistent with the tutorial
goals of this example, we make just a minimal usage of security. We run
timop_client as a principal named "tclient", and timop_server as a prin-
cipal named "tserver"; these names can be changed to suit your taste
by modifying timop_aux.h (for example, both tclient and tserver could be
the programmer exploring this example).  We use the default login contexts
of tclient and tserver (i.e., when you execute timop_client or timop_server
you must be dce_login'd as the principal tclient or tserver, respectively),
and we run timop_server with the key of tserver (i.e., you need to install
the key of tserver into the key file, say /tmp/tkeyfile, which you should
have exclusive read/write permission to -- this is taken care of in the
ktadd step given in the section "Installing timop" below.)

Finally, we just use a simple-minded form of authorization, based on
principal names, not ACLs; it is an "exercise for the programmer" to
implement an ACL manager and use ACL-based authorization.  Default source
code for ACL management is supplied with the DCE, but to have used it in this
example would have been to allow the tail to wag the dog.

Files are:

	README			-- this file
	Makefile		-- ODE Makefile for installing timop
	Makefile_timop          -- generic Makefile for building timop
	timop.idl		-- the IDL file
	timop.acf		-- the ACF file
	timop_aux.h		-- auxiliary header file
	timop_client.h		-- client header file
	timop_client.c		-- client program
	timop_server.h		-- server header file
	timop_server.c		-- server program
	timop_manager.c		-- manager routines
	timop_refmon.c		-- server reference monitor

("Manager" is generic RPC terminology for that piece of the server that
actually handles the remote operation.  In the usual practice as
illustrated here, the "server.c" is pretty much boilerplate for getting
a server up and running the way we want it, and the "manager.c" is the
hard application code.)

To build timop on your platform, simply type:

    make -f Makefile_timop

You should read the comments of the Makefile first in to determine if there
are any flags or options that should be un-commented in order to build on
your platform.

Note that you must install the DCE Application Development Environment (which
includes the IDL compiler) in order to build timop. This is done by running
dce_config; for more information, see the OSF DCE Administration Guide --
Introduction.


INSTALLING TIMOP

Before you can run timop, you must first install timop_client and timop_server
on the machines you want to use. This involves performing the following steps:


  1. Adding the client and server principals to the Security registry.

  2. Creating a keyfile to be used by the server.

  3. Creating a CDS namespace entry for the server to export its binding infor-
     mation to (and for the clients to import binding information from).

  4. Setting up the correct permissions on the namespace entry to allow the
     server to use it (i.e., write to it) correctly.


Assuming that the server's principal name will be tserver and that the
client's principal name will be tclient (these are specified as constants
in the timop_aux.h file), you should perform these steps as follows:

  1. Login as the cell administrator:

      $ dce_login cell_admin -dce-

     You must first login as the cell administrator in order to be able to
     execute the following registry operations. Note that the password at
     your site will be different from that given above (as the last parameter).
     For further information about the use of dce_login, see the OSF DCE User's
     Guide and Reference.

  2. Add the server and client principals to the registry, and set up the
     server's keyfile:

      $ rgy_edit
      $ Current site is: registry server at /.../your_cell/subsys/dce/sec/master
      rgy_edit=> domain principal
      Domain changed to: principal
      rgy_edit=> add tserver
      rgy_edit=> add tclient
      rgy_edit=> domain account
      Domain changed to: account
      rgy_edit=> add tserver -g none -o none -pw qwerty -mp -dce-
      rgy_edit=> add tclient -g none -o none -pw xyzzy -mp -dce-
      rgy_edit=> ktadd -p tserver -pw qwerty -f /tmp/tkeyfile
      rgy_edit=> quit
      bye.

     Note that qwerty and xyzzy in the examples above are the passwords
     that you assign to the server and client, respectively. You can substitute
     any other values that you wish, but be sure to remember what the values
     were: you will need to use them in order to dce_login before executing the
     client and server programs. For further information about rgy_edit, see the
     OSF DCE Administration Guide -- Core Components, the OSF DCE Administration
     Reference, and the OSF DCE User's Guide and Reference.

     The name of the server's keyfile, /tmp/tkeyfile, is specified by the value
     of the KEYFILE constant in the timop_server.h file; the name you give to the
     ktadd sub-command must be identical to the value of this constant. Although
     the timop server does not, as coded, maintain its own identity (it simply runs
     as the principal identity that invoked it), the keyfile is needed in the
     rpc_server_register_auth_info() call, which sets up the authentication para-
     meters for clients contacting it.

  3. Create the CDS entry that will be used to hold the server's binding
     information:

      $ rpccp add entry /.:/t_entry

     Of course, you can substitute any legal CDS name for t_entry. For further
     information about rpccp, see the OSF DCE Administration Guide -- Core
     Components, and the OSF DCE Administration Reference.

  4. Set up the ACL on the entry to allow access to the server:

      $ acl_edit -e /.:/t_entry -m user:tserver:rwdtc

     Note that tserver is the principal name used in the previous steps,
     and must be identical to the value of the SERVER_PRINC_NAME constant
     in timop_aux.h. For further information about acl_edit, see
     the OSF DCE User's Guide and Reference.

  5. Relinquish your cell_admin identity:

      $ exit

You have now installed timop.


RUNNING TIMOP

To run timop, you must first start the server, and then invoke one or
more clients to perform the timop operation. This is done as follows.

On the machine on which you want to run the server, enter the following:

    $ dce_login tserver qwerty
    $ ./timop_server /.:/t_entry

You should do this either in the background (&), or in a different window
from the one in which you intend to run the client, or on a separate
terminal.

Note that you have to login as the timop server principal before you
can successfully run timop_server. This is because timop_server
simply assumes that it has been invoked under the correct identity and does
not bother to go through the steps of explicitly acquiring its own login
context and identity. A "real" server would do these things, of course;
but in order to keep timop down to the bare essentials, they have been
left out of timop_server.c.

In the above example, /.:/t_entry is the name in the namespace that you want
this server to "have" (i.e., the name of the CDS entry to which it exports
and by means of which it is, therefore, known to clients). The entry was set
up when you ran the rpccp add entry command earlier; it can have any name of
your choice.

After you have invoked the server, wait until you get the following message:

    Server /.:/t_entry ready.

Now you can invoke the client (either in the same window, if you ran the
server in the background, or in a different window):

    $ exit

--to get rid of your tserver identity, if you are invoking the client
from the same window; then:

    $ dce_login tclient xyzzy
    $ timop_client /.:/t_entry

Note again that you must first login as the timop client principal before
invoking timop_client. The reason for this is the same as was mentioned
above in the server invocation step.

If all has gone well, the timop client will now begin printing out results
continuously, until you stop it (see STOPPING TIMOP below on how to do this).

On multiple machines in the same cell, you can try something like the
following:

    $ timop_server /.:/t_entry                            # on machine A
    $ timop_server /.:/x_entry                            # on machine B
    $ timop_server /.:/y_entry                            # on machine C
    $ timop_client /.:/t_entry /.:/x_entry /.:/y_entry    # on machine D
    $ timop_client /.:/y_entry /.:/x_entry /.:/t_entry    # on machine E

Note that in order to do this, you will have to setup x_entry and
y_entry in the namespace first. You can do this as follows:

    $ dce_login cell_admin -dce-
    $ rpccp add entry /.:/x_entry
    $ rpccp add entry /.:/y_entry
    $ acl_edit -e /.:/x_entry -m user:tserver:rwdtc
    $ acl_edit -e /.:/y_entry -m user:tserver:rwdtc
    $ exit

Note also that if the machines on which the servers are running are not
in the same cell, you must use fully qualified names beginning with /...,
not beginning with /.: as shown above.


STOPPING TIMOP

You must kill clients and servers by hand, either by using the interrupt key
or with a combination of the ps and kill commands. This will leave
server binding information in the endpoint map and namespace, which is normal
for persistent servers. The information can always be removed by hand later on
(with the cdscp and rpccp system administration commands), if
necessary.


MORE FUN WITH TIMOP

After getting everything running, it would be a good exercise for you to
figure out how it all works by modifying timop in various ways and
starting to write your own applications.  Some suggestions (other than
improved error-checking, etc., that were mentioned above):

        - Get timop running over some transports other than UDP.

        - Intentionally introduce some threads race conditions, to
          experiment with the meaning of reentrancy.  While you're at
          it, fix the asctime() bug intentionally left in the code.

        - Parallelize the client in a different way, say by using
          pthread_exit()/pthread_join() instead of
          pthread_cond_signal()/pthread_cond_wait().

        - Just receive one reply from one server, canceling the other
          outstanding jobs when the first reply arrives.

        - Handle server returns from the listen loop, cleaning binding
          info out of the endpoint map and namespace.  You may want to
          experiment with pthread_signal_to_cancel_np() and exceptions
          (TRY/FINALLY/ENDTRY).

        - Create a namespace service group, instead of a collection of
          individually named server instances.

        - Create version 1.1, containing an additional operation that
          implements an additive version of the multiplicative factorial
          job ("n += i" instead of "n *= i").

        - Use context handles and some time service primitives to return
          per-client cumulative job times.

        - Create a server that supports two managers managing two
          implementations of the factorial job, the new implementation
          (which is accessed by a new object UUID) computing the
          factorial in decreasing order.

        - Working with some other users, make the clients and servers
          run under several principal identities.  Or, better, do this
          by having your security administrator create some extra
          identities for you to play with.  (The extra identities are
          also useful in the following exercise.)

        - Implement an ACL manager for the service being offered by
          the servers, and add ACL entries for several principals and
          groups.

        - Instead of the no-op factorial jobs, dream up some application
          that would be really useful in your environment.

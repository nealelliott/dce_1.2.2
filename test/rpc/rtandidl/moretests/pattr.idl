/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY 
 * $Log: pattr.idl,v $
 * Revision 1.1.6.2  1996/03/11  02:27:24  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:59:44  marty]
 *
 * Revision 1.1.6.1  1995/12/11  20:08:16  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:44:19  root]
 * 
 * Revision 1.1.4.1  1993/10/15  15:49:46  tom
 * 	Bug 9128 - second arg to pattrtest_op2 is error_t.
 * 	[1993/10/15  15:48:01  tom]
 * 
 * Revision 1.1.2.5  1993/02/03  18:21:25  cuti
 * 	Add context handle test
 * 	[1993/02/01  22:38:49  cuti]
 * 
 * Revision 1.1.2.4  1993/01/25  18:06:36  bbelch
 * 	Fix duplicate log
 * 	[1993/01/25  17:42:14  bbelch]
 * 
 * Revision 1.1.2.3  1993/01/11  23:38:02  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  18:11:00  bbelch]
 * 
 * Revision 1.1.2.2  1992/10/12  17:09:46  cuti
 * 	Remove hardcoded protocol seq and endpoint instead using all_protoseq.
 * 	[1992/10/09  20:22:28  cuti]
 * 
 * Revision 1.1  1992/01/19  03:36:16  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
#
#
# Copyright (c) 1991 by
#    Hewlett-Packard Company, Palo Alto, Ca.
#
# Permission to use, copy, modify, and distribute this
# software and its documentation for any purpose and without
# fee is hereby granted, provided that the above copyright
# notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting
# documentation, and that the name of Hewlett-Packard Company not
# be used in advertising or publicity pertaining to distribution
# of the software without specific, written prior permission.
# Hewlett-Packard Company makes no representations about the
# suitability of this software for any purpose.  It is provided
# "as is" without express or implied warranty.
#
#
# DCE API Test
#
*/


/*
 * pattrtest
 *
 * Interface pattrtest tests the parameter attributes of NIDL
 * other than [in] and [out]: [comm_status], [ref], and [val] 
 * and context_handle.
 */
 
[uuid(41248b26-9000-0000-0d00-00c366000000),
 version(2) 
]

interface pattrtest {

/* typedef [ptr] struct {
        long int a;
        long int b;
        long int c;
               }*ptrtest;
*/

typedef struct {
        long int a;
        long int b;
        long int c;
               }realstruct;

typedef [ptr] realstruct *ptrtest;
typedef [context_handle] void * my_context;

/*
 *  p a t t r t e s t _ o p 1
 *
 *  Signal an exception with the in value of st; if it's a comm
 *  status it should be returned in st, otherwise it should appear
 *  to the client as a signal.
 */
    void pattrtest_op1
    (
        [in] handle_t h,
        [in, out] error_status_t *st_out
    );

/*
 *  p a t t r t e s t _ o p 2
 *
 *  Signal an exception with the code in st_in; if it's a comm
 *  status it should be returned in st_out, otherwise it should
 *  appear to the client as a signal.
 */
    void pattrtest_op2
    (
        [in] handle_t h,
        [in] error_status_t st_in,
        [out] error_status_t *st_out
    );
    
/*
 * p a t t r t e s t _ o p 3
 *
 * Test [in] parameters passed by reference.
 */
void pattrtest_op3(
    [in] handle_t h,
    [in, ref] long int *i,
    [out] long int *o
    );
    
/*
 * p a t t r t e s t _ o p 4
 *
 * Test [out] parameters passed as a full ptr (using filled in pointers).
 */
void pattrtest_op4(
    [in] handle_t h,
    [in, out, ptr] ptrtest *i,
    [in] long int *garbage
    );
    
/*
 * p a t t r t e s t _ o p 5
 *
 * Test [out] parameters passed as a full ptr (using null and non-null pointers).
 */
void pattrtest_op5(
    [in] handle_t h,
    [in, out, ptr] ptrtest *i,
    [in] long int *garbage
    );
    
/*
 * p a t t r t e s t _ o p 6
 *
 * Test [out] parameters passed as a full ptr (returning a null pointer).
 */
void pattrtest_op6(
    [in] handle_t h,
    [in, out, ptr] ptrtest *i,
    [in] long int *garbage
    );   
   
/*
 * Context handle setup 
 *
 */

void ch_op1( 
		[in] handle_t h,
		[out] my_context * this_object
	); 
     
/*
 * context handle cleanup
 *
 */

void ch_op2(
	[in] handle_t h,
	[in] my_context this_object, 
	[out] error_status_t	*st
	);

}


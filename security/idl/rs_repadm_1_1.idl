/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1995, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: rs_repadm_1_1.idl,v $
 * Revision 1.1.4.3  1996/03/09  23:28:44  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:44:10  marty]
 *
 * Revision 1.1.4.2  1995/12/08  17:35:46  root
 * 	Submit OSF/DCE 1.2.1
 * 
 * 	HP revision /main/HPDCE02/1  1995/05/15  21:35 UTC  greg
 * 	security migration merge
 * 	[1995/12/08  16:55:40  root]
 * 
 * $EndLog$
 */

/*
 * Copyright (c) Hewlett-Packard Company 1995
 * Unpublished work. All Rights Reserved.
 */
/*
 *      Registry server administration operations.
 */

[
    uuid(5b8c2fa8-b60b-11c9-be0f-08001e018fa0),
    version(1.1),
    pointer_default(ptr)
]
interface rs_repadm {

    import  "dce/rgynbase.idl";
    import  "dce/rplbase.idl";

    /*
     *  r s _ r e p _ a d m i n  _ s t o p 
     *
     *  Stop the replica identified by this handle.
     */
    void rs_rep_admin_stop (
        [in]    handle_t            h,
        [out]   error_status_t      *status
    );

    /*
     *  r s _ r e p _ a d m i n _ m a i n t
     *
     *  Put replica in or out of maintenance mode.
     */
    void rs_rep_admin_maint(
        [in]    handle_t            h,
        [in]    boolean32           in_maintenance,
        [out]   error_status_t      *status
    );

    /*
     *  r s _ r e p _ a d m i n _ m k e y
     *
     *  Change the master key and re-encrypt the database
     */
    void rs_rep_admin_mkey(
        [in]    handle_t            h,
        [out]   error_status_t      *status
    );


    /*
     *  r s _ r e p _ a d m i n _ i n f o
     *
     *  Get basic information about a replica such
     *  as its state, uuid, latest update sequence
     *  number and timestamp, and whether it is the master.
     *  Also get the replica's information about the master's 
     *  uuid and the sequence number when the master was 
     *  designated.
     */
    void rs_rep_admin_info(
        [in]    handle_t            h,
        [out]   rs_replica_info_t   *rep_info,
        [out]   error_status_t      *status
    );
    
    /*
     *  r s _ r e p _ a d m i n _ i n f o _ f u l l
     *
     *  Get complete information about a replica such
     *  as its state, uuid, protocol towers, latest
     *  update sequence number and timestamp, and whether 
     *  it is the master.  
     *  Also get the replica's information about the master's 
     *  uuid, protocol towers, and the sequence number when 
     *  the master was designated.
     */
    void rs_rep_admin_info_full(
        [in]    handle_t                h,
        [out]   rs_replica_info_t       *rep_info,
        [out]   rs_replica_twr_vec_p_t  *rep_twrs,
        [out]   rs_replica_twr_vec_p_t  *master_twrs,
        [out]   error_status_t          *status
    );
    
    /*
     *  r s _ r e p _ a d m i n _ d e s t r o y
     *
     *  a drastic operation which tells a replica
     *  to destroy its database and exit
     */
    void rs_rep_admin_destroy(
        [in]    handle_t            h,
        [out]   error_status_t      *status
    );

    /*
     *  r s _ r e p _ a d m i n _ i n i t _ r e p l i c a
     *
     *  (re-)initialize the slave identified by "rep_id"
     *
     *  master-only operation.
     */
    void rs_rep_admin_init_replica(
        [in]    handle_t            h,
        [in]    uuid_p_t            rep_id,
        [out]   error_status_t      *status
    );

    /*
     *  r s _ r e p _ a d m i n _ c h a n g e _ m a s t e r
     *
     *  change the master to "new_master_id".
     *  The master gracefully passes its
     *  replica list state and propq to
     *  the new master.
     *
     *  master-only operation.
     */
    void rs_rep_admin_change_master(
        [in]    handle_t            h,
        [in]    uuid_p_t            new_master_id,
        [out]   error_status_t      *status
    );

    /* 
     *  r s _ r e p _ a d m i n _ b e c o m e _ m a s t e r
     *
     *  a drastic operation to make a slave
     *  become the master because the master
     *  has died.  
     *  Normally the rs_rep_admin_change_master 
     *  operation is used to designate a new 
     *  master; this operation can cause updates 
     *  to be lost.
     */
    void rs_rep_admin_become_master(
        [in]    handle_t            h,
        [out]   error_status_t      *status
    );

    /*
     *  r s _ r e p _ a d m i n _ b e c o m e _ s l a v e
     *
     *  a drastic operation to make a replica
     *  which thinks it's the master become a
     *  slave.
     */
    void rs_rep_admin_become_slave(
        [in]    handle_t            h,
        [out]   error_status_t      *status
    );


}


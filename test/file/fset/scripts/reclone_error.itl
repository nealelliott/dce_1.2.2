*
* @OSF_COPYRIGHT@
* COPYRIGHT NOTICE
* Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
* ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
* the full copyright text.
*
* HISTORY
* $Log: reclone_error.itl,v $
* Revision 1.1.134.1  1996/10/17  18:21:43  damon
* 	Submitting on behalf of Transarc
* 	[1996/10/17  16:51:27  damon]
*
* Revision 1.1.129.1  1994/02/04  20:42:05  devsrc
* 	Merged from 1.0.3a to 1.1
* 	[1994/02/04  15:23:07  devsrc]
* 
* Revision 1.1.127.2  1994/01/20  18:43:46  annie
* 	added copyright header
* 	[1994/01/20  18:40:01  annie]
* 
* Revision 1.1.127.1  1993/12/07  17:42:44  jaffe
* 	New File from Transarc 1.0.3a
* 	[1993/12/02  21:59:36  jaffe]
* 
* $EndLog$
*

!**********************************************************
!*** Simulate errors during a reclone
!**********************************************************

include "defaults.itl"

!*** Initialize variables

set error $ENOTTY
set fset_id_high	$ITL_ProcessId
set fset_id_low		1
set fset_id string	("" + $fset_id_high + ",," + $fset_id_low)
set fset_name ("fzappa." + $ITL_ProcessId)
set looping_func "ftutil_VolReCloneAux"
set mp ("/tmp/fset." + $ITL_ProcessId)
set num_looping_bps 11
set orig_fset_id $fset_id
set orig_sum_file ("/tmp/fset_orig_sum." + $ITL_ProcessId)
set reclone_func "RecloneIntoAdjacentFset"
set rm_cmd ("rm -rf " + $mp + "/*")
set sum_cmd ("find " + $mp + " -type f -print | xargs sum")
set tmp_sum_file ("/tmp/fset_tmp_sum." + $ITL_ProcessId)

set crank_fset_id proc END
	set fset_id_low (@fset_id_low + 1)
	set fset_id ("" + @fset_id_high + ",," + @fset_id_low)
END

*** Initialize the user-level reclone bomb points, with one bomb point 
*** description for each unique bomb point in the code
set reclone_bp_desc[1] ($reclone_func + ".1:error=" + $error + ":count=1+0")
set reclone_bp_desc[2] ($reclone_func + ".2:error=" + $error + ":count=1+0")
set reclone_bp_desc[3] ($reclone_func + ".4:error=" + $error + ":count=1+0")
set reclone_bp_desc[4] ($reclone_func + ".5:error=" + $error + ":count=1+0")
set reclone_bp_desc[5] ($reclone_func + ".6:error=" + $error + ":count=1+0")
set reclone_bp_desc[6] ($reclone_func + ".7:error=" + $error + ":count=1+0")
set reclone_bp_desc[7] ($reclone_func + ".8:error=" + $error + ":count=1+0")

set num_reclone_bps 7

*** Initialize the looping reclone bomb points, where each bomb point
*** description has its 'count' value set to one greater than the previous
*** description
loop i 1 1 $num_looping_bps
	set reclone_bp_desc[$i + $num_reclone_bps]
		 ($looping_func + ".1:error=" + $error
		  + ":count=" + $i + "+0")
endLoop

set total_reclone_bps ($num_reclone_bps + $num_looping_bps)

!*** Verify and attach aggregate number $aggr_id ($device)
verifyAggr $device
attachAggr $device $aggr_type $aggr_name $aggr_id

!*** Create and mount fileset $fset_name on $mp
createFset $aggr_id $fset_id $fset_name
mkdir $mp 0755
mountFset $fset_name $mp

set create_file proc END
	set path_name ($mp + "/" + @file_name)
	open @path_name ($O_CREAT|$O_RDWR) 0666 fd
	write @fd @data
	close @fd
END

set populate_fileset proc END
	!*** Populate the fileset

	set file_name "little"
	set data "Joe got a good job working at the Utility Muffin Research Kitchen, where he stands arrogantly twisting the sterile canvas snoot of a fully charged icing anointment utensil,"
	exec create_file

	set file_name "green"
	set data "and every time a nice little muffin comes by on the belt, he puts forth:"
	exec create_file

	set file_name "rosette"
	set data "a little green rosette!"
	exec create_file

	mkdir ($mp + "/junk") 0755
	set file_name "/junk/bag-o-bits"
	set data ("JDP" * ($block_size + 13))
	exec create_file
END

*** Save and ID and name for the clone
exec crank_fset_id
set clone_id $fset_id
set clone_name ($fset_name + ".clone")

exec populate_fileset

!*** Compute a checksum on the contents of $mp
set orig_sum_cmd ($sum_cmd + " >" + $orig_sum_file)
shellExec orig_sum_cmd

*** This procedure will be used after each aborted operation to ensure that
*** the checksum matches the one computed above.
set tmp_sum_cmd ($sum_cmd + " >" + $tmp_sum_file)
set cmp_sum_cmd ("cmp -s " + $orig_sum_file + " " + $tmp_sum_file)
set cmp_sums proc END
	!*** See if checksum of $mp matches the original
	shellExec tmp_sum_cmd
	shellExec cmp_sum_cmd
END

loop i 1 1 $total_reclone_bps
	!*** Depopulate the fileset
	shellExec rm_cmd

	!*** Create a new file (apostrophe)
	set apostrophe ($mp + "/" + "apostrophe")
	open $apostrophe ($O_CREAT|$O_RDWR) 0666 apostrophe_fd
	write $apostrophe_fd "the crux of the biscuit"

	set file_name "scrutinizer"
	!*** Create another new file ($file_name)
	set data ", the central"
	exec create_file
	set scrutinizer $path_name

	set file_name "white_zone"
	!*** Create yet another new file ($file_name)
	set data "The White Zone is for loading and unloading only.  If you have to load or unload go to the White Zone."
	exec create_file
	set white_zone $path_name

	!*** Clone the fileset ($orig_fset_id => $clone_id)
	cloneFset $aggr_id $orig_fset_id $clone_id $clone_name

	!*** Modify $apostrophe
	***  The forces efsSomeClone into the case where a modified 
	***  copy-on-write anode exists in the fileset.
	write $apostrophe_fd " is the apostrophe"
	close $apostrophe_fd

	exec populate_fileset

	!*** Delete and then recreate $scrutinizer
	***  This forces efsSomeClone() into the case where a non-COW anode
	***  exists in the front fileset with an unrelated anode at the
	***  same index in the backing fileset, so it deletes the anode
	***  in the backing fileset before creating and then cloning into
	***  a fresh one.
	unlink $scrutinizer
	set file_name "scrutinizer"
	set data ", the central"
	exec create_file

	!*** Delete $white_zone
	***  This forces efsSomeClone() into the case where an anode exists
	***  in the backing fileset but no anode exists at the same index
	***  in the front fileset.  In this case, it deletes the anode in
	***  the backing fileset.
	unlink $white_zone

	!*** Set $reclone_bp_desc[$i]
	setBomb $reclone_bp_desc[$i]

	!*** Execute the doomed reclone operation
	verifyStatus false
	recloneFset $aggr_id $orig_fset_id
	if ($ITL_Status != $error) {
		error Code ($ITL_Status) != expected error ($error)
	}
	verifyStatus true

	!*** Retry the reclone
	recloneFset $aggr_id $orig_fset_id

	!*** Remove $apostrophe and $scrutinizer so that the checksums match
	unlink $apostrophe
	unlink $scrutinizer

	*** Make sure that the fileset contents are the same
	exec cmp_sums

	!*** Destroy the clone
	destroyFset $aggr_id $clone_id
endLoop

!*** Remove the checksum files
set rm_sum_cmd ("rm -f " + $orig_sum_file + " " + $tmp_sum_file)
shellExec rm_sum_cmd

!*** Unmount and destroy the filesets
unmountFset $mp
unlink $mp
destroyFset $aggr_id $orig_fset_id

!*** Detach and verify the aggregate
detachAggr $aggr_id
verifyAggr $device

echo !!! The test passed !!!

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
# 
# HISTORY
# $Log: gen_FunctionsScript,v $
# Revision 1.1.419.1  1996/10/17  18:37:47  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:58:26  damon]
#
# Revision 1.1.414.1  1994/02/04  20:48:00  devsrc
# 	Merged from 1.0.3a to 1.1
# 	[1994/02/04  15:25:50  devsrc]
# 
# Revision 1.1.412.1  1993/12/07  17:46:53  jaffe
# 	1.0.3a update from Transarc
# 	[1993/12/03  19:44:33  jaffe]
# 
# Revision 1.1.2.6  1993/01/11  18:38:15  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:23:52  htf]
# 
# Revision 1.1.2.5  1992/12/07  13:20:08  zeliff
# 	Removed duplicate OSF copyright markers
# 	[1992/12/06  00:44:06  zeliff]
# 
# Revision 1.1.2.4  1992/10/28  18:16:30  jaffe
# 	Transarc delta: mcinerny-ot5582-missing-close-brace 1.1
# 	  Selected comments:
# 	    In merging for test-102 1.11, the close brace got dropped...
# 	    ... put it back.
# 	Transarc delta: rajesh-ot5367-salvage-recovery-authorization-check-tests 1.8
# 	  Selected comments:
# 	    To add authorization check tests for salvage/recovery. This is
# 	    the initial checkpoint.
# 	    Just a checkpoint.
# 	    Another checkpoint.
# 	    Added functions to determine if device specified is character device,
# 	    to determine if it is block device and to form the raw device name
# 	    given the block device name.
# 	    Checkpoint.
# 	    Added functions to determine owner, group and numeric permission mode
# 	    of a file or directory.
# 	    This delta version has been tested.
# 	    Changed permissions.
# 	    Update makefiles.
# 	    Fixed logical errors in the script pertaining to requiring read/write
# 	    access to aggregate to perform salvage and/or recovery, handling
# 	    of error counts generated in the AuthCheckTest.noroot script.
# 	    Fix a build-time error.
# 	[1992/10/28  15:12:35  jaffe]
# 
# Revision 1.1.2.3  1992/09/25  17:31:59  jaffe
# 	Transarc delta: rajesh-ot5015-bos-test-fixes 1.7
# 	  Selected comments:
# 	    Various changes to fix problems in Ot 5015. This version of the delta
# 	    is only a checkpoint and is not yet ready.
# 	    Add in a utility functions that is used to check if a server has
# 	    a dfs-server DCE principal.
# 	    Accidentally deleted all functions except DetermineLocalAuth() in
# 	    util/gen_FunctionsScript. So modified to include all functions previously
# 	    existing in the util/gen_FunctionsScript.
# 	    Some more fixes.
# 	    Fix problem in DetermineLocalAuth function in gen_FunctionsScript.
# 	    Fix a cut statement to use "." as the delimiter.
# 	    Just another checkpoint.
# 	    Changes to fix problems found during execution of test11. The delta is now
# 	    ready for export.
# 	Transarc delta: rajesh-ot5142-convert-bos-tests-from-csh-to-sh 1.3
# 	  Selected comments:
# 	    Convert bos tests 4,5,6,8,9 and 10 from csh to sh.
# 	    Addition of a utility function to determine if a dfs-server principal
# 	    exists for a machne. And more of csh-to-sh conversions.
# 	    Add a function to check if the machine has a dfs-server DCE principal.
# 	    More to csh-to-sh conversion. This version has been tested.
# 	[1992/09/24  13:00:27  jaffe]
# 
# Revision 1.1.2.2  1992/08/28  18:42:48  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    To define the variables AFS, DFS, LOCAL, LOCAL_HP.
# 	    Variable UFS, NFS and EFS are also defined
# 	    for future use.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    See above
# 	    Added error test err2 to the Makefile
# 	Transarc delta: rajesh-clean-low-tests 1.5
# 	  Selected comments:
# 	    To remove make and clean options from the low test suite. To change
# 	    the scripts to use common shell functions. To create a file
# 	    fs_functionsScript with the common shell functions in the util
# 	    directory.
# 	    Modify scripts to follow coding standards, simplify the code, increase
# 	    readability etc.
# 	    More of above.
# 	    Modify the tests to give them a simpler logical structure, modularity,
# 	    readability ( one command per line) and to change then to use the
# 	    common function created earlier.
# 	    To create a script that will contain functions that will be common to
# 	    all tests and not only the fs and low tests.
# 	    Modification of rtest1 and rtest2 to use the utility functions
# 	    correctly.
# 	    Commented out debug echo statements.
# 	[1992/08/28  12:39:42  jaffe]
# 
# $EndLog$
#!/bin/sh
#
###############################################################################
#    Copyright (C) 1992 Transarc Corporation - All rights reserved            #
###############################################################################
# 
# This file contains functions to be used in the shell scripts.
# The file should be sourced in by the all test shell scripts.
#

#
# Boolean Constants
#

TRUE=1
FALSE=0
readonly TRUE FALSE

#
# Operation result values
#

PASS_EQ_ZERO=0
PASS_EQ_NONZERO=1
readonly PASS_EQ_ZERO PASS_EQ_NONZERO

#
# exit Values
# 

successExit=0
scriptErrorExit=1
testErrorExit=2
readonly successExit scriptErrorExit testErrorExit

#
# Types of filesystems
#

AFS=1
DFS=2
LOCAL=3
LOCAL_HP=4
# The following are defined for future use.
UFS=5
EFS=6
NFS=7
readonly AFS DFS LOCAL LOCAL_HP UFS EFS NFS


# echo "foo CheckOptionValue"   #**

#
# CheckOptionValue
#
#   This functions checks that the argument for a command line option 
#   exists, if the option requires a argument.
# 
# Arguments
#   $1  - option name
#   $2  - test suite type
#   $3  - test program name
#   $4...   - command line
#
# Assumptions
#   The option requries only one non-negative numeric argument.
#
# Output
#   If the option argument is not specified, the functions prints an error 
#   message and exits.
#

CheckOptionValue()
{
    if [ $# -lt 3 ] 
    then
        echo "Usage: CheckOptionValue <option> <test suite> <test program> <command line> "
        exit $scriptErrorExit
    fi
    
    option=$1;
    shift;
    testSuite=$1;
    shift;
    testProgram=$1;
    shift;
    
    if [ $1 = "" ] 
    then
        echo "ERROR: $testSuite/$testProgram ";
        echo "       option $option requires an argument";
        exit scriptErrorExit;
    fi
}
        
# echo "foo FileSystemStat"     #**

#
# FileSystemStat
#
#   This function issue a command to display statistics on the mounted 
#   filesystem/filesets
# 
# Arguments
#   None
#
# Assumptions
#   Variable fsType has been set to indicate type of filesystem
#   being used. The variable fsType can be set by calling 
#   fs_DetermineFSType().
#
# Output
#   Displays the status of filesystems mounted.
#
    
FileSystemStat()
{
    if [ $fsType = $AFS ]
    then 
        dfcmd="fs lq ."
    elif [ $fsType = $DFS ]
    then
        dfcmd="fts lsq -path ."
    elif [ $fsType = $LOCAL_HP ]
    then 
        dfcmd="df"
    else 
        dfcmd="df ."
    fi
    
    $dfcmd
}   

# echo "foo ProcessResult"  #**

# 
# ProcessResult 
# 
#   This function will compare the actual result of an operation with the
#   expected one and generate an error message if the operation was not
#   successful. The total error count will also be incremented by one.
# 
# Arguments
#   Required
#       $1  -   test suite name
#       $2  -   test name
#       $3  -   actual result
#       $4  -       expected result ($PASS_EQ_ZERO|$PASS_EQ_NONZERO)
#       $5  -   error number
#       $6  -   error string
#       $7  -   exit on error ($TRUE|$FALSE)
#
#   Optional
#       [-log <log file name>]  -   Log events to this file
#       [-execOnError {<command>|<function name>}]  -   Exception handling procedure
#
# Assumptions
#   The variable errorCount holds the total number of errors encountered.
#
# Output
#       If the operation failed, displays error message.
#

ProcessResult()
{
#    echo "start of ProcessResult "

    testSuite=$1
    testName=$2
    actualResult=$3
    expectedResult=$4
    errorNumber=$5
    errorString=$6
    exitOnError=$7
    shift 7

    logFlag=$FALSE
    execOnErrorFlag=$FALSE

    #
    # Parse optional arguments
    # 

    while [ "$1" != "" ]
    do 
        case $1 in 
            -log)
                logFlag=$TRUE
                logFileName=$2
                shift 2
                ;;

            -execOnError)
                execOnErrorFlag=$TRUE
                execOnErrorCommand=$2
                shift 2
                ;;      

            *)  echo "$testSuite/$testName: passed invalid argument \"$1\" to ProcessResult"
                exit $scriptErrExit
                ;;
        esac
    done

    testError=$FALSE
    if [ \( $expectedResult -ne $PASS_EQ_ZERO \) -a \
         \( $expectedResult -ne $PASS_EQ_NONZERO \) ]
    then
        echo "$testSuite/$testName: SCRIPT ERROR - invalid expected result for case $errorNum"
    elif  [ $expectedResult -eq $PASS_EQ_ZERO ]
    then 
        if [ $actualResult -ne 0 ]
        then 
            testError=$TRUE
        fi
    elif [ $expectedResult -eq $PASS_EQ_NONZERO ]
    then
        if [ $actualResult -eq 0 ]
        then 
            testError=$TRUE
        fi
    fi
            
    if [ $testError -eq $TRUE ] 
    then
        PrintError "$testSuite" "$testName" "$errorNumber" "$errorString" $logFileName
        errorCount=`expr $errorCount + 1`
        if [ $execOnErrorFlag = $TRUE ]
        then
            eval $execOnErrorCommand
        fi
        ExitOnError "$testSuite" "$testName" "$errorNumber" "$exitOnError"  $logFileName
    fi
#   echo "end of ProcessResult"
}

# echo "foo PrintError" #??

# 
# PrintError
# 
#   This functions will print an error message and log the error 
#   message if desired.
# 
# Arguments
#       $1  -   test suite name
#   $2  -   test name
#   $3  -   error number
#       $4  -   error string
#   [$5]    -   [Optional] log file name
#
# Assumptions
#   None
#
# Output
#       Displays error message.
#

PrintError()
{
    testSuite=$1
    testName=$2
    errorNumber=$3
    errorString=$4

    if [ $# -eq 5 ] 
    then
        logFileName=$5
        echo "$testSuite/$testName: ERROR ($errorNumber) - $errorString" | tee -a $logFileName
    else
        logFileName=""
        echo "$testSuite/$testName: ERROR ($errorNumber) - $errorString"
    fi
}

# 
# ExitOnError
# 
#   This function will terminate the test program and also log the event 
#   into a log file if desired. The exit value is value of constant variable 
#   testErrorExit
# 
# Arguments
#       $1  -   test suite name
#   $2  -   test name
#   $3  -   error number
#       $4  -   exit flag (TRUE/FALSE)
#   [$5]    -   [Optional] log file name
#
# Assumptions
#   -   The variable errorCount holds the total number of errors 
#       encountered.
#   -   The variable testErrorExit holds exit value
#
# Output
#       Displays test program termination message.
#

# echo "foo ExitOnError"

ExitOnError()
{
    testSuite=$1
    testName=$2
    errorNumber=$3
    exitFlag=$4

    if [ "$exitFlag" = "$TRUE" ]
    then
        if [ $# -eq 5 ] 
        then
            logFileName=$5
            echo -n "$testSuite/$testName: exiting on error $errorNumber, total number of errors occured - $errorCount" | tee -a $logFileName
        else
            logFileName=""
            echo "$testSuite/$testName: exiting on error $errorNumber, total number of errors occured - $errorCount"
        fi
        exit $testErrorExit
    fi  
}

# 
# Determine if the machine has a dfs-server principal in the
# security database.  
# 
#
# Arguments
#     [ $1 ] - machine name (short form)
#
# Output
# 

DetermineLocalAuth()
{
    if [ $# -eq 1 ] 
    then
        machineName=$1
    else
        machineName=`hostname`
#        machineName=`hostname | cut -d. -f1`
#        machineName=`hostname | cut -f1 -d.`
    fi
 
    # rgy_edit never returns other than 0
    rgy_edit -a "hosts/${machineName}/dfs-server" -v | grep "Entry not found"
    if [ $? -ne 0 ] 
    then

        #
        # dfs-server principal exists. Dfs operations can be done 
        # in localauth mode.
        #

        localAuth="-localauth"
    else
        # not found
        # local auth not possible
        localAuth=""
    fi
}

# 
# IsBlockDevice
# 
#   This function will return 0 if the device specified is block device 
#   and 1 if not.
# 
# Arguments
#   $1  	device file name
#

IsBlockDevice()
{
	if [ $# -ne 1 ]
	then
		echo "${testSuiteType}/${programName} - IsBlockDevice: needs device file name"
		exit $scriptErrorExit
	fi

	if [ `ls -l $1 | cut -c1` = "b" ]
	then
		# It is a block device
		return 0
	else
		return 1
	fi
}

# 
# IsRawDevice
# 
#   This function will return 0 if the device specified is raw device 
#   and 1 if not.
# 
# Arguments
#   $1  	device file name
#

IsRawDevice()
{
	if [ $# -ne 1 ]
	then
		echo "${testSuiteType}/${programName} - IsRawDevice: needs device file name"
		exit $scriptErrorExit
	fi

	if [ `ls -l $1 | cut -c1` = "c" ]
	then
		# It is a raw/character device
		return 0
	else
		return 1
	fi
}

# 
# DetermineRawDeviceFileName
# 
#   This function will determine the name of the raw device corresponding 
#   to the block device specifed. To assign the name of raw device to a 
#   variable use 
#   	variable=`DetermineRawDeviceFileName <block-device>`
# 
# Arguments
#   $1  	block device file absolute pathname 
#
# Assumption
#   The device specified is a block device
#

DetermineRawDeviceFileName()
{
	if [ $# -ne 1 ]
	then
		echo "${testSuiteType}/${programName} - DetermineRawDeviceFileName: needs block device file name"
		exit $scriptErrorExit
	fi

	rawDevice=`echo $1 | sed -e 's#dev/#dev/r#'`
	echo ${rawDevice}
}

#
# DetermineNumericPermissionMode
# 
# 	This function will determine the numeric permission mode of a file 
# 	or directory.
# 	To assign a variable the numeric mode use
# 		variable=`DetermineNumericPermissionMode <pathname>`
# 
#   This function uses a subsidiary function CharPermToNum.
#
# Arguments
#  	$1  	pathname 
#
# Assumptions
# 	The file/directory specified exists.
#

CharPermToNum()
{
	charPerm=$1

	numPerm=0
	readPerm=`echo $charPerm | cut -c1`	
	writePerm=`echo $charPerm | cut -c2`	
	executePerm=`echo $charPerm | cut -c3`	

	if [ "$readPerm" = "r" ]
	then
		numPerm=`expr $numPerm + 04`
	fi

	if [ "$writePerm" = "w" ]
	then
		numPerm=`expr $numPerm + 02`
	fi

	if [ "$executePerm" = "x" ]
	then
		numPerm=`expr $numPerm + 01`
	fi

	echo $numPerm
}

DetermineNumericPermissionMode()
{
	pathName=$1
	if [ -d ${pathName} ]
	then
		stringPerm=`ls -ld ${pathName} | cut -c2-10`
	else
		# its a file
		stringPerm=`ls -l ${pathName} | cut -c2-10`	
	fi

	userStringPerm=`echo $stringPerm | cut -c1-3`	
	userNumericPerm=`CharPermToNum $userStringPerm`

	groupStringPerm=`echo $stringPerm | cut -c4-6`	
	groupNumericPerm=`CharPermToNum $groupStringPerm`

	otherStringPerm=`echo $stringPerm | cut -c7-9`	
	otherNumericPerm=`CharPermToNum $otherStringPerm`

	numericPerm="0${userNumericPerm}${groupNumericPerm}${otherNumericPerm}"
	echo $numericPerm
}

#
# DetermineOwner
# 
# 	This function will determine the owner of a file or directory.
# 	To assign a variable the owner, use
# 		variable=`DetermineOwner <pathname>`
#
# Arguments
#  	$1  	pathname 
#
# Assumptions
# 	The file/directory specified exists.
#

DetermineOwner()
{
	pathName=$1
	if [ -d ${pathName} ]
	then
		owner=`ls -ld ${pathName} | awk '{print $3}'`
	else
		# its a file
		owner=`ls -l ${pathName} | awk '{print $3}'`
	fi
	echo $owner
}

#
# DetermineGroup
# 
# 	This function will determine the group of a file or directory.
# 	To assign a variable the group, use
# 		variable=`DetermineGroup <pathname>`
#
# Arguments
#  	$1  	pathname 
#
# Assumptions
# 	The file/directory specified exists.
#

DetermineGroup()
{
	pathName=$1
	if [ -d ${pathName} ]
	then
		group=`ls -lgd ${pathName} | awk '{print $4}'`
	else
		# its a file
		owner=`ls -lg ${pathName} | awk '{print $4}'`
	fi
	echo $group
}

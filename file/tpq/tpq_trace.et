#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
#
# HISTORY
# $Log: tpq_trace.et,v $
# Revision 1.1.139.1  1996/10/02  18:49:29  damon
# 	Newest DFS from Transarc
# 	[1996/10/01  18:49:30  damon]
#
# Revision 1.1.131.2  1994/06/09  14:23:21  annie
# 	fixed copyright in src/file
# 	[1994/06/09  13:35:05  annie]
# 
# Revision 1.1.131.1  1994/02/04  20:33:38  devsrc
# 	Merged from 1.0.3a to 1.1
# 	[1994/02/04  15:19:27  devsrc]
# 
# Revision 1.1.129.1  1993/12/07  17:36:22  jaffe
# 	New File from Transarc 1.0.3a
# 	[1993/12/02  21:56:52  jaffe]
# 
# $EndLog$
#

# Copyright (C) 1992 Transarc Corporation
# Licensed Materials - Property of Transarc
# All rights reserved.
#
# tpq trace table

error_table 2 ztq
	ec TPQ_ICL_TRACE_RCSID,	"$Header: /u0/rcs_trees/dce/rcs/file/tpq/tpq_trace.et,v 1.1.139.1 1996/10/02 18:49:29 damon Exp $"
	ec TPQ_ICL_INIT, 
		"tpq_Init: minThreads=%d, medMaxThreads=%d, highMaxThreads=%d, threadEnnui=%d"
	ec TPQ_ICL_INIT_RET,
		"tpq_Init: returns pool pointer %x"
	ec TPQ_ICL_ADJUST,
		"tpq_Adjust: poolHandle=%x, flags=%x . . ."
	ec TPQ_ICL_ADJUST2,
		"tpq_Adjust: minThreads=%d, medMaxThreads=%d, highMaxThreads=%d, threadEnnui=%d"
	ec TPQ_ICL_CREATEPOOL,
		"(tpq) CreatePoolEntry(%x) entered"
	ec TPQ_ICL_CREATEPOOL_CREATED,
		"(tpq) CreatePoolEntry: created thread for thread pool %x, entry=%x"
	ec TPQ_ICL_GROWPOOL,
		"tpq_GrowThreadPool(%x, %d, entryPP)"
	ec TPQ_ICL_GROWPOOL_CREATE,
		"tpq_GrowThreadPool: okay to create thread for pool %x"
	ec TPQ_ICL_SHUTDOWN,
		"tpq_ShutdownPool(%x) called"
	ec TPQ_ICL_SHUTDOWN_END,
		"tpq_ShutdownPool(%x) completed"
	ec TPQ_ICL_HELPERDIE,
		"tpq_HelperDie(%x, %x) called"
	ec TPQ_ICL_GC,
		"tpq_GCThreads(%x) called"
	ec TPQ_ICL_GC_DIE,
		"tpq_GCThreads(%x): tell entry %x to die"
	ec TPQ_ICL_DISPATCH,
		"tpq_DispatcherThread(%x) started"
	ec TPQ_ICL_DISPATCH_READY,
		"tpq_DispatcherThread(%x) ready to run %x, priority=%d, graceExpired=%d"
	ec TPQ_ICL_DISPATCH_THREAD,
		"tpq_DispatcherThread(%x) has thread to run %x, thread=%x"
	ec TPQ_ICL_DISPATCH_INTERVAL,
		"tpq_DispatcherThread(%x) sleep with interval=%d"
	ec TPQ_ICL_DISPATCH_WAKEUP,
		"tpq_DispatcherThread(%x) awake!!"
	ec TPQ_ICL_DISPATCH_DEAD,
		"tpq_DispatcherThread(%x) rest in peace"
	ec TPQ_ICL_WAKEUP,
		"tpq_WakeDispatcher(%x) called"
	ec TPQ_ICL_HELPER,
		"tpq_HelperThread(%x) for pool %x started"
	ec TPQ_ICL_HELPER_DIE,
		"tpq_HelperThread(%x) I'm dying <gasp>"
	ec TPQ_ICL_HELPER_PVT,
		"tpq_HelperThread(%x) found %x on my private queue (pool=%x)"
	ec TPQ_ICL_HELPER_PVT_DONE,
		"tpq_HelperThread(%x) %x done, reschedule interval = %d"
	ec TPQ_ICL_HELPER_CHECKQ,
		"tpq_HelperThread(%x) checking queues"
	ec TPQ_ICL_HELPER_QRUN,
		"tpq_HelperThread(%x) found %x to run"
	ec TPQ_ICL_HELPER_QRUN_DONE,
		"tpq_HelperThread(%x) %x done, reschedule interval = %d"
	ec TPQ_ICL_HELPER_SLEEP,
		"tpq_HelperThread(%x) (pool %x) to sleep: perchance to dream"
	ec TPQ_ICL_ENQ,
		"(tpq) EnqueueEntry(%x, %x) called, priority = %d, grace period = %d"
	ec TPQ_ICL_QREQ,
		"tpq_QueueRequest(pool=%x, op=%x, arg=%x, priority=%d, ..."
	ec TPQ_ICL_QREQ2,
		"                 gracePeriod=%d, resched=%d, dropDead=%d)"
	ec TPQ_ICL_DEREQ,
		"tpq_DequeueRequest(pool=%x, entry=%x)"
	ec TPQ_ICL_GCQ,
		"(tpq) GCQueue(pool=%x, priority=%d, now=%d)"
	ec TPQ_ICL_FINDQ,
		"tpq_FindQueue(pool=%x, priority=%d, now=%d, ...)"
	ec TPQ_ICL_FINDQ_RET,
		"tpq_FindQueue(pool=%x,...) returns nextExpired=%d, graceExpired=%d, entry=%x"
	ec TPQ_ICL_SETRESCHED,
		"tpq_SetRescheduleInterval(entry=%x, old=%d, new=%d)"
	ec TPQ_ICL_HELPER_INITLOCKWAIT,
		"tpq_HelperThread(%x) for pool %x: waiting for initial lock"
	ec TPQ_ICL_HELPER_INITLOCKDONE,
		"tpq_HelperThread(%x) for pool %x: lock released"
end

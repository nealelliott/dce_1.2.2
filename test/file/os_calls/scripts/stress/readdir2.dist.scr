
* ID: $Id: 
*
* ORIGINS: Transarc Corp.
*
* (C) COPYRIGHT Transarc Corp. 1992
* All Rights Reserved
* Licensed Materials - Property of Transarc
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
*

*
* @OSF_COPYRIGHT
*
* HISTORY
* $Log$
* $EndLog$
*

*

* All of these tests should be performed twice, once with the
* directory modifications being made by a test process, and once with
* the directory modifications being made by a stress process.
*
* Check what happens when dir entries are deleted during an
* enumeration randomly with all sorts of race conditions.  Again, with a
* multi-chunk directory, have several {test/stress} processes remove a
* chosen set of names asynchronously with a test that does a readdir of
* the directory during the scan.  About half of the names should be
* removed, with each name removed by only one of the stress/test
* processes.  There should be at least two "test" processes doing the
* readdir simultaneously, too.  The postcondition should be that the
* readdir calls should find all of the names that weren't unlinked,
* although it is OK for them to find names that were unlinked.  Once the
* entire test is run, the test processes shouldn't find any names that
* were deleted, in a final readdir scan.
*

*
*
* Note: Try this test on both single machin cell and multi-machine cell.
*       Try this from both DFS and local path so that it will also test 
*       xvnode layer. This test realy needs to be run from the combination
*       of DFS and local path (rmdir via CM or rmdir form local path).
*

* 
* USAGE: ./file_test -l {HUBNAME} -I {this_script} ; For HUB
*        ./file_test -c {HUBNAME} : For other spokes
*

* Include config file.
include config
set timeout 2000

set baseDirName string "tstdirname"
set baseDirName ( $baseDirName * 20 )

* 16+200=216 is the dir entry size.
* A huge dir has to have at least 3*65536/216=910 dir entry.
set numEntry 1000

* This procedure makes subdirs under the working dir.
set make_Dir proc 2 numOfDir int baseDirName string  ENDP
loop x 1 1 @numOfDir
  set testDirName string ( @baseDirName + @x )
  mkdir @testDirName 0777
endloop
ENDP

set loopTimes 10

*
* This procedure tests remove call.
*

set stress1_Proc proc END_PROC
  echo
  echo Delete dirent.

  getwd workDir
  chdir $testDir

  sync_join "begin_sync" $timeout

* Delete a dirent every four dirents.
  sync_join "deleted_half" $timeout

  set flag false
  loop x 1 4 $numEntry
    set testDirName string ( $baseDirName + @x )
    echo @x
    rmdir @testDirName
  endloop

  sync_join "deleted_half_done" $timeout

  sync_join "finish_sync" $timeout
  chdir @workDir

  echo Delete dirent done.
  echo 
END_PROC

*
* This procedure lokks up the test dir.
*

set stress2_Proc proc END_PROC
  echo
  echo Delete dirent.

  getwd workDir
  chdir $testDir 

  sync_join "begin_sync" $timeout

  sync_join "deleted_half" $timeout

  set flag false
  loop x 2 4 $numEntry
    set testDirName string ( $baseDirName + @x )
    echo @x
    rmdir @testDirName
  endloop

  sync_join "deleted_half_done" $timeout
  
  sync_join "finish_sync" $timeout
  chdir @workDir

  echo Delete dirent process done.
  echo 
END_PROC

*
* This procedure creates a set of random files and does utimes, chmod
* create adn delete the test file.
*

set test_Proc proc END_PROC

  echo
  echo Enumerating dirents and test the huge dir.

  sync_join "begin_sync" $timeout

* This is a lookup of the huge dir. All names should be there. 

  opendir $testDir dirPtr
  readdir @dirPtr dirInfo
  readdir @dirPtr dirInfo
  loop x 1 1 $numEntry
    set testDirName string ( $baseDirName + @x )
    readdir @dirPtr dirInfo
    if ( @dirInfo.d_name != @testDirName ) {
      echo "FAILED: The check dir proc failed."
    }
  endloop
  closedir @dirPtr

  sync_join "deleted_half" $timeout
  sync_join "deleted_half_done" $timeout

* This is the final lookup. Should not see any names unlinked.

  opendir $testDir dirPtr
  readdir @dirPtr dirInfo
  readdir @dirPtr dirInfo
  set x 3
  do 
    set testDirName string ( $baseDirName + @x )
    readdir @dirPtr dirInfo
    if ( @dirInfo.d_name != @testDirName ) {
      echo "FAILED: Lookup dir failed after half of entres deleted."
    }
    set x ( @x + 1 )
    set testDirName string ( $baseDirName + @x )
    readdir @dirPtr dirInfo
    if ( @dirInfo.d_name != @testDirName ) {
      echo "FAILED: Lookup dir failed after half of entries deleted."
    }
    set x ( @x + 3 )
  while ( @CommandResult != 1 && @x <= $numEntry )
  closedir @dirPtr
  
  sync_join "finish_sync" $timeout
  echo Test process done.
  echo
END_PROC


****************************************************************************
* Check spokes.
if ( $ITL_nspokes < 3 ) {
  echo FAILED: You need at least three spokes to run the test.
  quit
}

loop loopVar 1 1 $loopTimes

* Create a huge dir.
chdir $testDir
exec make_Dir $numEntry $baseDirName

!* Dispatch test procedures among spokes.
rexec_async $ITL_spoke[0] stress1_Proc result[0] asyncVar[0]
rexec_async $ITL_spoke[1] stress2_Proc result[1] asyncVar[1]

loop x 2 1 ($ITL_nspokes-1)
  rexec_async $ITL_spoke[$x] test_Proc result[$x] asyncVar[$x]
endloop

sync_create "begin_sync" $ITL_nspokes $timeout
sync_release "begin_sync"

sync_create "deleted_half" $ITL_nspokes $timeout
sync_release "deleted_half"

sync_create "deleted_half_done" $ITL_nspokes $timeout
sync_release "deleted_half_done"

sync_create "finish_sync" $ITL_nspokes $timeout
sync_release "finish_sync"

loop x 0 1 ($ITL_nspokes-1)
  async_join $asyncVar[$x] $timeout
endloop

loop x 0 1 ($ITL_nspokes-1)
  if ( $result[$x] != 0 ) {
    echo Spoke $x has a failure.
  }
endloop

chdir $currentDir
exec clearDir_Proc $testDir
mkdir $testDir 0777

endloop

quit


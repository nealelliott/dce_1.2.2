/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: rs_plcy.idl,v $
 * Revision 1.1.6.2  1996/03/09  23:28:31  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:43:59  marty]
 *
 * Revision 1.1.6.1  1995/12/08  17:34:47  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  16:55:30  root]
 * 
 * Revision 1.1.4.2  1993/08/04  13:37:03  cuti
 * 	Insert dce/ in front of imported file name
 * 	[1993/08/03  20:50:57  cuti]
 * 
 * Revision 1.1.2.2  1992/12/29  13:31:05  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/28  20:17:32  zeliff]
 * 
 * Revision 1.1  1992/01/19  14:54:44  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/

/*  rs_plcy.idl V=9 05/06/91 //littl/prgy/src/idl
**
** Copyright (c) Hewlett-Packard Company 1991
** Unpublished work. All Rights Reserved.
**
*/
/*
 *      Registry Server Interface - policy and properties
 * 
 */

[
    /* V1 format UUID: 4c8782804000.0d.00.02.87.14.00.00.00 */
    uuid(4C878280-4000-0000-0D00-028714000000),
    version(1)
]

interface rs_policy

{
    import "dce/rsbase.idl";

    /*
     * r s _ p r o p e r t i e s _ g e t _ i n f o 
     *
     * returns registry properties. 
     */
    [idempotent] void rs_properties_get_info (
        [in]    handle_t                h,
        [out]   sec_rgy_properties_t    *properties,
        [out]   rs_cache_data_t         *cache_info,
        [out]   error_status_t          *status
    );

    /*
     * r s _ p r o p e r t i e s _ s e t _ i n f o 
     *
     * returns registry properties. 
     *
     * Errors 
     *  Not Authorized 
     */
    void rs_properties_set_info (
        [in]    handle_t                h,
        [in]    sec_rgy_properties_t    *properties,
        [out]   rs_cache_data_t         *cache_info,
        [out]   error_status_t          *status
    );

    /*
     * r s _ p o l i c y _ g e t _ i n f o 
     *
     * returns the policy for a given organization, if no organization is
     * specified the registry's policy data is returned. 
     *
     * Errors 
     *  Object not found 
     */
    [idempotent] void rs_policy_get_info (
        [in]    handle_t           h,
        [in]    sec_rgy_name_t     organization,
        [out]   sec_rgy_plcy_t    *policy_data,
        [out]   rs_cache_data_t   *cache_info,
        [out]   error_status_t    *status
    ); 

    /*
     * r s _ p o l i c y _ s e t _ i n f o 
     *
     * sets the policy for a given organization, if no organization is specified
     * the registry's policy data is set. 
     *
     * Errors 
     *  Object not found 
     *  Not Authorized 
     */
    void rs_policy_set_info (
        [in]    handle_t           h,
        [in]    sec_rgy_name_t     organization,
        [in]    sec_rgy_plcy_t     *policy_data,
        [out]   rs_cache_data_t    *cache_info,
        [out]   error_status_t     *status
    );

    /*
     * r s _ p o l i c y _ g e t _ e f f e c t i v e  
     *
     * returns the policy for a given organization, if no organization is
     * specified the registry's policy data is returned. 
     *
     * Errors 
     *  Object not found 
     */
    [idempotent] void rs_policy_get_effective (
        [in]    handle_t          h,
        [in]    sec_rgy_name_t    organization,
        [out]   sec_rgy_plcy_t    *policy_data,
        [out]   rs_cache_data_t   *cache_info,
        [out]   error_status_t    *status
    );

    /*
     * r s _ p o l i c y _ g e t _ o v e r r i d e _ i n f o 
     *
     * returns the override policies that apply to the policy category that the
     * client machine belongs to. The override policies are returned as a bit
     * set. 
     *
     * Errors 
     *  Not implemented 
     *  Object not found 
     *  Bad data 
     */
    [idempotent] void rs_policy_get_override_info (
        [in]    handle_t                    h,
        [in]    sec_rgy_name_t              category,
        [out]   rs_policy_override_flags_t  *policy_data,
        [out]   rs_cache_data_t             *cache_info,
        [out]   error_status_t              *status
    );

    /*
     * r s _ p o l i c y _ s e t _ o v e r r i d e _ i n f o 
     *
     * sets the override policies that apply to the designated policy category.
     * The override policies are entered as a bit set. 
     *
     * Errors 
     *  Not implemented 
     *  Object not found 
     *  Bad data 
     *  Not authorized 
     */
    void rs_policy_set_override_info (
        [in]    handle_t                    h,
        [in]    sec_rgy_name_t              category,
        [in]    rs_policy_override_flags_t  policy_data,
        [out]   rs_cache_data_t             *cache_info,
        [out]   error_status_t              *status
    );

    /*
     * r s _ a u t h _ p o l i c y _ g e t _ i n f o 
     *
     * returns the authentication policy for a given account.  If no account is
     * specified the registry's auhtentication policy data is returned. 
     *
     * Errors 
     *  Object not found 
     */
    [idempotent] void rs_auth_policy_get_info (
        [in]    handle_t                h,
        [in]    sec_rgy_login_name_t    *account,
        [out]   sec_rgy_plcy_auth_t     *auth_policy,
        [out]   rs_cache_data_t         *cache_info,
        [out]   error_status_t          *status
    );

    /*
     * r s _ a u t h _ p o l i c y _ g e t _ e f f e c t i v e  
     *
     * returns the effective authentication policy for a given account principal.
     * If no account is specified the registry's authentication policy data is
     * returned. 
     *     *Errors 
     * Object not found 
     */
    [idempotent] void rs_auth_policy_get_effective (
        [in]    handle_t                h,
        [in]    sec_rgy_login_name_t    *account,
        [out]   sec_rgy_plcy_auth_t     *auth_policy,
        [out]   rs_cache_data_t         *cache_info,
        [out]   error_status_t          *status
    );

    /*
     * r s _ a u t h _ p o l i c y _ s e t _ i n f o 
     *
     * sets the authentication policy for a given account principal or, if no
     * account is specified,  the registry as a whole. 
     *
     * Errors 
     *  Object not found 
     *  Not Authorized 
     */
    void rs_auth_policy_set_info (
        [in]    handle_t                h,
        [in]    sec_rgy_login_name_t    *account,
        [in]    sec_rgy_plcy_auth_t     *auth_policy,
        [out]   rs_cache_data_t         *cache_info,
        [out]   error_status_t          *status
    );
}

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
#!/bin/ksh
# 
# HISTORY
# $Log: tc_cm_q_update,v $
# Revision 1.1.2.2  1996/03/09  20:52:18  marty
# 	Add OSF copyright
# 	[1996/03/09  20:29:53  marty]
#
# Revision 1.1.2.1  1995/12/11  22:47:45  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/jrr_1.2_mothra/1  1995/11/30  19:26 UTC  bell_d
# 	Debugged version
# 
# 	HP revision /main/HPDCE02/1  1994/08/03  20:10 UTC  bissen
# 	merge from HPDCE01
# 
# 	HP revision /main/HPDCE01/1  1994/05/03  14:43 UTC  gordon_l
# 	Fixes for change_master/become_master
# 
# 	HP revision /main/gordon_branch/1  1994/05/03  14:32 UTC  gordon_l
# 	Fixes for change_master/b
# 	ecome_master
# 	[1995/12/11  22:22:36  root]
# 
# $EndLog$


if [ -z "${TC_CM_Q_UPDATE_DEFINED}" ] ; then

TC_CM_Q_UPDATE_DEFINED=1


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#
#  DESCRIPTION:
#      This test case is part of the security replication system test.
#      The purpose of this test is to ensure that a change master can
#      be successfully done even when there are updates queued in the 
#      propagation queue.
#
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tet_startup="tc_cm_q_update_init"
tet_cleanup="tc_cm_q_update_cleanup"
tet_testlist="tc_cm_q_update"

iclist="ic1"
ic1="tc_cm_q_update"

tc_cm_q_update_init()
{
    typeset st

    tc_common_init ; st=$?
    if [ $st -ne 0 ] ; then
        tet_delete $ic1 "tc_cm_q_update_init(): Initialization failed"
        return 
    fi
    if [ $SLV_CNT -lt 2 ] ; then
        tet_delete $ic2 "tc_cm_q_update_init(): Test requires at least 2 slaves"
        return 
    fi
}

tc_cm_q_update_cleanup()
{
    tc_common_cleanup
}


tc_cm_q_update()
{
    typeset st new_SLV_NAMES

    testdesc="Change master - with updates in the propagation queue"
    replog_testhdr "$testdesc"

    slvhost_1=${SLV_HOSTNAMES[0]} ; slvnm_1=${SLV_NAMES[0]}
    slvhost_2=${SLV_HOSTNAMES[1]} ; slvnm_2=${SLV_NAMES[1]}

    secd_stop $slvhost_1 $slvnm_1 ; st=$?
    if [ $st -ne 0 ] ; then
        replog_testresult "$testdesc" $st
        return
    fi
 
    #   Run the update test and queue up the updates to $slvnm_1.
    #   The number of principals should really be large enough so
    #   that the update test will start failing with "Replica not master"
    #   master message as soon as the change master is done.

    replog_msg "Running update test to queue updates to $slvnm_1"
    sft_x_update_hosts $MASTER_HOSTNAME $CM_UPD_NPRINC $SFT_UPDATE_ADD

    repdb_del_elmnt "${SLV_NAMES[*]}" $slvnm_1  # Sets REPDB_STRING
    set -A new_SLV_NAMES $REPDB_STRING

    sa_wait_prop_complete "${new_SLV_NAMES[*]}" ; st=$?
    if [ $st -ne 0 ] ; then
        return
    fi

    sa_change_master $slvnm_2 ; st=$?   # Change master
    if [ $st -ne 0 ] ; then
        replog_testresult "$testdesc" $st
        return
    fi

    secd_start $slvhost_1 $slvnm_1    # Restart secd 

    #   Wait until the "Number of outstanding updates" is 0 for all
    #   slaves. This gurantees that all the updates from the update 
    #   test have propagated to all the slaves. It also gurantees that the
    #   change_master has propagated to all slaves (until this is propagated
    #   the new master will not be listed as the master on the replica list
    #   of the slave which has yet to receive the change master update - causing
    #   replist_verify_master to fail ). 

    sa_wait_prop_complete "${SLV_NAMES[*]}" ; st=$?
    if [ $st -ne 0 ] ; then
        replog_testresult "$testdesc" $st
        return
    fi

    #    Verify that $slvnm_2 is the only master on all replica lists.

    replist_verify_master "${REP_NAMES[*]}" $slvnm_2 ; st=$?
    replog_testresult "$testdesc" $st
    sft_cleanup  # Cleanup
}

. $TET_ROOT/profile.dcest
. ./profile
. $PHOME/replog
. $PHOME/tc_common
. $PHOME/secd
. $PHOME/slv
. $TCM
#. $TET_ROOT/lib/xpg3sh/tcm.sh

fi

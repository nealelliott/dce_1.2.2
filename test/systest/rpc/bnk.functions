#!/bin/ksh
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: bnk.functions,v $
# Revision 1.1.99.2  1996/03/09  20:50:56  marty
# 	Add OSF copyright
# 	[1996/03/09  20:28:55  marty]
#
# Revision 1.1.99.1  1995/12/11  22:00:45  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  21:39:11  root]
# 
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  21:37:26  root]
# 
# Revision 1.1.5.2  1993/07/09  12:27:47  root
# 	Initial King Kong branch
# 	[1993/07/09  12:27:15  root]
# 
# Revision 1.1.3.3  1993/04/23  14:42:10  giza
# 	added TET_ROOT for su.dce
# 	[1993/04/22  23:25:18  giza]
# 
# Revision 1.1.3.2  1993/03/31  12:48:17  mgm
# 	Initial GAMERA branch
# 
# Revision 1.1.2.4  1992/12/09  14:59:26  mgm
# 	Added code to break out of infinite loops after so many minutes
# 	(to avoid hangs).  Fixed cleanup() and misc.
# 	[1992/12/09  14:59:01  mgm]
# 
# Revision 1.1.2.3  1992/11/18  11:43:15  mgm
# 	Fixed so that local host can be both server and client
# 	[1992/11/18  11:42:38  mgm]
# 
# Revision 1.1.2.2  1992/11/03  21:39:14  mgm
# 	Common functions for TET version of dcerpbnk
# 	[1992/11/03  21:38:04  mgm]
# 
# $EndLog$
#
#	11/03/92	Rick OBrien	Common dcerpbnk functions for TET
#===============================================================================
del_test_purp ()
{
    for test_purp in $*
    do
        tet_delete $test_purp "FAILURE: Startup...$test_purp() deleted."
    done
}	# end del_test_purp ()


#===============================================================================
# Echo 1 into bank data file.  This will be first account.

create_bank()
{
echo "create_bank()"
    print 1> $BANK
}


#===============================================================================
# Start server on this host.
# Ensure that the principal used to authenticate is a member of the
# subsys/dce/cds-admin group.  If bankd cannot start, exit.
#===============================================================================
start_server()
{
echo "start_server()"
    integer status=0 serverPid=0 timeout=120 i=0

    #export KRB5CCNAME=`dce_login_noexec $CELL_ADMIN $ADMIN_PASSWD`
    #./bankd "$SERVER_PARMS"

echo "  CMD: ./bankd $SERVER_PARMS"
    $TET_ROOT/tools/su.dce cell_admin -p -dce- -c "./bankd $SERVER_PARMS" &
    status=status+$?
    tet_infoline "on `hostname` start_server() start ./bankd status is $status"

    sleep 10
    serverPid=$(ps -ef | grep bankd | egrep -v 'grep|ps|su' | awk '{printf("%s", $2)}')
    if [ ! $serverPid ]
    then 
      tet_infoline "server failed to start, wait and look again"
      sleep 20
      serverPid=$(ps -ef | grep bankd | egrep -v 'grep|ps|su' | awk '{printf("%s", $2)}')
    fi

    (( $status || ! $serverPid )) && {
	tet_infoline "Error: unable to start bank server, aborting test."
        return 1
    }

    tet_infoline "Waiting for $ADMIN_ENTRY & $TRANS_ENTRY to be exported"
    sleep 5

    i=0
    until [ -f /tmp/bankd.$serverPid ]
    do
	sleep 1
	i=i+1
	(( $i > $timeout )) && {	# Give it $timeout seconds to export.
	    tet_infoline "Error: Could not export $ADMIN_ENTRY & $TRANS_ENTRY."
	    return 1
        }
    done

    rm /tmp/bankd.$serverPid
    tet_infoline "start_server finished."
}


#===============================================================================
# Create the 10 predetermined accounts. Use su to cell_admin.
# Ensure that the principal used to authenticate is a member of the
# subsys/dce/cds-admin group.  
# PRIN_NAME is both principal and principal's password!

create_accounts()
{
echo "create_accounts()"
    integer status=0

    for acct in $NAMELIST
    do
        if [ -z "$PRIN_NAME" ]
        then
            $STDEXC/su.dce $CELL_ADMIN -p $ADMIN_PASSWD -c \
                "./bank -T create -n $acct $CLIENT_PARMS"
            status=$?
        else
            $STDEXC/su.dce $PRIN_NAME -p $PRIN_NAME -c \
                "./bank -T create -n $acct $CLIENT_PARMS"
            status=$?
        fi
        (( $status )) && tet_infoline "Error: cannot create account $acct."
    done
    return $status
}

# Start random transactions on all hosts in $HOSTLIST.
buildDataFile()
{
    print "export STTMPDIR=$STTMPDIR" > ./$CLIENTDATA
    print "export TCDIR=$TCDIR" >> ./$CLIENTDATA
    print "export LOCAL_HOST=$LOCAL_HOST" >> ./$CLIENTDATA
    print "export CELL_ADMIN=$CELL_ADMIN" >> ./$CLIENTDATA
    print "export ADMIN_PASSWD=$ADMIN_PASSWD" >> ./$CLIENTDATA
    print "export BANK=$BANK" >> ./$CLIENTDATA
    print "export TRANS_TIME=$TRANS_TIME" >> ./$CLIENTDATA
    print "export ENTRY_SYNTAX=$ENTRY_SYNTAX" >> ./$CLIENTDATA
    print "export ADMIN_ENTRY=$ADMIN_ENTRY" >> ./$CLIENTDATA
    print "export TRANS_ENTRY=$TRANS_ENTRY" >> ./$CLIENTDATA
    print "export PRIN_NAME=$PRIN_NAME" >> ./$CLIENTDATA
    print "export AUTH_SVC=$AUTH_SVC" >> ./$CLIENTDATA
    print "export AUTH_LVL=$AUTH_LVL" >> ./$CLIENTDATA
    print "export AUTHZ_SVC=$AUTHZ_SVC" >> ./$CLIENTDATA
    print "export TRANS_RES_FILE=$TRANS_RES_FILE" >> ./$CLIENTDATA
}

start_clients()
{
echo "start_clients()"
export TESTDIR="/rpc/ts/dcerpbnk"

    for RHOST in $HOSTLIST
    do
        TRANS_RES_FILE=$STTMPDIR/trans_res.$RHOST

        if [ -z "$PRIN_NAME" ]
        then
            if [[ $RHOST = $LOCAL_HOST ]]
            then
                $STDEXC/su.dce $CELL_ADMIN -p $ADMIN_PASSWD -c \
                    "./transactions ./bank \
                    ./bank $BANK $TRANS_TIME $ENTRY_SYNTAX \
                    $ADMIN_ENTRY $TRANS_ENTRY $TRANS_RES_FILE" &
            else
                buildDataFile
		#SYS was used to determine '09' but this is not needed 
		# it Will break non-HP platforms, so removed
		#SYS=$(remsh $RHOST uname -r|awk -F\. '{print $2}')
                rcp ./$CLIENTDATA $RHOST:/tmp
                #rcp ./bank $RHOST:/tmp
                #rcp ./transactions $RHOST:/tmp
                #rcp ./bnk.clientwrapper $RHOST:/tmp
                $RSH_COMM $RHOST "cp $TET_ROOT/systest/$TESTDIR/bank \
                		     $TET_ROOT/systest/$TESTDIR/transactions \
				     $TET_ROOT/systest/$TESTDIR/bnk.clientwrapper /tmp" 
                $RSH_COMM $RHOST -n "/bin/ksh -c '. /tmp/$CLIENTDATA;/tmp/bnk.clientwrapper'" &
            fi
        else
            if [[ $RHOST = $LOCAL_HOST ]]
            then
		$STDEXC/su.dce $CELL_ADMIN -p $ADMIN_PASSWD -c \
                " ./transactions ./bank \
                    ./bank $BANK $TRANS_TIME $ENTRY_SYNTAX \
                    $ADMIN_ENTRY $TRANS_ENTRY $TRANS_RES_FILE $PRIN_NAME \
                    $AUTH_SVC $AUTH_LVL $AUTHZ_SVC" &
            else
                buildDataFile
                rcp ./$CLIENTDATA $RHOST:/tmp
                #rcp ./bank $RHOST:/tmp
                #rcp ./transactions $RHOST:/tmp
                #rcp ./bnk.clientwrapper $RHOST:/tmp
  	        $RSH_COMM $RHOST "cp $TET_ROOT/systest/$TESTDIR/bank \
                                     $TET_ROOT/systest/$TESTDIR/transactions \
				     $TET_ROOT/systest/$TESTDIR/bnk.clientwrapper /tmp"
                $RSH_COMM $RHOST -n "/bin/ksh -c '. /tmp/$CLIENTDATA;$TCDIR/bnk.clientwrapper'" &
            fi
        fi
        PIDS="$PIDS$! "
    done
}

# Hang out until clients are all done.

wait_for_clients()
{
echo "wait_for_clients()"
    tet_infoline "Waiting for client processes to finish"
    integer i=0 timeout=300	# Give them at most 5 minutes to finish

    for PID in $PIDS
    do
        while (( $i < $timeout ))
        do
            ps -ef | egrep -v 'grep|ps' | grep $PID >/dev/null
            if (( ! $? ))
            then
                i=i+1
                sleep 1
            else
                break
            fi		
        done
    (( $i >= $timeout )) && {
        kill -9 $PID 1>/dev/null 2>&1
        tet_infoline "Warning: timeout was reached and pid $PID was killed."
    }
    done
    tet_infoline "wait_for_clients finished."
}

#
# Check to see if all account balance are what's expected.
# If they are not, log the error.
#
check_results()
{
echo "check_results()"
    integer CK_TOTAL=0 SV_TOTAL=0 CD_TOTAL=0 IRA_TOTAL=0 TMP_VAL=0 

    print $NAMELIST
    for NAME in $NAMELIST
    do
	CK_TOTAL=0; SV_TOTAL=0; CD_TOTAL=0; IRA_TOTAL=0; 
        for RHOST in $HOSTLIST
	do
	    #TRANS_RES_FILE=/net/$LOCAL_HOST$STTMPDIR/trans_res.$RHOST
	    TRANS_RES_FILE=$STTMPDIR/trans_res.$RHOST
	    ENTRY=$(grep $NAME $TRANS_RES_FILE)
	    TMP_VAL=$(print $ENTRY | awk -F: '{print $2}')
	    CK_TOTAL=$(( $CK_TOTAL + $TMP_VAL ))
	    TMP_VAL=$(print $ENTRY | awk -F: '{print $3}')
	    SV_TOTAL=$(( $SV_TOTAL + $TMP_VAL))
	    TMP_VAL=$(print $ENTRY | awk -F: '{print $4}')
	    CD_TOTAL=$(( $CD_TOTAL + $TMP_VAL))
	    TMP_VAL=$(print $ENTRY | awk -F: '{print $5}')
	    IRA_TOTAL=$(( $IRA_TOTAL + $TMP_VAL))
	done

	[[ -z "$TMP_VAL" ]] && {
	    RC=1
	    return 1
        }
		
	BANK_CK_TOTAL=`./bank -T inquire -n $NAME $CLIENT_PARMS | grep "Ck balance" | awk -F: '{print $2}'`

	if (( $CK_TOTAL == $BANK_CK_TOTAL ))
	then
	    tet_infoline "Checking balance for $NAME ok"
	else
	    tet_infoline "Checking balance for $NAME in error"
	    tet_infoline "Bank balance:  $BANK_CK_TOTAL"
	    tet_infoline "Expected balance:  $CK_TOTAL"
	    RC=1
	fi	
	
	BANK_SV_TOTAL=`./bank -T inquire -n $NAME $CLIENT_PARMS | grep "Sv balance" | awk -F: '{print $2}'`
	if (( $SV_TOTAL == $BANK_SV_TOTAL ))
	then
	    tet_infoline "Savings balance for $NAME ok"
	else
	    tet_infoline "Savings balance for $NAME in error"
	    tet_infoline "Bank balance:  $BANK_SV_TOTAL"
	    tet_infoline "Expected balance:  $SV_TOTAL"
	    RC=1
	fi	
		
	BANK_CD_TOTAL=`./bank -T inquire -n $NAME $CLIENT_PARMS | grep "Cd balance" | awk -F: '{print $2}'`
	if (( $CD_TOTAL == $BANK_CD_TOTAL ))
	then
	    tet_infoline "CD balance for $NAME ok"
	else
	    tet_infoline "CD balance for $NAME in error"
	    tet_infoline "Bank balance:  $BANK_CD_TOTAL"
	    tet_infoline "Expected balance:  $CD_TOTAL"
	    RC=1
	fi	
	
	BANK_IRA_TOTAL=`./bank -T inquire -n $NAME $CLIENT_PARMS | grep "IRA balance" | awk -F: '{print $2}'`
	if (( $IRA_TOTAL == $BANK_IRA_TOTAL ))
	then
	    tet_infoline "IRA balance for $NAME ok"
	else
	    tet_infoline "IRA balance for $NAME in error"
	    tet_infoline "Bank balance:  $BANK_IRA_TOTAL"
	    tet_infoline "Expected balance:  $IRA_TOTAL"
	    RC=1
	fi	
    done
}

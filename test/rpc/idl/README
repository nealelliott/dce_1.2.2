
IDL Compiler Test Suite
====================================================

This is the root of the the IDL compiler test suite directory tree.
Each test is stored in a separate directory.  Here is the layout:

        .		            	# Test info and common modules
        ./<testname>	   	 	# One directory for each testname

Common testing files in this directory are:

        README                          # this file
	common_client.c                 # common client main program
        common_server.c                 # common server main program
        test_common.h                   # common test header file
        util.c                          # common utility routines
	maketest.mk			# common makefile for testcases
	Makefile			# Makefile for building all testcases
	server.tmpl			# template for generating server.c
	client.tmpl			# template for generating client.c


NOTE: Not all tests work or are used.  See the Makefile to see which tests
compile and execute successfully.


Building the testcases
=============================

Makefiles are provided for building most of the testcases.  There is also
a top-level Makefile that will build all the testcases.

Test organization conventions
=============================

The normal test consists of the following files:

        testname.idl
        testname.acf
        client_aux.c
        manager.c

Also used are the common files in:

	client.tmpl	# For generating client.c in test case directory
	server.tmpl	# For generating server.c in test case directory
        common_client.c # client main program
        common_server.c # server main program
        test_common.h   # common header file
        util.c          # utilities to print statuses and exception names


Test Case Summary
=================
    array2
        [in,out] conformant array of conformant struct containing
            conformant varying array


    arrayptr (pointers as arrays)
        [in], [out], [in,out] conformant array of short
        [in,ptr], [in,out,ptr] conformant array of short (non-NULL)
        [in,ptr], [in,out,ptr] conformant array of short (NULL)
        [in], [out], [in,out] conformant varying array of short
        [in,ptr], [in,out,ptr] conformant varying array of short (non-NULL)
        [in,ptr], [in,out,ptr] conformant varying array of short (NULL)


    arraystr
        [in,out,ptr] fixed array of char
        [in,out,ptr] varying array of long
        [in,out,ptr] conformant array of short
        [in,out,ptr] conformant varying array of unsigned long
        [in,string] (2 octet, pointer form)
        [in,ptr,string] (2 octet, pointer form)
        [out] struct
        [out,ptr] conformant string (2 octet, pointer form)


    arrayswith
	[in,out]  hyper *y_h[3][3]
        [in,out,first_is(*f_l),last_is(*l_l)] long *y_l[10]
        [in,out,size_is(s_o)] short *y_o[]
        [in,out,size_is(s_a),first_is(*f_a),last_is(*l_a)] small *y_a[]
        [in,out,size_is(s_u)] {struct of pointers to base types } y_u[][2]
	[in,out] ref pointer to struct containing pointers to byte,boolean,char array
	[in,out,ptr] pointer to struct containing arrays of pointers to float/double


    arrayv1
        [in,out,v1_array] fixed array of long
        [in,out,v1_array] varying array of long
        [in,out,v1_array] conformant varying array of long


    array
        [in] fixed array of long
        [in] fixed array of struct
        [in] fixed array of struct ct array
        [in] varying array of long
        [in] conformant array (2-dim) of long
        [in,out] conformant varying array (2-dim) of long


    bank.idl:
        explicit binding, generic handles
        long constants
        IN long
        OUT long
        IN [small] fixed arrays of char
        OUT error_status_t (not used as [comm_status])


    bigtest1
        [in,out] 2-dim array of ptr to struct ct varying array of unions
            conformant struct as an arm of union
            enum union discriminator

    bindcall
        [binding_callout(<Identifier>)] tests binding handle callouts

    binopfw.idl, binoplu.idl, binopwk.idl:
        explicit binding, handle_t
        [idempotent] operation
        IN long
        OUT long


    comprefs
	[in,out] 2-dim fixed array of ref pointers
	[in,out] 2-dim conform in 1st dim array of ref pointers
	[in,out] union with an arm containing a struct containt ref pointer to char
	[in,out,ptr] union with an arm containing a struct containt ref pointer to char


    conftree.idl, conftree2.idl:
        explicit binding, handle_t
        conformant arrays of long
        conformant [small] arrays of long
        conformant structs
        self-pointing structs
        IN [ptr] pointers to structs
        IN-OUT [ptr] pointers to structs
        embedded full pointers


    context
        [in,context_handle]
        [out,context_handle]
        [in,out,context_handle]
        [in] varying array of byte


    context2
        [in] context handle w/rundown
        [out] context handle w/rundown
        [in,out] context handle w/rundown


    cover1
        [in] pipe of char
        [out] pipe of char
        [in] pointer to struct ct pointer to struct ct char
        [out] pointer to struct ct pointer to struct ct char


    cover_array
        in,out array of double
        in,out conformant array of arrays
        in conformant array of unions
        out conformant varying array of unions


    cover_contain_ref
        [in] contained [ref] pointers to boolean, small, ulong, varying struct
        [out] contained [ref] pointers to char, long, uhyper
        [in,out] contained [ref] pointers to byte, conformant varying struct
        [in,ptr] contained [ref] pointers to float, hyper
        [in,out,ptr] contained [ref] pointers to double, usmall, union


    cover_struct
        in,out fixed struct ct. union
        in struct ct. conformant array of union
        in struct ct. varying array of char
        out struct ct. varying array of float
        out struct ct. varying array of struct
        in,out struct ct. varying array of double
        in,out struct ct. varying array of pointers
        in struct ct. c-v array of struct
        out pointer to struct ct. c-v array of pointers
        in,out struct ct. c-v array of arrays


    cover_top_pointer
        [in] toplevel pointers to char, float, small, usmall, ulong
        [in,out] toplevel pointers to boolean, byte, double, short, hyper,
                                      ushort, uhyper
        [in,ptr] toplevel pointers to boolean, byte, double, short, hyper,
                                      ushort, uhyper
        [in,out,ptr] toplevel pointers to float, small, long, usmall, ulong


    cover_union
        in,out union with union arm
        in union with struct arm ct. varying array of union
        in,out union with struct arm ct. varying array of array
        in,out union with struct arm ct. varying array of struct
        out union with struct arm ct. varying array of long
        out union with struct arm ct. varying array of pointer


    ctxcomm.idl:
        explicit binding, handle_t
        IN [context_handle] binding
        IN-OUT [context_handle] binding
        IN, OUT, and IN-OUT context handles
        multiple IN-OUT context handles in an operation
        [comm_status] operation result
        [comm_status] parameter
        [comm_status] additional parameter
        OUT [string0] arrays of char


    mblock.idl (not built):
        explicit binding, handle_t
        IN double
        IN short
        OUT fixed multidim arrays of short


    mline.idl (not built):
        explicit binding, handle_t
        IN float
        IN short
        OUT fixed array of short


    multiref
        [in,out] pointer to struct ct [ref] ptr to [ref] ptr to short


    nidltest
	in fixed long array[100]
	out fixed long array[100]
	in,out fixed long array[100]
	in conformant long array[]
	out conformant long array[]
	in,out conformant long array[]
	in varying long array[]
	out varying long array[]
	in,out varying long array[]
	in conformant, varying long array[]
	out conformant, varying long array[]
	in,out conformant, varying long array[]
	out *long
	in long
	in,out *long

	in array[5,7] /* multi dimension */
	out array[5][7] /* array of array */
	in [last_is()]array[5][7]
	out [last_is()]array[5,7]
	in conformant varying array[5,7]
	out conformant varying array[5][7]

	in each of {small, usmall, short, ushort, long, ulong, hyper, uhyper, boolean, byte, float, double, char} [5]
	out each of {small, usmall, short, ushort, long, ulong, hyper, uhyper, boolean, byte, float, double, char} [5]
		
	in struct array[5]
	out struct array[5]

	in union array[5]
	out union array[5]

	in [string0,small] char array[5]
	out [string0,small] char array[5]

	in one of {long, short} enum
	out one of {long, short} enum

	in varying long array [5]
	out varying long array [5]
	in conformant varying array of long
	out conformant varying array of long
	in multi-dim conformant varying array of long
	out multi-dim conformant varying array of long

	in struct
	in *struct
	out *struct
	in,out *conformant struct
	in *conformant,varying struct
	in,out *conformant,varying struct

	in array of struct {char}
	out array of struct {char}
	
	in array of (array of struct {char})
	out array of (array of struct {char})

	in varying array of (array of struct {char})
	out varying array of (array of struct {char})

	in conformant array of (array of struct {char})
	out conformant array of (array of struct {char})

	in conformant, varying array of (array of struct {char})
	out conformant, varying array of (array of struct {char})

	[in,out,comm_status]	
	[out,comm_status]	

	[maybe]
	[idempotent]
	[broadcast]

	in struct { int }
	out *struct{ int }
	in,out *struct{ int }
	
	in struct { array[5] }
	out *struct { array[5] }

	in struct { conformant, varying array[] }
	in,out struct { conformant, varying array[] }

	in struct { struct }
	out struct { struct }
	
	in one of { all base types }	
	out one of { all base types }	

	in one of { long short } bitset
	out one of {long short } *bitset

	boolean op()
	in conformant array of struct
	out conformant, varying array of struct

	in [string0,small] char[3]
	out [string0,small] char[3]
	
	explicit binding with generic handle
	in [transmit_as(int)] int
	out [transmit_as(int)] int
	
	out [string0,small] char [100]
	
	in union { struct }
	out *union { struct, [string0,small] char array[10] }
	

    nodethreads
        [in,out] pointer to self-pointing struct


    ode (not yet converted)
	explict handle
	in,out float
	in,out,last_is(prior integer) array of float
	in,out  float[24]


    op_results
	    operations returning one of each:
	    
                fixed_array_t,  error_status_t, context_handle_t, boolean,
                fixed_struct_t, char, var_conf_struct_t, conf_struct_t,
                varying_struct_t, byte,  float,   double,  small,  short, 
                long,   hyper,  unsigned small, unsigned short,  unsigned
                long, unsigned hyper, enum

	    operations returning one of each pointer to:

                boolean, char, byte, float, double, small, short, long, hyper,
                unsigned small, unsigned short, unsigned long, unsigned hyper,
                enum


    orecord
        [in] pointer to struct ct conformant, varying v1_array of byte


    outrefs
        [out] struct ct [ref] pointers to structs with [ref] pointers
        [in,out] varying array of [ref] pointers to structs with [ref] pointers
        [in,out] [ref] pointer to struct ct conformant array of [ref] pointers
                to unsigned shorts
        [out] conformant array of [ref] pointers to unsigned shorts


    out_refs
	    operations containing one of each [out] parameter:
	    
                fixed_array_t,  error_status_t, context_handle_t, boolean,
                fixed_struct_t, char, var_conf_struct_t, conf_struct_t,
                varying_struct_t, byte,  float,   double,  small,  short, 
                long,   hyper,  unsigned small, unsigned short,  unsigned
                long, unsigned hyper, 


    parray
        [in] full pointer to 2-dim array of long
        [in,out] full pointer to 2-dim array of long
        [out] full pointer to 2-dim array of long


    perf.idl:
        explicit binding, handle_t
        long constants
        IN, OUT, IN-OUT unsigned long
        IN, OUT float
        IN, OUT double
        IN boolean
        OUT error_status_t (not used as [comm_status])
        IN, OUT [small] open arrays of unsigned long (fixed nonzero LB)
        [idempotent] operations with variable length IN and OUT params
        [broadcast] operations with OUT params
        [maybe] and [maybe,broadcast] null operations
        operation to register/unregister an interface
        operation that raises exception
        slow operation
        operation to shutdown server
        pseudo-callback


    perfb.idl:
        explicit binding, handle_t
        long constants
        IN, OUT unsigned long
        IN boolean
        IN [small] open arrays of unsigned long (fixed nonzero LB)
        OUT [small,string] arrays of char (fixed nonzero LB)


    perfc.idl:
        explicit binding, handle_t
        OUT unsigned long
        pseudo-callback
        [idempotent] pseudo-callback


    perfg.idl:
        explicit binding, handle_t
        IN, OUT unsigned long


    pipefault
	in pipe of chars
	out pipe of chars
	implicit handle (handle_t)
	explicit handle (handle_t)
	in char
	out *long
	exceptions: rpc_x_ss_pipe_closed  rpc_x_ss_pipe_discipline_error rpc_x_ss_pipe_empty  rpc_x_ss_pipe_order


    pipes
        [in] fixed array of char
        [in] ref pointer to pipe of byte


    pipetest
	in pipe of chars
	out pipe of chars
	explicit handle
	in char
	out *long


    pipetest2
	implicit handle (handle_t)
	in pipe of float by ref
	out pipe of float by ref
	in,out pipe of struct {long, double} by ref
	

    pointarray
	explicit handle
	in,out **short[3][3]


    pointed
	explicit handle
	struct containing a pointer to one of each base type
	in,ptr *struct
	in,out,ptr *struct


    primes
	[idempotent] explicit handle operation
	in,out long by ref
	in,out,small,last_is(prior int by ref),max_is(prior int) long[] by ref


    ptrarray
        [in,ptr] array of short
        [in,out,ptr] array of short
        [in,out,ptr] varying array of short
        [in,out,ptr] conformant array of short
        [in,out,ptr] conformant varying array of short


    refptrs
	[in,out] ref pointer to struct containing ref ptr struct containing ref ptr to char
	[in,out] ref pointer to struct containing mutable pointer to struct 
		containing ref ptr to char (mutable changed across a call)
	[in,out] ref pointer to struct containing mutable pointer to struct 
		containing ref ptr to char (mutable not changed across a call)


    represent
        [represent_as], [string]
        [in] array of ISO_MOCCS
        [out] array of ISO_MOCCS


    rrpc.idl (operations exported by all RPC servers):
        explicit binding, handle_t
        long constants
        IN unsigned long
        OUT long
        OUT error_status_t (not used as [comm_status])
        OUT open [small] arrays of long (fixed nonzero LB)
        OUT open [small] arrays of rpc_if_spec_t (fixed nonzero LB)
        [idempotent] operations


    sparse
	explicit handle
	long op()
	in [small] long array[1000] 
	in [transmit_as(conformant struct)] long array[1000]
	in conformant array in struct { long last; [small, last_is(last)] long x[2000];}
	

    sp_union
	[in,out] ref pointer to mutable pointer to selfpointing union. 


    stacks
	[idempotent] explicit handle
	long op()
	in long
	out long by ref


    string0
        [v1_string], [heap]
        [in, v1_string] array of char
        [in, out, v1_string] array of char
        [in, v1_string] 2-dim array of char


    stringptr
        [in] conformant [string] array of char
        [in,out] conformant [string] array of char
        [in,ptr] conformant [string] array of char
        [in,out,ptr] conformant [string] array of char
        [in] fixed [string] array of char
        [in,out] fixed [string] array of char
        [in,ptr] fixed [string] array of char
        [in,out,ptr] fixed [string] array of char
        [in,string] (arrayified) pointer to char
        [in,ptr,string] (arrayified) pointer to char


    stringts
        [in,string] fixed array of char
        [in,out,string] fixed array of char
        [out,string] fixed array of char
        [in,string] conformant array of byte
        [in,out,string] conformant array of byte
        [out,string] conformant array of byte
        [in,string] conformant array of ISO_LATIN_1
        [in,out,string] conformant array of ISO_LATIN_1
        [in,string] conformant array of ISO_MOCCS
        [out,string] fixed array of ISO_MOCCS
        [in,out] struct ct fixed and conformant array of PRIVATE_CHAR_8
        [in,out] struct ct fixed array of ISO_MULTI_LINGUAL and
                conformant array of PRIVATE_CHAR_16


    stringy
        [in,out,string] (arrayified) pointer to char
        [in,out,string] conformant (arrayified) pointer to char
        [in,out,ptr,string] (arrayified) pointer to char
        [in,out,ptr,string] conformant (arrayified) pointer to char
        [in,out,ptr,string] array of char
        [in,out,ptr,string] conformant array of char


    string_tree
	auto handle
	in,out struct tree {char array[32]; struct tree *left, *right;}
	tree *op()
	in,out tree by ref


    tree
	explicit handle
	struct tree {long, left, right}
	in,out,ptr *tree


    xmitas
	[idempotent] explict handle
	in struct {int; [small,last_is(prior int)] long value[max]}
	[transmit_as(conformant struct)] list {value, next} 	
	long op()

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
# HISTORY
# $Log: cell.dcp,v $
# Revision 1.1.6.3  1996/10/15  20:43:46  arvind
# 	OSF DCE 1.2.2 Drop 4.5
# 	[1996/10/15  20:07:19  arvind]
#
# Revision 1.1.6.2  1996/10/04  16:50:57  arvind
# 	OSF DCE 1.2.2 Drop 4
# 	[1996/10/04  16:50:38  arvind]
# 
# Revision /main/DCE_1.2.2/3  1996/10/03  15:28 UTC  truitt
# 	Merge changes.
# 
# Revision /main/DCE_1.2.2/truitt_dcecp_pk6/1  1996/10/03  15:27 UTC  truitt
# 	OT13103: Minor changes to 'cell backup'.
# 
# Revision /main/DCE_1.2.2/2  1996/07/08  16:21 UTC  truitt
# 	Merge changes.
# 
# Revision /main/DCE_1.2.2/truitt_dcecp_pk/1  1996/07/01  14:11 UTC  truitt
# 	Merge with latest HP changes and enhancements.
# 
# Revision /main/HPDCE02/15  1996/03/11  19:35 UTC  truitt
# 	Merge.
# 
# Revision /main/HPDCE02/truitt_dcecp_chf68/1  1996/03/11  19:34 UTC  truitt
# 	CHFts17225: Fix one of the error messages that I missed.
# 
# Revision /main/HPDCE02/14  1996/03/07  16:51 UTC  truitt
# 	Merge cell changes.
# 
# Revision /main/HPDCE02/truitt_dcecp_chf66/1  1996/03/07  16:28 UTC  truitt
# 	CHFts16674: Have 'cell show' locate dts servers in other lan profiles.
# 	CHFts17024: The 'cell show' command is not reporting the correct cds
# 	servers when a foreign cell used as the input parameter.
# 	CHFts17025: Add 'cell catalog' as a simple command to list which cells
# 	*appear* to be legal within the local cell.
# 	CHFts17627: Simplify 'cell ping' to use 'registry show -master'.  Also
# 	other modifications to 'ping' to fix foreign cell problems.
# 
# 	Initial DCE_1.2.2 branch.
# 	[1996/07/01  13:57 UTC  truitt  /main/DCE_1.2.2/1]
# 
# 	Update OSF copyright year
# 	[1996/03/09  22:25:20  marty]
# 
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/08  17:57:39  root]
# 
# 	HP revision /main/HPDCE02/13  1995/10/17  14:46 UTC  kevins
# 	Merge chfts15887 into HPDCE02
# 
# 	HP revision /main/HPDCE02/kevins_chfts15887/1  1995/10/17  14:41 UTC  kevins
# 	Need to modify the method for setting script debuging variable.
# 
# 	HP revision /main/HPDCE02/12  1995/10/06  19:59 UTC  truitt
# 	Merge stuff.
# 
# 	HP revision /main/HPDCE02/truitt_dcecp_chfts49/2  1995/10/06  13:51 UTC  truitt
# 	CHFts16537: Make sure all help messages fit in the eighty character limit.
# 
# 	HP revision /main/HPDCE02/11  1995/10/05  15:12 UTC  truitt
# 	Merge cell ping changes.
# 
# 	HP revision /main/HPDCE02/truitt_dcecp_chfts49/1  1995/10/05  15:11 UTC  truitt
# 	CHFts16376: Correct the -replicas option so it does not ping nodes also.
# 
# 	HP revision /main/HPDCE02/10  1995/07/18  18:54 UTC  jrr
# 	Fix dtsservers output and perf. problems.
# 	[1995/07/18  18:44 UTC  jrr  /main/HPDCE02/jrr_dcecp_scripts/1]
# 
# 	HP revision /main/HPDCE02/9  1995/05/30  15:40 UTC  truitt
# 	Merge cell changes.
# 
# 	HP revision /main/HPDCE02/truitt_dcecp_chfts32/1  1995/05/30  15:39 UTC  truitt
# 	Trap the 'directory list' command error in enumerate namespace
# 	so that a bad entry in a directory list does not cause the whole
# 	command to fail.
# 
# 	HP revision /main/HPDCE02/8  1995/04/07  16:52 UTC  truitt
# 	Merge cell work.
# 
# 	HP revision /main/HPDCE02/truitt_mothra_chfts25/1  1995/04/07  16:52 UTC  truitt
# 	CHFts14975: Correct output of find_obj_binding when the
# 	towers attribute contains only one tower.
# 
# 	HP revision /main/HPDCE02/7  1995/03/31  18:55 UTC  truitt
# 	Merge message and cds server name work.
# 
# 	HP revision /main/HPDCE02/truitt_mothra_chfts24/1  1995/03/31  18:54 UTC  truitt
# 	CHFts14889: Fix the setting/usage of the cds server variable.
# 	CHFts14890: Change the operations message.
# 
# 	HP revision /main/HPDCE02/6  1995/03/29  00:02 UTC  dnguyen
# 	Fix pinging dts servers.
# 	Enhance pinging clients.
# 	Enhance error handling for cell ping.
# 
# 	HP revision /main/HPDCE02/dnguyen_mothra/4  1995/03/27  15:56 UTC  dnguyen
# 	Fix pinging dts servers.
# 	Enhance pinging clients.
# 	Enhance error handling for cell ping.
# 
# 	HP revision /main/HPDCE02/5  1995/03/22  16:36 UTC  truitt
# 	Merge changes.
# 
# 	HP revision /main/HPDCE02/truitt_dcecp_chfts21/1  1995/03/22  16:35 UTC  truitt
# 	Remove reference to registry being called "master".
# 
# 	HP revision /main/HPDCE02/4  1995/03/01  20:58 UTC  dnguyen
# 	Merge fix for CHFts14300:
# 	"Return replicas' info as well when both -clients
# 	and -replicas switches are specified. Fix help text
# 	for -clients switch."
# 
# 	HP revision /main/HPDCE02/dnguyen_mothra/3  1995/02/27  20:16 UTC  dnguyen
# 	Return replicas' info as well when both -clients
# 	and -replicas switches are specified. Fix help text
# 	for -clients switch.
# 
# 	HP revision /main/HPDCE02/3  1995/02/16  20:59 UTC  dnguyen
# 	Merge dcelocal_path fix
# 
# 	HP revision /main/HPDCE02/dnguyen_mothra/2  1995/02/16  20:54 UTC  dnguyen
# 	Fix dcelocal_path references
# 
# 	HP revision /main/HPDCE02/2  1995/02/01  19:13 UTC  dnguyen
# 	Change /opt/dcelocal ref. to dcelocal_path
# 
# 	HP revision /main/HPDCE02/dnguyen_mothra/1  1995/01/31  17:20 UTC  dnguyen
# 	Change /opt/dcelocal ref. to dcelocal_path
# 
# 	HP revision /main/HPDCE02/1  1994/11/15  20:04 UTC  truitt
# 	Initial HPDCE02 branch.
# 
# 	HP revision /main/truitt_dcecp_01/1  1994/11/15  20:03 UTC  truitt
# 	Fix help and error messages.
# 
# Revision 1.1.2.7  1994/09/29  21:23:33  kevins
# 	OT 12337 Wrote verbose help messages
# 	[1994/09/29  21:23:07  kevins]
# 
# Revision 1.1.2.6  1994/09/22  18:34:01  kevins
# 	OT 12296 modified task script debug entries
# 	[1994/09/22  18:26:10  kevins]
# 
# Revision 1.1.2.5  1994/09/19  19:33:50  kevins
# 	OT 12141 12139 modified cell ping/show
# 	[1994/09/19  19:33:28  kevins]
# 
# Revision 1.1.2.4  1994/09/06  13:16:49  kevins
# 	OT 12020 cell ping now looks for clearinghouse name with CH_Name
# 	[1994/09/06  12:54:40  kevins]
# 
# Revision 1.1.2.3  1994/08/24  17:51:06  kevins
# 	OT 11842 shows intercell information correctly
# 	[1994/08/24  10:31:12  kevins]
# 
# Revision 1.1.2.2  1994/08/03  21:00:39  kevins
# 	OT 11478 Reworked help sub-processing
# 	[1994/08/03  20:42:46  kevins]
# 
# Revision 1.1.2.1  1994/07/28  19:28:59  kevins
# 	OT 9691 Cell task script first submission
# 	[1994/07/28  18:39:26  kevins]
# 
# 	CR 9691 Initial Submission of Cell Task Script
# 	[1994/07/11  15:48:21  kevins]
# 
# $EndLog$

# Globals
if {[info globals CELL_DEBUG] == ""} {
    set CELL_DEBUG 0
}

#
# cell:
#    Takes an optional cell name and returns cell server and host
#    information and shows whether all dce services are available
#    by contacting all servers/clients/replicas/hosts based on the
#    options specified.  Also allows backing up of master security
#    database and all known cds clearinghouses.
#
proc cell {args} {
    set arg_table {
        {backup command function_call _dcp_backup_cell
            "Backs up master security database and known clearinghouses."}
        {catalog command function_call _dcp_catalog_cell
            "Returns the names of the cells known to a cell."}
        {ping command function_call _dcp_ping_cell
            "Shows the current server status of a cell."}
        {show command function_call _dcp_show_cell
            "Returns attributes describing the configuration of a cell."}
        {help help help_list        
            "Prints a summary of command-line options."}
        {operations operations operation_list 
            "Returns a list of the valid operations for this command."}
    }

    set local_args $args

    set verbose_prose \
"This object allows the discovery of cell information using the CDS namespace
and security registry, or the backup of the security and CDS databases that
define the makeup of the cell.  The optional argument is the fully-qualified
name of a cell to operate on.  If no argument is provided, operations are
performed on the local cell."

    parseargs $arg_table local_args -found_one

    if {[info local help_prose] > 0} {return $help_prose}

    if {[info local function_call] > 0} {
        _dcp_cell_debug "Calling $function_call"
        return [$function_call local_args]
    } else {
        error "The \"cell\" object requires an operation to form a command."
    }
}


#
# _dcp_backup_cell:
#    Backs up the master security service database and the known cds
#    clearinghouses. The scripts that are ultimately called receive
#    the backup destination from an ERA associated with the...
#        a) security server - /{cell_name}/dce-rgy
#        b) cds clearinghouse - /{cell_name/hosts/{machine_name}/cds-server
#
#    The ERA name is "bckp_dest" it is an encoding type stringarray. 
#    The acl manager is principal. 
#
proc _dcp_backup_cell {local_args} {
    global dcelocal_path
 
    upvar 1 local_args cargs 
    set local_args $cargs

    parseargs "" local_args -no_leftovers

    if {[info local help_prose] > 0} {return}

    if {[llength $local_args] > 1} {
        error "Unrecognized argument [lindex $local_args 1]."
    } elseif {[llength $local_args] == 0} {
        set cell_name [name expand /.:]
    } else {
        set cell_name $local_args
    }

    #
    # Get the cds pathname of the security master server.  Find
    # a binding handle to that server and aquire the hostname.
    #
    _dcp_cell_debug "Figure out the name of the master security server"
    set master_server [registry catalog $cell_name -master]
    set sec_server_bind [_dcp_find_obj_binding $master_server]
    set sec_server_host [name get $sec_server_bind]
    _dcp_cell_debug "The master security server is $sec_server_host"

    #
    # Set up the server information to back-up the security server.
    # Set the server configuration name and create the server entry 
    # with the correct attributes.
    #
    set sec_bckp_attr {{program bckp_sec.dcp} {starton explicit}}
    lappend sec_bckp_attr [concat directory $dcelocal_path/dcecp]

    set sec_bckp_server [format "%s/%s/config/srvrconf/bckp_sec.dcp" \
                         $cell_name $sec_server_host]

    set sec_host_servers [server catalog $sec_server_host]

    if {[llength [_dcp_list_find $sec_host_servers $sec_bckp_server]] == 0} {
        _dcp_cell_debug "Create security backup server"
        server create $sec_bckp_server -attribute $sec_bckp_attr
    }

    #
    # Add the appropriate acl entry into the replist acl object so the 
    # database backup script can disable/enable the registry as required.
    #
    foreach el [acl show $cell_name/sec/replist -e] { 
        if {[string compare [lindex $el 1] $sec_server_host/self] == 0} {
            _dcp_cell_debug "Modify Acls on $el"
            set acl_entry [format "%sA" [lindex $el 2]]
            acl modify $cell_name/sec/replist -change "user $sec_server_host/self $acl_entry"
        }
    }

    #
    # Start the remote security backup server.
    #
    _dcp_cell_debug "Start security backup server"
    server start $sec_bckp_server

    #
    # Get a list of the cds servers.
    #
    _dcp_cell_debug "Figure out the names of the cds server hosts"
    set cds_server_list [_dcp_find_cds_servers $cell_name -replicas]
    _dcp_cell_debug "The cds server hosts are $cds_server_list"

    set cds_bckp_attr {{program bckp_cds.dcp} {starton explicit}}
    lappend cds_bckp_attr [concat directory $dcelocal_path/dcecp]

    #
    # Find a binding handle to each cds server found and get
    # the hostnames.  Start a server for each cds server.
    #
    foreach element $cds_server_list {
        set cds_bind [_dcp_find_obj_binding $element]
        set cds_server_host [name get $cds_bind]
        set cds_bckp_server [format "%s/%s/config/srvrconf/bckp_cds.dcp" \
                             $cell_name $cds_server_host]
        set cds_host_servers [server catalog $cds_server_host]
        if {[llength [_dcp_list_find $cds_host_servers $cds_bckp_server]] == 0} {
            _dcp_cell_debug "Create cds backup server"
            server create $cds_bckp_server -attribute $cds_bckp_attr
        }
        _dcp_cell_debug "Start cds backup server"
        server start $cds_bckp_server
    }

    return "DCE Cell $cell_name backup complete"
}


#
# _dcp_ping_cell:
#    Returns "DCE services available" if all respond.
#
#    cell ping [cell_name] [-clients] [-replicas]
#
#    cell_name is optional, and if not present will default
#    to the local cell.  The different options...
#
#    (default) - ping the master security server, the cds server that
#                has write-control over the /.: directory, and each DTS
#                server.  Returns the message "DCE services available"
#                if all the servers respond.  Otherwise, it returns the
#                names of the servers not responding.
#
#    -clients -  ping each client. Returns "DCE clients available" if all
#                clients respond.  Otherwise it returns the names of the
#                clients not responding.
#
#    -replicas - pings each security master and replica, each cds server
#                and each DTS server.  Returns "DCE servers available" if
#                all masters, replicas and DTS servers respond.  Otherwise
#                it returns the names of the objects not responding.
#
proc _dcp_ping_cell {local_args} {
    set arg_table { 
        {-clients boolean clients
            "Ping every host in the cell."}
        {-replicas boolean replicas
            "Ping all security, CDS and DTS servers and replicas."}
    }

    upvar 1 local_args cargs 
    set local_args $cargs
    set _dcp_available "DCE services available"
    set err_message ""
    set return_msg ""
    set tmp_message ""
    set cds_server_answered 1
    set dts_server_answered 1
    set sec_server_answered 1

    parseargs $arg_table local_args -no_leftovers

    if {[info local help_prose] > 0} {return}

    if {[llength $local_args] > 1} {
        error "Unrecognized argument [lindex $local_args 1]."
    } elseif {[llength $local_args] == 0} {
        set cell_name [name expand /.:]
    } else {
        set cell_name $local_args
    }

    if {[info local clients] > 0} {
        #
        # Ping each host in the cell.
        #
        set _dcp_host_entries [format "%s/hosts" $cell_name]
        set host_list [directory list $_dcp_host_entries]
        foreach element $host_list {
            _dcp_cell_debug "Ping host $element"
            catch {host ping $element} msg
            if {$msg != 1} {
                set tmp_msg "\"$element\" did not respond to host ping."
                set err_message [_dcp_format_msg $err_message $tmp_msg]
            } else {
                foreach srv "cds-clerk dts-entity" {
                    catch {server ping $element/$srv} msg
                    if {$msg != 1} {
                        set tmp_msg "\"$element/$srv\" did not respond to server ping."
                        set err_message [_dcp_format_msg $err_message $tmp_msg]
                        break
                    }
                }
            }
        }
        set not_clients 0
        if {[string length $err_message] > 0} {
            error $err_message
        }
    } else {
        set not_clients 1
    }
    if {$not_clients == 0} {
        set return_msg [_dcp_format_msg $return_msg "DCE clients available"]
    }

    if {[info local replicas] > 0} {
        #
        # Ping all the security and cds replicas in the cell.
        #
        set _dcp_available "DCE servers available"
        set cds_server_list [_dcp_find_cds_servers $cell_name -replicas]
        foreach element $cds_server_list {
            _dcp_cell_debug "Ping cds server $element"
            catch {server ping $element} msg
            if {$msg != 1} {
                set tmp_msg "\"$element\" did not respond to server ping."
                set err_message [_dcp_format_msg $err_message $tmp_msg]
                set cds_server_answered 0
            }
        }
        set sec_server_list [registry catalog $cell_name]
        foreach element $sec_server_list {
            _dcp_cell_debug "Ping security server $element"
            catch {server ping $element} msg
            if {$msg != 1} {
                set tmp_msg "\"$element\" did not respond to server ping."
                set err_message [_dcp_format_msg $err_message $tmp_msg]
                set sec_server_answered 0
            }
        }
        set not_replicas 0
    } else {
        set not_replicas 1 
    }

    if {$not_clients == 1 && $not_replicas == 1} {
        #
        # Ping only the master security server and the cds clearinghouse
        # which has write-permission on the root (/.:) directory.
        #
        set msg 0
        set sec_master_server [registry catalog $cell_name -master]
        _dcp_cell_debug "Ping security master $sec_master_server"
        catch {server ping $sec_master_server} msg
        if {$msg != 1} {
            set tmp_msg "\"$sec_master_server\" did not respond to server ping."
            set err_message [_dcp_format_msg $err_message $tmp_msg]
            set sec_server_answered 0
        }

        set cds_server_list [_dcp_find_cds_servers $cell_name]
        foreach element $cds_server_list {
            _dcp_cell_debug "Ping cds server $element"
            catch {server ping $element} msg
            if {$msg != 1} {
                set tmp_msg "\"$element\" did not respond to server ping."
                set err_message [_dcp_format_msg $err_message $tmp_msg]
                set cds_server_answered 0
            }
        }
    }

    if {$not_clients == 1 || ($not_clients == 0 && $not_replicas == 0)} {
        #
        # Ping the dts server entities
        #
        set dts_server_list [dts catalog $cell_name]
        foreach element $dts_server_list {
            _dcp_cell_debug "Ping dts server $element"
            catch {server ping $element} msg
            if {$msg != 1} {
                set tmp_msg "\"$element\" did not respond to server ping."
                set err_message [_dcp_format_msg $err_message $tmp_msg]
                set dts_server_answered 0
            }
        }
    }

    if {$not_clients == 1 || $not_replicas == 0} {
        if {$sec_server_answered == 1 && \
            $cds_server_answered == 1 && \
            $dts_server_answered == 1 } {
            set return_msg [_dcp_format_msg $return_msg $_dcp_available]
        } else {
            error $err_message
        }
    }
    return $return_msg
}


#
# _dcp_show_cell:
#     Show the different services available in the cell.  Shows the
#     security servers, cds server host names, dts server host names
#     and client names.
#
proc _dcp_show_cell {local_args} {
    set arg_table {
        {-simplename boolean simple
            "List all server and host entries in simple format."}
        }

    upvar 1 local_args cargs 
    set local_args $cargs
    set simple 0

    parseargs $arg_table local_args -no_leftovers

    if {[info local help_prose] > 0} {return}

    if {[llength $local_args] > 1} {
        error "Unrecognized argument [lindex $local_args 1]."  
    } elseif {[llength $local_args] == 0} {
        set cell_name [name expand /.:]
    } else {
        set cell_name $local_args
    }

    set _dcp_cell_info ""

    #
    # security servers
    #
    _dcp_cell_debug "Show security servers"
    set _dcp_cell_info "\{secservers"
    foreach element [registry catalog $cell_name] {
        if {$simple == 1} {
            set element [string range $element [string first subsys $element] end]
        }
        set _dcp_cell_info "$_dcp_cell_info\n"
        set _dcp_cell_info "$_dcp_cell_info $element" 
    }
    set _dcp_cell_info [format "%s\}\n" $_dcp_cell_info]

    #
    # cds servers
    #
    _dcp_cell_debug "Show cds servers"
    set cds_server_list ""
    set cdsservers [clearinghouse catalog $cell_name]
    _dcp_cell_debug "cdsservers is $cdsservers"
    foreach element $cdsservers {
        _dcp_cell_debug "Working on $element"
        set no_expand 0
        set towers [attrlist getvalues [object show $element] -type CDS_Towers]
        set binding_pair [lindex $towers 0]
        _dcp_cell_debug "binding_pair is $binding_pair"
        if {[catch {name get $binding_pair} msg] == 0} {
            set cds_server $msg
        } else {
            set cds_server [lindex $binding_pair 1]
            set no_expand 1
        }
        _dcp_cell_debug "cds_server is $cds_server"
        if {($simple == 1) || ($no_expand == 1)} {
            set cds_server_list "$cds_server_list\n $cds_server"
            _dcp_cell_debug "Wrote $cds_server"
        } else {
            if {$cell_name == "" || $cell_name == "/.:"} {
                set cds_server_list "$cds_server_list\n [name expand /.:/$cds_server]"
            } else {
                set cds_server_list "$cds_server_list\n [concat $cell_name/$cds_server]"
            }
            _dcp_cell_debug "Wrote $cds_server"
        }
    }

    set _dcp_cell_info "$_dcp_cell_info\{cdsservers$cds_server_list\}\n"

    #
    # dts servers
    #
    _dcp_cell_debug "Show dts servers"
    _dcp_cell_debug "Get list of lan-profiles in cell-profile"
    set known_lan_profs [rpcprofile show $cell_name/cell-profile \
                         -interface {6f264242-b9f8-11c9-ad31-08002b0dc035 1.0}]
    _dcp_cell_debug "lan-profiles from cell-profile is $known_lan_profs"

    set already_found ""
    set got_dts_server 0
    set result "\{dtsservers"
    foreach lp $known_lan_profs {
        _dcp_cell_debug "Working on lan $lp..."
        foreach line [rpcprofile show [lindex $lp 1] \
                      -interface {019ee420-682d-11c9-a607-08002b0dea7a 1.0}] {
            set got_dts_server 1
            _dcp_cell_debug "Adding line '$line'"
            if {$simple == 1} {
                set result "$result\n [lindex [name parse [lindex $line 1]] 1]"
            } else {
                set result "$result\n [lindex $line 1]"
            }
            lappend already_found [lindex $line 1]
        }
    }

    #
    # Look through the cell root directory for any other profile
    # objects that may contain dts servers.  When configuring a
    # client, additional lan's, if any, are created in the root
    # directory.
    #
    _dcp_cell_debug "Looking through the root directory for more profiles"
    set object_list [directory list $cell_name -objects]
    _dcp_cell_debug "Objects to look through are $object_list"
    set new_lan_profs ""
    foreach element $object_list {
        _dcp_cell_debug "Working on object $element..."
        set pr_val [attrlist getvalues [object show $element] -type CDS_Class]
        set pr_name [lindex [name parse $element] 1]
        if {$pr_val == "RPC_Profile"} {
            if {$pr_name != "cell-profile" && $pr_name != "lan-profile"} {
                _dcp_cell_debug "Found another RPC profile $element"
                lappend new_lan_profs $element
            }
        }
    }

    _dcp_cell_debug "Final list of new lan profiles is $new_lan_profs"

    foreach lp $new_lan_profs {
        _dcp_cell_debug "Working on lan $lp..."
        if {[catch {set lan_entries [rpcprofile show $lp \
                    -interface {019ee420-682d-11c9-a607-08002b0dea7a 1.0}]} msg] != 0} {
            set lan_entries ""
        }
        foreach line $lan_entries {
            set got_dts_server 1
            set found_entry 0
            set tmpres "[lindex $line 1]"
            _dcp_cell_debug "Checking new entry $tmpres..."
            foreach tmp $already_found {
                _dcp_cell_debug "Checking against existing entry $tmp"
                if {$tmp == $tmpres} {
                    set found_entry 1
                }
            }
            if {$found_entry == 0} {
                _dcp_cell_debug "Adding line '$line'"
                if {$simple == 1} {
                    set result "$result\n [lindex [name parse [lindex $line 1]] 1]"
                } else {
                    set result "$result\n [lindex $line 1]"
                }
                lappend already_found $tmpres
            }
        }
    }

    if {$got_dts_server == 1} {
        set _dcp_cell_info "$_dcp_cell_info$result\}\n"
    } else {
        set _dcp_cell_info "$_dcp_cell_info\{dtsservers\}\n"
    }

    #
    # hosts
    #
    _dcp_cell_debug "Show dce hosts"
    set host_name_path $cell_name/hosts
    if {$simple == 1} {
        set host_name [directory list $host_name_path -simplename]
    } else {
        set host_name [directory list $host_name_path]
    }

    set _dcp_cell_info "$_dcp_cell_info\{hosts"
    foreach element $host_name {
        if {$simple == 1} {
            set element hosts/$element
        }
        set _dcp_cell_info "$_dcp_cell_info\n"
        set _dcp_cell_info "$_dcp_cell_info $element" 
    }
    set _dcp_cell_info "$_dcp_cell_info\}"
    return $_dcp_cell_info
}


#
# _dcp_catalog_cell:
#     Returns a list of the local and foreign cells currently
#     registered with the specified cell.
#
proc _dcp_catalog_cell {local_args} {
    upvar 1 local_args cargs
    set local_args $cargs

    parseargs "" local_args -no_leftovers

    if {[info local help_prose] > 0} {return}

    if {[llength $local_args] > 1} {
        error "Unrecognized argument [lindex $local_args 1]."
    } elseif {[llength $local_args] == 0} {
        set cell_name [name expand /.:]
    } else {
        set cell_name $local_args
    }

    set _dcp_cat_info ""
    set first_write 0

    #
    # Look through the registry on the specified cell and try to
    # figure out which account entries are cell names.  The
    # 'krbtgt' prefix is all we can go by for now.
    #
    _dcp_cell_debug "Set up the list of accounts to play with"
    set account_list [account catalog $cell_name]

    set cell_constant "krbtgt"
    foreach element $account_list {
        _dcp_cell_debug "Work on account $element..."
        set account_split [split $element /]
        if {[llength $account_split] == 5} {
            set intermediate [lindex $account_split 3]
            if {$intermediate == $cell_constant} {
                set found_cell [lindex $account_split 4]

                #
                # Ah, we have a name, but is it really a cell
                # name, or an alias for an existing cell?
                #
                _dcp_cell_debug "Found possible cell name, examine it closer"
                set long_name [concat $cell_name/$cell_constant/$found_cell]
                _dcp_cell_debug "Check $long_name for alias value"
                set tmp [principal show $long_name]
                set alias [attrlist getvalues $tmp -type alias]
                _dcp_cell_debug "alias is $alias"
                if {$alias == "no"} {
                    if {$first_write == 0} {
                        set _dcp_cat_info "$_dcp_cat_info/.../$found_cell"
                    } else {
                        set _dcp_cat_info "$_dcp_cat_info\n/.../$found_cell"
                    }
                    set first_write 1
                }
            }
        }
    }
    return $_dcp_cat_info
}


#
# _dcp_list_find:
#     Utility function to search through a list for specific entries.
#
proc _dcp_list_find {search_list pattern} {
    set found_items ""
    set size [llength $search_list]

    while {$size > 0} {
        set size [expr $size - 1]
        set index [lsearch $search_list $pattern]
        if {$index == -1} {
            return $found_items
        }
        lappend found_items [lindex $search_list $index] 
        set search_list [lreplace $search_list $index $index]
    }
    return $found_items
}


#
# _dcp_format_msg:
#    Utility to format an error message.
#
proc _dcp_format_msg {error_message new_element} {
    if {[string length $error_message] > 0} {
        return [format "%s\n%s" $error_message $new_element]
    } else {
        return $new_element
    }
}


#
# _dcp_find_cds_servers:
#    Utility to find a list of all cds servers currently
#    configured within the cell. 
#
proc _dcp_find_cds_servers {args} {
    set cell_name [lindex $args 0]
    set cell_home_contents [directory show $cell_name]
    set replica_list [attrlist getvalues $cell_home_contents -type CDS_Replicas]

    set find_replicas 0
    if {[lsearch $args -replicas] != -1} {
        set find_replicas 1
    }
    if {$find_replicas == 0} {
        foreach replica $replica_list {
            set replica_type [attrlist getvalues $replica -type Replica_Type]
            if {[string compare $replica_type Master] == 0} {
                return [attrlist getvalues $replica -type CH_Name]
            }
        }
    } else {
        foreach element $replica_list {
            lappend cds_server_list [attrlist getvalues $element -type CH_Name]
        }
    }

  return $cds_server_list
}


#
# _dcp_find_obj_binding
#    Utility to find an objects binding by looking at the tower information.
#
proc _dcp_find_obj_binding {obj_name} {
    set tower_list [attrlist getvalues [object show $obj_name] -type CDS_Towers]
    if {[llength [lindex $tower_list 0]] <= 1} {
        return [lindex [list $tower_list] 0]
    } else {
        return [lindex $tower_list 0]
    }
}


#
# _dcp_cell_debug:
#    Utility used to display debug output.
#
proc _dcp_cell_debug {args} {
    global CELL_DEBUG
    if {$CELL_DEBUG != 0} {
        puts stderr "DEBUG: [lindex [info level [expr [info level] - 1]] 0]:\
                            [string range $args 1 [expr [string length $args] - 2]]"
    }
}

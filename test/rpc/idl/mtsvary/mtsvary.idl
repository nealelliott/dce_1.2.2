/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: mtsvary.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:14:58  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:53:44  marty]
 *
 * Revision 1.1.4.1  1995/12/11  20:09:12  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:32:49  root]
 * 
 * Revision 1.1.2.2  1993/08/11  16:28:18  ganni
 * 	tests for new IDL functionality
 * 	[1993/08/11  16:15:58  ganni]
 * 
 * $EndLog$
 */
/*
*/
[
uuid(a9516f1e-b947-11ca-a3f0-08002b107359),
version(0.0)
]
interface mtsvary
{
    const long DIM1 = 15;
    const long DIM2 = 10;
    const long DIM3 = 8;

    void op0( [in] handle_t i,
              [in,out,first_is(*f1)] small sm[DIM1],
              [in,out] short *f1 );

    void op1( [in] handle_t j,
              [in,out,last_is(,*l2)] float fl[DIM1][DIM2],
              [in,out] unsigned short *l2 );

    typedef struct three_ways_t {
        [first_is(f1,f2,f3),last_is(l1,l2,l3)]unsigned long a[DIM1][DIM2][DIM3];
        unsigned small f1;
        small l1;
        unsigned short f2;
        short l2;
        unsigned long f3;
        long l3;
    } three_ways_t;

    void op2( [in] handle_t k,
              [in,out] three_ways_t *p_t );

/*
 *  Tests added for MTS coverage - A.I.Hinxman  27 Apr 1992
 */
    const long B_SIZE = 100;    /* Less than the "point_at" threshold */
    const long COOKIE1 = 0x01234567;
    const long COOKIE2 = 0x89ABCDEF;
    const long COOKIE3 = 0x456789AB;
    const long COOKIE4 = 0xCDEF0123;
    typedef enum {red, green, blue, cyan, yellow, magenta} colors;
    typedef [v1_enum] enum {high, low} level;
    typedef union  switch(long a) arms {
            default: long d;
    } u_t;

    void opc1( [in] handle_t h,
               [in,out] level v[B_SIZE],
               [in,out] boolean b[B_SIZE],
               [in,out] hyper hy[B_SIZE],
               [in,out] u_t u[B_SIZE],
               [in,out] small sm[B_SIZE],
               [in,out] small *p_f,
               [in,out] unsigned small *p_l,
               [in,out,first_is(*p_f),last_is(*p_l)]colors a[B_SIZE]
            );
}

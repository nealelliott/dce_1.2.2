This is the README for dlg_client which is a functional test for delegation.

dlg_client makes use of two other processes dlg_intermediary
located in this directory and acl_server which is located in
the directory src/test/security/acl_edit/svr_example.

dlg_client acts as an initiator in a delegation chain.
dlg_intermediary acts as the delegate in the delegation chain.
acl_server acts as the target in a delegation chain.
alternately, you can configure so that the DFS server is the 
target in the delegation chain by using the -e option to
dlg_intermediary and specifying a pathname to a DFS object.
For example,

dlg_intermediary -e /.:/fs/junk 

uses the acl associated with the file "junk" which is managed 
by the DFS server.

dlg_client runs as the principal dlg_test.
dlg_intermediary runs as the principal dlg_svr.
acl_server runs as the principal aclmgr.

To run the test, do the following:

1. Copy dlg_client, dlg_intermediary executables and
   dlg_rgy_setup, dlg_acl_setup and neg_dlg_acl_setup scripts 
   to a directory where the acl_server is also there.
2. login as cell_admin and dlg_rgy_setup script.
3. start acl_server -d -e (you may wish to put it in the background)
4. login as cell_admin and run dlg_acl_setup script
5. Start dlg_intermediary -dbg [-e pathname]
6. run dlg_client with different options:
	-c, -la, -ra, -nbi, -dis, -name
   the options to dlg_client are explained below
7. run dlg_client with no options


Negative test for delegation and impersonation:
----------------------------------------------

There are also negative tests for delegation
and impersonation, to run these, do the following:

1. login as cell_admin and run neg_dlg_acl_setup script
2. run dlg_client -neg 
     [negative delegation test]
3. run dlg_client -dt z
     [negative impersonation test]

dlg_client -la
Stuffs attribute in EPAC and uses client side sec_login and
sec_cred calls to make sure it's really there

dlg_client -ra
Stuffs attr in EPAC and makes simple RPC to dlg_intermediary
which uses sec_cred calls to make sure it's really there).

dlg_client -c  
Does a sec_login_become_initiator, enabling traced delegation
and uses sec_login_cred_get_initiator and sec_cred calls to
make sure the setup worked


dlg_client -nbi 
Makes RPC to dlg_intermediary without having called
sec_login_become_initiator first and expects to get the error
sec_login_s_deleg_not_enabled back).

dlg_client -dis
It enables delegation, then disables it via sec_login_disable_delegation()  
call, then tries to make the dlg_test call to the dlg_intermediary, which
should get an error saying that delegation isn't enabled.  dlg_client expects
to get this error back and succeeds if it does.


dlg_client -sdt i -cdt i
Test impersonation. With this testcase sec_login_become_impersonator
is called instead of sec_login_become_delegate.
The intermediary "impersonates" the delegation
initiator.  dlg_svr is the impersonator.

dlg_client -name
-name tests sec_cred's support on rpc_s_authz_name.  The main functions
tested are sec_cred_inq_auth_service_info() and sec_cred_get_client_princ_name()
.
It also tests authz's compliance with sec_cred's functions, which means that
the rest fo sec_cred's functions will not comply with rpc_s_authz_name.

dlg_client    
Enables delegation, calls dlg_test_access() at intermediary,
intermediary becomes a delegate and calls sec_acl_test_access()
at the acl_server (client is 'dlg_test', intermediary is
'dlg_svr') The only ACL entries in the acl_server are the ones
set up by the dlg_acl_setup script which allow dlg_test rwx
permissions and allow dlg_svr rwx permisssions as a delegate
only.  So, if the test access works, that means that the target
server (acl_server) successfully saw both the initiator and
delegate identities and that the acl access check algorithm,
that now understands delegate entries, works).



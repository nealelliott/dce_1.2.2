# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
# 
# HISTORY
# $Log: gds_xds_str_001.data,v $
# Revision 1.1.6.2  1996/03/11  02:42:46  marty
# 	Update OSF copyright years
# 	[1996/03/10  20:06:53  marty]
#
# Revision 1.1.6.1  1995/12/11  21:58:33  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  20:58:09  root]
# 
# Revision 1.1.4.1  1994/07/21  20:02:25  mcg
# 	Set BINDIR to reflect location in dce1.1
# 	[1994/07/21  20:02:07  mcg]
# 
# Revision 1.1.2.2  1993/11/08  21:37:03  mhickey
# 	Removed unused NCLIENTS variable, reordered,
# 	fixed some comments, added settings for GDS_NCLIENTS
# 
# 	Defect 9398
# 	[1993/11/08  21:30:25  mhickey]
# 
# Revision 1.1.2.1  1993/11/02  22:21:01  mhickey
# 	fixing ode glitch
# 	[1993/11/02  22:20:12  mhickey]
# 
# 	Added variable to cause sleeps around tree create and delete
# 	to allow debug checks.
# 
# 	defect 9209.
# 	[1993/11/02  21:51:11  mhickey]
# 
# $EndLog$
#
############################################################################
# TITLE: gds_xds_str_001.data
#


#
# ASSOCIATION:
#       This script is part of the gds_xds_str_001 system test.  The DCE
#       system test plan describes fully the goals of this test.
#
# SYNTAX:
#	not executable - contains variable settings that describe the 
#                        environment and scope of the gds_xds_str_001 test
#                        run.
#       
# OBJECTIVE:
#	To describe the clients of a gds_xds_str_001 test run, the level of 
#       stress desired, the connotation of each stress level, the location
#       of tools, logs, executables, etc.  See comments below.
#
# DESCRIPTION:
#       This file should be updated for each test run.
#
# CALLED FROM:
#       Passed to gds_xds_str_001 on the command line as "-f <datafile>".

#
############################################################################

#
# List of variables needed - If any of these variables are not assigned
#                            values below, the driver will complain and
#                            exit.
#
VARLIST="CLI_MACHINES CONFIG_GDS GDS_DSADNPREFIX GDS_INITIALDSA "
VARLIST="$VARLIST GDS_DUAPORTBASE GDS_DSAPORTBASE GDS_HOSTCONFIG "
VARLIST="$VARLIST GDS_HOSTCONFIG TESTCASEDIR TESTCASE_LIST brdXu_files "
VARLIST="$VARLIST brdXu_type bXrd1u_type bXrd1u_files bXrdXu_type bXrdXu_files"
VARLIAT="$VARLIST bXrdschX_type bXrdschX_files BINDIR TMP_DIR "
VARLIST="$VARLIST LOG_DIR GDSSETUP_WAIT READY_WAIT EXIT_WAIT HOURS CLEANUP"
VARLIST="$VARLIST D2_LOGDIR HIGH_THREADS HIGH_CLIENTS MEDIUM_THREADS"
VARLIST="$VARLIST MEDIUM_CLIENTS LOW_THREADS LOW_CLIENTS STRESS_LEVEL"
VARLIST="$VARLIST TESTCASES ITERATION_SLEEP LOG_BASE LOG_ROOT STTOOLS_DIR"

###########################################################
#       VARIABLES AFFECTING THE SCOPE OF THE TEST         #
#       -----------------------------------------         #
#         what machines are involved                      #
#         how many clients                                #
#         what principal and password to use              #
###########################################################
#
# machines involved in the test.  The first machine will be the server for 
# the GDS requests and the second will be configured as the default DSA for
# dir-id 2 unless mach_1 and mach_2 are assigned different values below. See
# the comment after the assignment of CONFIG_GDS below for more information.
#
CLI_MACHINES="<machine_1> <machine_2> <machine_3> <machine_4>"

#
# Switch for configuring GDS.  If =1, then gds will be deconfigured and
# setup according to the information below on the client machines.  GDS
# will also be configured if -G is specified on the gds_xds_str_001
# command line.
#
CONFIG_GDS=0

#
# Variables for setup of GDS - This sets up the directories on the first two
#                              machines in the client list as DSA's dsa-m1
#                              and dsa-m2, such that the gds_xds_str_001 or
#                              the xds functional tests can be run.
#                              To force certain machines to be used as
#                              dsa-m1 and/or dsa-m2, assign mach_1 the
#                              machine name for the dsa-m1 machine and assign
#                              mach_2 the machine name for the dsa-m2 machine.
#                              For Example: 
#                                  mach_1=<machine_1>
#                                  mach_2=<machine_2>
#
#                              To setup other configs, add additional 
#                              HOSTCONFIG assignments to those below.
#
# NOTE: Any line containing the string GDS and an underscore will be
#       copied into the input file for gdsSetup that the gds_xds_str_001
#       driver constructs if GDS is to be configured.  This being the case,
#       be careful about using this string in this file.
#
GDS_REQVARS="GDS_DSADNPREFIX GDS_DUAPORTBASE GDS_DSAPORTBASE GDS_NCLIENTS ALL_MACH GDS_HOSTCONFIG"
GDS_DSADNPREFIX="de dbp dap11 dsa"
GDS_INITIALDSA="1,mach_1"
GDS_DUAPORTBASE="2200"
GDS_DSAPORTBASE="2100"
#
# hostconfig lines have the form 
#  system:name=<dsa-name>:dir=<dir-id>,<gds-type>,<default-dsa>:dir=...
#
GDS_HOSTCONFIG="mach_1:name=dsa-m1:dir=1,Cli-Srv,mach_1:dir=2,Cli,mach_2"
GDS_HOSTCONFIG="$GDS_HOSTCONFIG mach_2:name=dsa-m2:dir=1,Cli-Srv,mach_1:dir=2,Cli-Srv,mach_2"

##########################################################################
#           VARIABLES THAT CONTROL THE DRIVER OPERATION                  #
#           -------------------------------------------                  #
#               where to find binaries                                   #
#               where to put logs, data, temp, and synch file(s)         #
#               maximum wait periods for clients to reach certain states #
#               Hours to run                                             #
#               Whether or not to remove logs from successful iterations #
#               The testcase files to run,                               #
#               The testcases that will setup and cleanup the test tree  #
##########################################################################
#
# Path to the testcase files
#
TESTCASEDIR=/dcetest/dcelocal/test/systest/directory/gds/gds_xds_str_001

#
# Testcase file that sets up for the testcase runs
#
SETUP_TESTCASE=gds_xds_str_001_brdX_bt
#
# Testcase file that cleans up after the testcase runs
#
CLEANUP_TESTCASE=gds_xds_str_001_brdX_dt
#
# list of the testcases, and a list of files for each testcase
#
TESTCASE_LIST="brdXu bXrd1u bXrdXu bXrdschX"
#
# Testcase to run
#
TESTCASES="variant"
#
# each testcase has a type which is one of "b" - needs a bind in the START
#                                                file,
#                                      or "bX" - does the binds in the 
#                                                threads.
# and a list of the files that describe the per-thread operations for 
# the testcase.
#
# brdXu testcase - one bind, multiple threads. Each thread does multiple
#                  reads.
#
brdXu_type=b
brdXu_files="gds_xds_str_001_brdXu_1 gds_xds_str_001_brdXu_3 gds_xds_str_001_brdXu_2"
#
# bXrd1u testcase - multiple threads, each thread does multiple
#                   bind-read-unbind.
#
bXrd1u_type=bX
bXrd1u_files=gds_xds_str_001_brd1u
#
# bXrdXu testcase - multiple threads, each thread does multiple
#                   bind-read-unbind.
#
bXrdXu_type=bX
bXrdXu_files="gds_xds_str_001_bXrdu_1 gds_xds_str_001_bXrdu_3 gds_xds_str_001_bXrdu_2"
#
# bXrdschX testcase - multiple threads, some threads doing multiple
#                     bind-read-unbind, and others doing multiple
#                     bind-search-unbind
#
bXrdschX_type=bX
bXrdschX_files="gds_xds_str_001_bXrdschX_sch1 gds_xds_str_001_bXrdu_1 gds_xds_str_001_bXrdschX_sch2 gds_xds_str_001_bXrdu_3 gds_xds_str_001_bXrdschX_sch4  gds_xds_str_001_bXrdu_2 gds_xds_str_001_bXrdschX_sch3"

#
# Path to the xt_test binary
#
BINDIR=/dcetest/dcelocal/test/tet/functional/directory/xds/tools

#
# Directory where temporary files will be created.
#
TMP_DIR=$STTMPDIR

#
# Log directory
#
#LOG_DIR=/dcetest/dcelocal/status/current/gds_xds_str_001
LOG_ROOT=$STSTUB
LOG_BASE=$STSTUB/$SCRIPT
LOG_DIR=$STSTUB/$SCRIPT/working

#
# Directory where the systest tools are
#
STTOOLS_DIR=$STDEXC

#
# Maximum wait period for gdsSetup in minutes
#
GDSSETUP_WAIT=40

#
# Maximum wait periods (in minutes) for all clients to complete each phase
# (READY, TRIED LOCK, and EXITTED) of the test, in minutes.
#
READY_WAIT=5
EXIT_WAIT=10

#
# Sleep interval between iterations (in seconds)
#
ITERATION_SLEEP=60

#
# Hours to run
#
HOURS=48

#
# Cleanup client logs, etc
#
CLEANUP=1

#
# number of threads per client and total clients for each level of stress
#
# NOTES: The level of stress you can use is bounded by several factors 
#        beyond any implementation-related factors.  In particular, since
#        each operation causes a DSA to be spawned on the server side, 
#        the process table size can limit the number of clients/threads
#        you can run.  Another factor is the limits in GDS on IPC resource
#        allocation.  IPC resources are used on the client side of an 
#        operation for communication and state-storage between the client
#        process and the C-Stub process, and on the server side for 
#        communication and state-storage between the S-Stub process and the
#        DSA processes.  A major variable on the amount of IPC resources 
#        requested by GDS is the number of clients specifed during the 
#        GDS configuration.  If the number is less than the number of 
#        clients actually started, thent C-stubs and S-stubs may exit.
#        In light of this information, the limit of 256 on the clients
#        that you can specify during the configuration also becomes a limit
#        on the number of clients/threads that can be spawned per iteration.
#        Note that the number of clients/threads you can run may be around
#        half of the number of clients specified during the GDS configuration
#        because DSA processes persist for a short period of time after they
#        finish the operation for which they were spawned.  This means that
#        if operations are starting/exitting/starting in quick succesion,
#        the number of DSAs can become 
#           (X DSAs persisting after operation complete)
#         + (X DSAs spawned to handle new operations)
#         ----------------------------------------------
#         =  2X DSAs requiring IPC resources.
#
#        The possibility of this situation ocurring is heavily timing
#        dependent.
#  
#        XXX_GDS_NCLIENTS is the number of clients specified during the
#        GDS configuration.
#
# NOTE: HIGH   should come out to between 30 and 40 total threads
#       MEDIUM should come out to around 20-30 total threads
#       LOW    should come out to around 16 threads
#
HIGH_THREADS=8
HIGH_CLIENTS=4
HIGH_GDS_NCLIENTS=256
MEDIUM_THREADS=6
MEDIUM_CLIENTS=4
MEDIUM_GDS_NCLIENTS=150
LOW_THREADS=4
LOW_CLIENTS=4
LOW_GDS_NCLIENTS=50


########################################################
#      VARIABLES THAT CONTROL CLIENT EXECUTION         #
#      ---------------------------------------         #
#         number of file writes/reads                  #
#         time to bound on randomness of client sleeps #
########################################################
#
# D2_LOG directory on each system
#
D2_LOGDIR=/tmp


#
# Stress level
#
STRESS_LEVEL=LOW


#
# Client debug switch - DO NOT PUT IN VARLIST - this is not required
#
XT_TEST_DEBUG=""

#
# driver debug switch
#
DEBUG_SLEEP=0




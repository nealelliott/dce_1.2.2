# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: deflate.test,v $
# Revision 1.1.12.1  1996/10/02  17:17:00  damon
# 	Newest DFS from Transarc
# 	[1996/10/01  18:26:58  damon]
#
# Revision 1.1.6.2  1994/06/09  13:57:18  annie
# 	fixed copyright in src/file
# 	[1994/06/08  21:32:19  annie]
# 
# Revision 1.1.6.1  1994/02/04  20:11:00  devsrc
# 	Merged from 1.0.3a to 1.1
# 	[1994/02/04  15:08:59  devsrc]
# 
# Revision 1.1.4.1  1994/01/28  20:43:35  annie
# 	expand OSF copyright
# 	[1994/01/28  20:42:11  annie]
# 
# 	expand OSF copyright
# 
# Revision 1.1.2.2  1993/01/28  16:19:38  shl
# 	Transarc delta: ota-ot3802-deflate-needs-tlock 1.2
# 	  Selected comments:
# 	    The basic problem here is that epit_Deflate does not grab the volume's
# 	    tlock (since there is not volume_table tlock) and so it doesn't merge
# 	    with transactions that deleted files from the pages being deflated.
# 	    The conditions actually required to reproduce this problem in practice
# 	    are pretty damn obtuse.  That these changes actually accomplish this,
# 	    however, proves that they are not impossibly obtuse.  This first
# 	    revisions just allow that reproduction.  The actual bug fix will be in a
# 	    subsequent revision.
# 	    While using deflate.int.test to generate a large EC on one volume, the
# 	    last file in another volume, merge with that EC, then delete the
# 	    volume.  The epit_Deflates invoked by that operation will fail to
# 	    merge with the delete causing an error in the copies count of an
# 	    anode.
# 	    Basically moved Deflate function from volume_table.c where there is no
# 	    appropriate tlock to volume.c where it can grab the same tlock that
# 	    Delete uses.
# 	[1993/01/27  16:44:02  shl]
# 
# $EndLog$
# /* Copyright (C) 1993 Transarc Corporation - All rights reserved */
# $Header: /u0/rcs_trees/dce/rcs/file/episode/anode/deflate.test,v 1.1.12.1 1996/10/02 17:17:00 damon Exp $

# deflate -- cause an inconsistent aggregate by creating conditions that will
#     lead volume deletion to expose a bug in epit_Deflate (see OT 3802).

deflate 1
modify_afsdb anode on 31		# turn on code block counting
modify_afsdb anode on 29		# turn on preempts

open_device 1 1024 1024 5000

# big log => big ECs
create_aggregate 2000
(var=1) create_aggregate 100
(var=2) create_aggregate 150
(var=3) create_aggregate 200
(var=4) create_aggregate 250

create_vol fsync 0,,0 10		# for cheap fsync later

create_vol ec_heavy 0,,0 10000

create_file heavy

create_vol separate 0,,123 10000

create_file a0
create_file a1
create_file a2
create_file a3
create_file a4
create_file a5
create_file a6
create_file a7
create_file a8
create_file a9
create_file a10
create_file a11
create_file a12
create_file a13
create_file a14
create_file a15
create_file a16
create_file a17
create_file a18
create_file a19
create_file a20
create_file a21
create_file a22
create_file a23
create_file a24
create_file a25
create_file a26
create_file a27
create_file a28
create_file a29
create_file a30

create_file data "" "" heavy

create_file a31
create_file a32
create_file a33
create_file a34
create_file a35
create_file a36
create_file a37
create_file a38
create_file a39
create_file a40
create_file a41
create_file a42
create_file a43
create_file a44
create_file a45
create_file a46
create_file a47
create_file a48
create_file a49
create_file a50
create_file a51
create_file a52
create_file a53
create_file a54
create_file a55
create_file a56
create_file a57
create_file a58
create_file a59
create_file a60
create_file a61

create_file end_cap			# this prevents deflates

# delete all the other files in the fileset except data and end_cap.
delete_file a0
delete_file a1
delete_file a2
delete_file a3
delete_file a4
delete_file a5
delete_file a6
delete_file a7
delete_file a8
delete_file a9
delete_file a10
delete_file a11
delete_file a12
delete_file a13
delete_file a14
delete_file a15
delete_file a16
delete_file a17
delete_file a18
delete_file a19
delete_file a20
delete_file a21
delete_file a22
delete_file a23
delete_file a24
delete_file a25
delete_file a26
delete_file a27
delete_file a28
delete_file a29
delete_file a30
delete_file a31
delete_file a32
delete_file a33
delete_file a34
delete_file a35
delete_file a36
delete_file a37
delete_file a38
delete_file a39
delete_file a40
delete_file a41
delete_file a42
delete_file a43
delete_file a44
delete_file a45
delete_file a46
delete_file a47
delete_file a48
delete_file a49
delete_file a50
delete_file a51
delete_file a52
delete_file a53
delete_file a54
delete_file a55
delete_file a56
delete_file a57
delete_file a58
delete_file a59
delete_file a60
delete_file a61
delete_file separate.root

open_file fsync.root
set_status p=1

# Create large ECs.  Setup for deflate.int.test.  We need three files
# and two auxes per fork
open_file ec_heavy.root

create_file h1				# inflate volume table
write_aux acl 0 10			# including aux pages
create_file h2
write_aux acl 0 10
create_file h3
write_aux acl 0 10
create_file h4
write_aux acl 0 10
create_file h5
write_aux acl 0 10
create_file h6
write_aux acl 0 10
create_file h7
write_aux acl 0 10
create_file h8
write_aux acl 0 10
create_file h9
write_aux acl 0 10
create_file h10
write_aux acl 0 10
create_file h11
write_aux acl 0 10
create_file h12
write_aux acl 0 10
create_file h13
write_aux acl 0 10
create_file h14
write_aux acl 0 10
create_file h15
write_aux acl 0 10
create_file h16
write_aux acl 0 10
create_file h17
write_aux acl 0 10
create_file h18
write_aux acl 0 10
create_file h19
write_aux acl 0 10
create_file h20
write_aux acl 0 10
create_file h21
write_aux acl 0 10
create_file h22
write_aux acl 0 10
create_file h23
write_aux acl 0 10
create_file h24
write_aux acl 0 10
create_file h25
write_aux acl 0 10
create_file h26
write_aux acl 0 10
create_file h27
write_aux acl 0 10
create_file h28
write_aux acl 0 10
create_file h29
write_aux acl 0 10
create_file h30
write_aux acl 0 10
create_file h31
create_file h32
create_file h33
create_file h34
create_file h35
create_file h36
create_file h37
create_file h38
create_file h39
create_file h40
create_file h41
create_file h42
create_file h43
create_file h44
create_file h45
create_file h_end_cap
delete_file h1
delete_file h2
delete_file h3
delete_file h4
delete_file h5
delete_file h6
delete_file h7
delete_file h8
delete_file h9
delete_file h10
delete_file h11
delete_file h12
delete_file h13
delete_file h14
delete_file h15
delete_file h16
delete_file h17
delete_file h18
delete_file h19
delete_file h20
delete_file h21
delete_file h22
delete_file h23
delete_file h24
delete_file h25
delete_file h26
delete_file h27
delete_file h28
delete_file h29
delete_file h30
delete_file h31
delete_file h32
delete_file h33
delete_file h34
delete_file h35
delete_file h36
delete_file h37
delete_file h38
delete_file h39
delete_file h40
delete_file h41
delete_file h42
delete_file h43
delete_file h44
delete_file h45
quiesce fsync commit

fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test
fork deflate.int.test

# wait for these guys to get going
create_file wait
delete_file wait
create_file wait
delete_file wait
create_file wait
delete_file wait

# Merge file "data" with EC by using defer trans while deleting both files.
# This EC will include the volume tlock of ec_heavy and separate.  Note we are
# careful not to touch the quota tlock in fileset separate as deflate will
# touch that.
delete_file end_cap
quiesce fsync commit			# begin a fresh EC here...
modify_afsdb anode on 28		# defer trans
delete_file data
delete_file heavy
modify_afsdb anode off 28		# undefer trans

# now trigger deflate by deleting vol "separate"
delete_vol 0,,123

# force out the last log page...
open_file fsync.root
set_status p=7
set_status p=7
set_status p=7
set_status p=7
abort

end

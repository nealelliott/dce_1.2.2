/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: rs_unix.idl,v $
 * Revision 1.1.87.2  1996/03/09  23:28:49  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:44:14  marty]
 *
 * Revision 1.1.87.1  1995/12/08  17:36:05  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  16:55:44  root]
 * 
 * Revision 1.1.85.1  1993/10/05  22:30:56  mccann
 * 	CR8651 64 bit porting changes
 * 	[1993/10/04  19:12:20  mccann]
 * 
 * Revision 1.1.7.2  1993/08/04  13:38:36  cuti
 * 	Insert dce/ in front of imported file name
 * 	[1993/08/03  20:52:38  cuti]
 * 
 * Revision 1.1.5.2  1992/12/29  13:53:16  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/28  20:49:21  zeliff]
 * 
 * Revision 1.1.3.2  1992/06/02  21:03:19  sekhar
 * 	Drop the Unix interfaces code changes made by frisco.
 * 	[1992/06/01  20:18:07  sekhar]
 * 
 * Revision 1.1.1.2  1992/05/22  19:07:45  frisco
 * 	Initial revision - Server Unix interface support
 * 
 * $EndLog$
 */


/*  rs_unix.idl V=1 05/21/92 //littl/prgy/src/idl
**
** Copyright (c) Hewlett-Packard Company 1991
** Unpublished work. All Rights Reserved.
**
*/
/*
 *              Unix Interfaces
 *
 */


[
    /* V1 format UUID: 361993c0b000.0d.00.00.87.84.00.00.00 */
    uuid(361993C0-B000-0000-0D00-008784000000),
    version(1)
]

interface rs_unix

{

import "dce/rsbase.idl";

/* Registry - Unix Interface */

    const long rs_unix_max_buffer         = 65536;
    const long rs_unix_max_num_entries    = 64;
    

    /*
     *  r s _ u n i x _ q u e r y _ t
     *
     *  enumerated type specifying what criteria on which to
     *  query the registry for Unix information.
     * 
     */
    typedef enum {
         rs_unix_query_name,
         rs_unix_query_unix_num,
         rs_unix_query_none
    } rs_unix_query_t;


    /*
     *  r s _ u n i x _ q u e r y _ k e y _ t
     *
     *  union for query key informaion
     * 
     */
    typedef union switch (rs_unix_query_t query) {
        case rs_unix_query_name:
            struct {
                signed32            name_len;
                sec_rgy_name_t      name;
            } name;

        case rs_unix_query_unix_num:
            signed32    unix_num;

        default:
            ;              /* Empty default branch */

    } rs_unix_query_key_t;

    /*
     *  r s _ u n i x _ g e t p w e n t s
     *
     *  returns an array of Unix passwd structures
     * 
     */
    [idempotent] void rs_unix_getpwents (
         [in]     handle_t                            h,
         [in]     rs_unix_query_key_t                 *key,
         [in]     unsigned32                           num,
         [in,out] sec_rgy_cursor_t                    *cursor,
         [out]    unsigned32                          *num_out,
         [out, last_is(*num_out), max_is(num)]
                  sec_rgy_unix_passwd_t               result[],
         [out]    rs_cache_data_t                     *cache_info,
         [out]    error_status_t                      *status
    );

    /*
     *  r s _ u n i x _ g e t m e m b e r e n t s
     *
     *  returns an array of Unix group or org structures
     * 
     */
    [idempotent] void rs_unix_getmemberents (
         [in]     handle_t                            h,
         [in]     sec_rgy_domain_t                    domain,
         [in]     rs_unix_query_key_t                 *key,
         [in]     signed32                             max_num_results,
         [in,out] sec_rgy_cursor_t                    *member_cursor,
         [in,out] sec_rgy_cursor_t                    *cursor,
         [out]    signed32                            *num_members,
         [out, last_is(*num_members), max_is(max_num_results)]
                  sec_rgy_member_t                    members[],
         [out]    rs_cache_data_t                     *cache_info,
         [out]    sec_rgy_unix_group_t                *result,
         [out]    error_status_t                      *status
    );

}

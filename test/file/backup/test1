#! /bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# test1
#
# tests help, apropos 
#
# HISTORY
# $Log: test1,v $
# Revision 1.1.12.1  1996/10/17  18:12:19  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:47:48  damon]
#
# Revision 1.1.5.2  1993/01/11  17:36:37  htf
# 	Embedded copyright notice
# 	[1993/01/11  16:53:10  htf]
# 
# Revision 1.1.2.2  1992/05/21  12:32:00  jaffe
# 	To convert the /bin/csh backup test scripts to /bin/sh.
# 	To change the scripts to use the recommended style of variable names.
# 
# 	$TALog: test1,v $
# 	Revision 4.6  1994/06/01  17:25:07  andi
# 	None of the files existed in the configuration!  Checked them all out
# 	and added them.
# 	[added by delta andi-db5496-checkout-backup-tests, r1.1]
# 
# Revision 4.5  1993/01/14  19:47:06  jaffe
# 	[merge of changes from 4.2 to 4.4 into 4.3]
# 
# Revision 4.3  1992/12/21  19:53:21  mcinerny
# 	Pick up the other two uses of help and make them accept non-zero status.
# 	[from r4.2 by delta mcinerny-ot6550-recognize-cmd-parser-exit-status-on-bogus-help-request, r1.2]
# 
# Revision 4.2  1992/10/02  20:30:27  jaffe
# 	Sync with OSF sources.
# 
# 	Added correct OSF headers.
# 	[from revision 4.1 by delta osf-cleanup-from-sept-25-92-drop-test, r1.1]
# 
# $EndLog$
#

: ${BAK_BIN_DIR=$1}

PATH=$PATH":"$BAK_BIN_DIR
#export PATH

echo ""
echo "***************** TEST1 *****************"
echo ""
for cmd in adddump addftentry addftfamily addhost apropos dump dumpinfo \
           ftinfo help jobs kill labeltape lsdumps lsftfamilies lshosts \
           quit readlabel restoredb restoredisk restoreft rmdump rmftentry \
           rmftfamily rmhost savedb scantape setexp status verifydb
do
  echo ""
  echo bak help $cmd
  bak help $cmd
  if [ $? -ne  0 ]
  then
    echo "FAILED unexpectedly for bak help $cmd"
  fi
  echo bak apropos $cmd   
  bak apropos -topic $cmd   
  if [ $? -ne  0 ]
  then
    echo "FAILED unexpectedly for bak apropos -topic $cmd"
  fi
done

echo ""
echo "TEST apropos an incorrect string"
echo bak apropos -topic foo
bak apropos -topic foo
if [ $? -ne 1 ]
then
  echo "Case 1.0 WORKED unexpectedly" 
fi

echo ""
echo "TEST help on an incorrect string"
echo bak help foo
bak help foo
if [ $? -ne  1 ]
then
  echo "Case 1.1 FAILED unexpectedly" 
fi

echo ""
echo "TEST general help capacity"
echo bak help
bak help
if [ $? -ne  0 ]
then
  echo "Case 1.2 FAILED unexpectedly"
fi

# ambiguous cases 
echo ""
echo "Ambiguous help commands"
bak help ls
if [ $? -ne  0 ]
then
  echo "Case 1.3 FAILED unexpectedly" 
fi

echo ""
echo bak help restore
bak help restore
if [ $? -ne  0 ]
then
  echo "Case 1.4 FAILED unexpectedly" 
fi

echo ""
echo bak help add
bak help add
if [ $? -ne  0 ]
then
  echo "Case 1.5 FAILED unexpectedly" 
fi

echo ""
echo bak help rm
bak help rm
if [ $? -ne  0 ]
then
  echo "Case 1.6 FAILED unexpectedly" 
fi

echo ""
echo "************************** TEST1 END *****************************"

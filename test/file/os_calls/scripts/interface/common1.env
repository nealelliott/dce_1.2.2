*
* @OSF_COPYRIGHT
*
* HISTORY
* $Log$
* $EndLog$
*

*
*  common.env --
*	This script will be called by any other of scripts to set up their
*        runing environment. This script subjects to change from time to time.

*
*  Requirement to run this scripts:
*     1. use include command to invoke this script.
*     2. run this script under DFS.
*



************************************************************************
*
* Define common variables.
*

* ENVIRONMENT VARIABLES AND CONSTANTS
* User can also set those variables by changing the definitions here.

* Print the current directory and the user name.

echo 
set thisScript common1.env
echo Run configuration $thisScript
echo
getenv USER

* Setting this env variables as general information.
getenv DEBUG

echo The login user is $USER
echo at host -- $ITL_HostName
set hostName $ITL_HostName
getwd currentDir
echo The current directory is $currentDir
echo 


* User changeable env vars or local vars we must take care of.
* ------------------------------------------------------------

* Setenv AGGRNAME to the name of an exported aggregate to be used in the test.
* If you have no aggreget to be used in the test simply ignore it.
* It has to a LFS aggregate no UFS aggregate for now.
getenv AGGRNAME
set aggrName $AGGRNAME
if ( $aggrName == "" ) {
  set aggrName epi1
}

* If the script invoking this one will do tests from a different path
* then you have to set following two path variables (localPath and dfsPath).
* The localpath could be "/usr/dfs/test/os_calls/interface" for example.
getenv LOCALPATH
set localPath $LOCALPATH

* No use currently.
getenv DFSPATH
set dfsPath $DFSPATH

* Chunk size may be changed later from cache manager.
set CHUNKSIZE 65536

* Set base name for filesets to be created.
set baseFtName string "test.fileset"

* Set the number of filesets to be created.
set numFilesets 5

echo The test enviroment is:
echo    aggrName    = $aggrName
echo    numFilesets = $numFilesets
echo    localPath   = $localPath
echo    dfsPath     = $dfsPath
echo    CHUNKSIZE   = $CHUNKSIZE
* ---------------------------------------------

* will be exported
*set cellName $ITL_CellName

* Set generic access flags for different platforms.

if ( $ITL_SystemType == aix ) {
  set accessFlagE $E_ACC 
  set accessFlagR $R_ACC 
  set accessFlagW $W_ACC 
  set accessFlagX $X_ACC 
}
else {
  if ( $ITL_SystemType == solaris ) {
    set accessFlagE $F_OK 
    set accessFlagR $R_OK 
    set accessFlagW $W_OK 
    set accessFlagX $X_OK 
  }
  else {
    if ( $ITL_SystemType == sparc ) {
      set accessFlagE $F_OK 
      set accessFlagR $R_OK 
      set accessFlagW $W_OK 
      set accessFlagX $X_OK 
    }
    else {
      if ( $ITL_SystemType == osf1 ) {
	set accessFlagE $E_ACC 
	set accessFlagR $R_ACC 
	set accessFlagW $W_ACC 
	set accessFlagX $X_ACC 
      }
      else {
        echo WARNING: Do not know the current system type.
      }
    }
  }
}
set testDir string ("tdir" + $ITL_ProcessId)
set testFile string tfile
set file64k vecnum64k
set string64k string64k
set vector64k vector64k
set tmpDir string "/tmp"
set sleepTime 2000

set dceRoot /...
set dfsConjunc /:

* the current maximum dcache entry is 100, May be changed later.
set MAXDCACHEENTRY 100

* SCRIPT VARIABLES AND CONSTANTS

set errorMessage ""
set errorCounter 0

* This is 64k.
set CONST64K 65536

************************************************************************
*
* Define clearDir procedure.
*

set clearDir_Proc proc 1 dirName string proc_END
  echo Clear @dirName directory.
  verifyStatus false
  chmod . 0777
  chmod @dirName 0777
  opendir @dirName dirPtr
  readdir @dirPtr dirInfo
  readdir @dirPtr dirInfo
  do
    readdir @dirPtr dirInfo
    set readFlag @CommandResult
    if ( @dirInfo.d_name != ".." && @dirInfo.d_name != "." && @readFlag == 0 ) {
      set var int 0
      set fname (@dirName+"/"+@dirInfo.d_name)
      chmod @fname 0777
      remove @fname
      if ( @ITL_Status != 0 ) {
        stat @fname var
        if ( @ITL_Status != 0  && @ITL_Status == @ENODEV ) {
          if ( @var == 0 ) {
            echo The file is special file, use fts to remove it.
            set commd ("fts delmount "+@fname)
            shellexec commd
          }
        }
        else {
          if ( @var.st_mode & $S_IFDIR ) {
* That is a bug in recursive procedure.
            rmdir @fname
            if ( @ITL_Status != 0 ) {
              set tempFlag @readFlag
              exec clearDir_Proc @fname
              set readFlag @tempFlag
              verifyStatus false
            }
          }
        }
      }
    }
  while ( @readFlag == 0 )
  closedir @dirPtr
  rmdir @dirName 
  verifyStatus true
proc_END


* Prepare the test dir.
verifyStatus false
access $testDir $accessFlagE
if ( $ITL_Status == 0 ) {
  exec clearDir_Proc $testDir
}
mkdir $testDir 0777
if ( @ITL_Status != 0 ) {
  set comm ("rm -r " + $testDir )
  shellexec comm
  mkdir $testDir 0777
}
verifyStatus true

************************************************************************
*
* Define errorMessage procedure
*

set err_Process proc proc_END
*****
	echo @errorMessage
	set errorCounter (@errorCounter + 1)
*****
proc_END


*
* This procedure requires two parameters param.0 is the script name and
* param.1 is the errorCounter.
*

set report_Proc proc 2 arg1 string arg2 int proc_END
* This procedure reports the results of the script execution.
if ( @arg2 != 0 ) {
   echo @arg1 FAILED with @arg2 errors."
}
else {
   echo @arg1 PASSED.
}
proc_END

echo
echo common1.env done
echo

/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: ary.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:26:40  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:59:23  marty]
 *
 * Revision 1.1.4.1  1995/12/11  20:02:35  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:42:40  root]
 * 
 * Revision 1.1.2.4  1993/01/25  18:03:24  bbelch
 * 	Fix duplicate log
 * 	[1993/01/25  17:34:23  bbelch]
 * 
 * Revision 1.1.2.3  1993/01/11  22:10:49  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  18:03:19  bbelch]
 * 
 * Revision 1.1.2.2  1992/10/12  16:26:06  cuti
 * 	Remove hardcoded protocol seq and endpoint instead using all_protoseq.
 * 	[1992/10/12  14:39:22  cuti]
 * 
 * 	Remove hardcoded protocol seq and endpoint instead using all_protoseq.
 * 	[1992/10/09  17:56:09  cuti]
 * 
 * Revision 1.1  1992/01/19  03:34:37  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
#
#
# Copyright (c) 1991 by
#    Hewlett-Packard Company, Palo Alto, Ca.
#
# Permission to use, copy, modify, and distribute this
# software and its documentation for any purpose and without
# fee is hereby granted, provided that the above copyright
# notice appear in all copies and that both that copyright
# notice and this permission notice appear in supporting
# documentation, and that the name of Hewlett-Packard Company not
# be used in advertising or publicity pertaining to distribution
# of the software without specific, written prior permission.
# Hewlett-Packard Company makes no representations about the
# suitability of this software for any purpose.  It is provided
# "as is" without express or implied warranty.
#
#
# DCE API Test
#
*/



[uuid(40e75346-1000-0000-0d00-00c366000000),
version(2)
]


/*
 * a r r a y t e s t
 *
 * Interface to test nidl's handling of array types and their associated
 * attributes.  The inconsistent use of last_is and max_is as type
 * attributes (old style) and as field attributes (new style) as well
 * as the inconsistent use vs ellision of certain type keywords is
 * intentionally done as a test of the nidl compiler's parser.
 */

interface arraytest {

const long int arraytest_c1 = 10;

/*
 * The first set of operations in the arraytest interface test the basic
 * functionality of [in], [out], and [in,out] fixed size array, fixed
 * size arrays with last_is, and open arrays.
 */

/*
 * a r r a y t e s t _ t 1
 * a fixed size array of scalars
 */
typedef long int arraytest_t1[arraytest_c1];


/*
 * a r r a y t e s t _ t 2
 * a open array of scalars
 */
typedef long int arraytest_t2[];


/*
 * a r r a y t e s t _ o p 1
 *
 * send a fixed size array of integers; get back an array of their squares
 */

void arraytest_op1 (
    [in] handle_t h,
    [in] arraytest_t1 i,
    [out] arraytest_t1 o
);

/*
 * a r r a y t e s t _ o p 2
 *
 * send an initial piece of a fixed size array of long integers;
 * get back a same-sized initial segment of an array containing their squares
 */

void arraytest_op2 (
    [in] handle_t h,
    [in, last_is(l_i)] arraytest_t1 i,
    [out, last_is(*l_o)] arraytest_t1 o,
    [in] long int l_i,
    [in, out] long int *l_o
);

/*
 * a r r a y t e s t _ o p 3
 *
 * send an open array of integers; get back an open array of integers
 * of the same size containing their squares.
 */

void arraytest_op3 (
    [in] handle_t h,
    [in, last_is(l_i), max_is(m_i)] arraytest_t2 i,
    [out, last_is(*l_o), max_is(m_o)] arraytest_t2 o,
    [in] long int l_i,
    [in] long int m_i,
    [in, out] long int *l_o,
    [in] long int m_o
);

/*
 * a r r a y t e s t _ o p 4
 *
 * just like op1 except uses one [in, out] array instead of one [in] and
 * one [out] array.
 */

void arraytest_op4 (
    [in] handle_t h,
    [in, out] arraytest_t1 io
);

/*
 * a r r a y t e s t _ o p 5
 *
 * just like op2 except uses one [in, out] array instead of one [in] and
 * one [out] array.
 */

void arraytest_op5 (
    [in] handle_t h,
    [in, out, last_is(*l_io)] arraytest_t1 io,
    [in, out] long int *l_io
);

/*
 * a r r a y t e s t _ o p 6
 *
 * just like op3 except uses one [in,out] array instead of one [in] and
 * one [out] array.
 */

void arraytest_op6 (
    [in] handle_t h,
    [in, out, last_is(*l_io), max_is(m_io)] arraytest_t2 io,
    [in, out] long int *l_io,
    [in] long int m_io
);

/*
 * a r r a y t e s t _ o p 7
 *
 * save the value of array i for return by op8
 */
void arraytest_op7 (
    [in] handle_t h,
    [in] arraytest_t1 i 
);

/*
 * a r r a y t e s t _ o p 8
 *
 * return values sent by last call of op7
 */
void arraytest_op8 (
    [in] handle_t h,
    [out] arraytest_t1 o
);

/*
 * a r r a y t e s t _ o p 9
 *
 * save the value of array i for return by op10
 */
void arraytest_op9 (
    [in] handle_t h,
    [in, last_is(l_i)] arraytest_t1 i,
    [in] long int l_i
);

/*
 * a r r a y t e s t _ o p 1 0
 *
 * return values sent by last call of op9
 */
void arraytest_op10 (
    [in] handle_t h,
    [out, last_is(*l_o)] arraytest_t1 o,
    [in, out] long int *l_o
);

/*
 * a r r a y t e s t _ o p 1 1
 *
 * save the value of array i for return by op12
 */
void arraytest_op11 (
    [in] handle_t h,
    [in] long int l_i,
    [in] long int m_i,
    [in, last_is(l_i), max_is(m_i)] arraytest_t2 i
);

/*
 * a r r a y t e s t _ o p 1 2
 *
 * return values sent by last call of op11
 */
void arraytest_op12 (
    [in] handle_t h,
    [in, out] long int *l_o,
    [in] long int m_o,
    [out, last_is(*l_o), max_is(m_o)] arraytest_t2 o
);

/* 
 * This section decalres operations to test the handling of multiply
 * dimensioned arrays (really just 2-d) of scalars and arrays of arrays
 * of scalars
 */

const long int arraytest_c2 = 5;
const long int arraytest_c3 = 7;

typedef long int arraytest_t3 [arraytest_c2] [arraytest_c3];
typedef long int arraytest_t4 [arraytest_c3];
typedef arraytest_t4 arraytest_t5[arraytest_c2];

void arraytest_op13 (
    [in] handle_t h,
    [in] arraytest_t3 i,
    [out] arraytest_t5 o
);

#ifdef BROKEN_CODE

void arraytest_op14 (
    [in] handle_t h,
    [in, last_is (l_i)] arraytest_t5 i,
    [out, last_is (*l_o)] arraytest_t3 o,
    [in] long int l_i,
    [in, out] long int *l_o
);

typedef long int arraytest_t6 [] [arraytest_c3];
typedef arraytest_t4 arraytest_t7[];

void arraytest_op15 (
    [in] handle_t h,
    [in, last_is (l_i), max_is(m_i)] arraytest_t6  i,
    [out, last_is (*l_o), max_is(m_o)] arraytest_t7  o,
    [in] long int l_i,
    [in] long int m_i,
    [in, out] long int *l_o,
    [in] long int m_o
);

#endif

/*
 * This section of the arraytest interface declares types and operations
 * to test handling of arrays of each of the scalar types. * Each operation
 * has an [in] parameter and an [out] parameter which are fixed size arrays
 * of the same scalar type. * The values of elements of the out array are
 * are related to the values of the elements of the in array in the same
 * way as the in and out parameters of the operations in scalar.idl, q.v.
*/

void arraytest_op20 (
    [in] handle_t h,
    [in] small int i[arraytest_c1],
    [out] small int o[arraytest_c1]
);

void arraytest_op21 (
    [in] handle_t h,
    [in] unsigned small int i[arraytest_c1],
    [out] unsigned small int o[arraytest_c1]
);

void arraytest_op22 (
    [in] handle_t h,
    [in] short int i[arraytest_c1],
    [out] short int o[arraytest_c1]
);

void arraytest_op23 (
    [in] handle_t h,
    [in] unsigned short int i[arraytest_c1],
    [out] unsigned short int o[arraytest_c1]
);

void arraytest_op24 (
    [in] handle_t h,
    [in] long int i[arraytest_c1],
    [out] long int o[arraytest_c1]
);

void arraytest_op25 (
    [in] handle_t h,
    [in] unsigned long int i[arraytest_c1],
    [out] unsigned long int o[arraytest_c1]
);

void arraytest_op26 (
    [in] handle_t h,
    [in] hyper int i[arraytest_c1],
    [out] hyper int o[arraytest_c1]
);

void arraytest_op27 (
    [in] handle_t h,
    [in] unsigned hyper int i[arraytest_c1],
    [out] unsigned hyper int o[arraytest_c1]
);

void arraytest_op28 (
    [in] handle_t h,
    [in] boolean i[arraytest_c1],
    [out] boolean o[arraytest_c1]
);

void arraytest_op29 (
    [in] handle_t h,
    [in] byte i[arraytest_c1],
    [out] byte o[arraytest_c1]
);

void arraytest_op30 (
    [in] handle_t h,
    [in] float i[arraytest_c1],
    [out] float o[arraytest_c1]
);

void arraytest_op31 (
    [in] handle_t h,
    [in] double i[arraytest_c1],
    [out] double o[arraytest_c1]
);

void arraytest_op32 (
    [in] handle_t h,
    [in] char i[arraytest_c1],
    [out] char o[arraytest_c1]
);

/* 
 * Operations that test handling of arrays whose elements are
 * not scalars, i.e. records, variant recors, and string0s
 */

typedef struct {
    long int a;
    short int b;
} arraytest_t8;

void arraytest_op40 (
    [in] handle_t h,
    [in] arraytest_t8 i[arraytest_c1],
    [out] arraytest_t8 o[arraytest_c1]
);

typedef union switch (boolean flag) {
    case FALSE:
        long int a;
    case TRUE:
        short b;
} arraytest_t9;

void arraytest_op41 (
    [in] handle_t h,
    [in] arraytest_t9 i[arraytest_c1],
    [out] arraytest_t9 o[arraytest_c1]
);

const long int arraytest_c4 = 45;

typedef [v1_string] char arraytest_t10 [arraytest_c4];

void arraytest_op42 (
    [in] handle_t h,
    [in] arraytest_t10 i[arraytest_c1],
    [out] arraytest_t10 o[arraytest_c1]
);

}

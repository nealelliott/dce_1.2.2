/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: rs_acct.idl,v $
 * Revision 1.1.55.2  1996/03/09  23:28:20  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:43:48  marty]
 *
 * Revision 1.1.55.1  1995/12/08  17:33:40  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  16:55:20  root]
 * 
 * Revision 1.1.53.1  1993/10/05  22:30:52  mccann
 * 	CR8651 64 bit porting changes
 * 	[1993/10/04  19:12:05  mccann]
 * 
 * Revision 1.1.4.2  1993/08/04  13:36:05  cuti
 * 	Insert dce/ in front of imported file name
 * 	[1993/08/03  20:49:54  cuti]
 * 
 * Revision 1.1.2.2  1992/12/29  13:30:47  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/28  20:17:20  zeliff]
 * 
 * Revision 1.1  1992/01/19  14:55:01  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/

/*  rs_acct.idl V=14 08/22/91 //littl/prgy/src/idl
**
** Copyright (c) Hewlett-Packard Company 1991
** Unpublished work. All Rights Reserved.
**
*/
/*
 *              Account Management
 * 
 */


[
    /* V1 format UUID: 4c8782802000.0d.00.02.87.14.00.00.00 */
    uuid(4C878280-2000-0000-0D00-028714000000),
    version(1)
]

interface rs_acct

{
    import "dce/rsbase.idl";

    /*
     * r s _ a c c t _ a d d 
     *
     * add an account for the specified login name <person,group,org> key_parts
     * identifies how much of the triple is the key.  new_keytype is used only
     * when the key is transmitted in plaintext form to the server.  The server
     * uses the value of new_keytype to determine waht type of ciphertext key
     * to generate.
     *
     * Errors: 
     *  Not Authorized 
     *  Not Member of Group 
     *  Not Member of Org 
     *  Not Member of Group and Org 
     *  Object already exists 
     *  Key Type not supported
     *  Encryption Type not supported  
     *  Key Version out of range
     *  Key Version in use
     */
    void rs_acct_add (
        [in]        handle_t                  h,
        [in]        sec_rgy_login_name_t      *login_name,
        [in, out]   sec_rgy_acct_key_t        *key_parts,
        [in]        sec_rgy_acct_user_t       *user_part,
        [in]        sec_rgy_acct_admin_t      *admin_part,
        [in, ref]   rs_acct_key_transmit_t    *key,
        [in]        sec_passwd_type_t         new_keytype,
        [out]       sec_passwd_version_t      *new_key_version,
        [out]       rs_cache_data_t           *cache_info,
        [out]       error_status_t            *status
    );

    /*
     * r s _ a c c t _ d e l e t e
     *
     * delete an account.
     *
     * Errors:
     *  Not Authorized
     *  Object not found
     */
    void rs_acct_delete (
        [in]        handle_t                h,
        [in]        sec_rgy_login_name_t    *login_name,
        [out]       rs_cache_data_t         *cache_info,
        [out]       error_status_t          *status
    );  

    /*
     * r s _ a c c t _ r e n a m e
     *
     * rename an account - this can move the account data from one principal
     * to another.  This is essentialy an atomic delete/add except that any
     * internal data or properties attached to the account will also be "added"
     * unlike what a user level operation could do.
     *
     * Errors:
     *  Not Authorized
     *   Object not found    - old name does not exists
     * name already exists - new name already exists
     */
    void rs_acct_rename (
        [in]        handle_t                h,
        [in]        sec_rgy_login_name_t    *old_login_name,
        [in]        sec_rgy_login_name_t    *new_login_name,
        [in, out]   sec_rgy_acct_key_t      *new_key_parts,
        [out]       error_status_t          *status
    );

    /*
     * r s _ a c c t _ i n f o _ t
     *
     * This datatype is a data transmission optimization.  If a bad status
     * is generated by the operation - no valid data will be returned.  The
     * data is therefore enclosed in a union with a status_ok branch which
     * indicates that the data is present.  Any other status value will yield
     * an empty union arm. 
     */
    typedef union switch (signed32 status) {
        case error_status_ok:
            struct {
                sec_rgy_acct_key_t      key_parts;
                sec_rgy_sid_t           sid;
                sec_rgy_unix_sid_t      unix_sid;
                sec_rgy_acct_admin_t    admin_part;
		sec_rgy_acct_user_t     user_part;
            } result;

        default:
            ;                       /* Empty default branch */

    }           rs_acct_info_t;

    /*
     * r s _ a c c t _ l o o k u p 
     *
     * find the appropriate account entry.  A zero-length person group or org
     * component functions as a wild-carded. E.G. a login name composed of 
     *     "" 
     *     "group" 
     *     "" 
     * will return the next (possibly first) account whose group component
     * matches "group". 
     *
     * Errors: 
     *  Object not found 
     */
    [idempotent] void rs_acct_lookup (
        [in]        handle_t                    h,
        [in, out]   sec_rgy_login_name_t        *login_name,
        [in, out]   sec_rgy_cursor_t            *cursor,
        [out]       rs_cache_data_t             *cache_info,
        [out]       rs_acct_info_t              *result
    );   

    /*
     * r s _ a c c t _ r e p l a c e 
     *
     * replace  the writable portions (as controlled by the modify_parts
     * argument) of the account data.  The password is only set if the
     * rs_acct_part_passwd bit of the modify_parts argument is set, if not the
     * old password is retained.  new_keytype is used only when the key is 
     * transmitted in plaintext form to the server.  The server uses the value
     * of new_keytype to determine waht type of ciphertext key to generate.
     *
     * Errors: 
     *  Object not found 
     *  Not Authorized 
     *  Key Type not supported
     *  Encryption Type not supported  
     *  Key Version out of range
     *  Key Version in use
     */
    void rs_acct_replace (
        [in]        handle_t                  h,
        [in]        sec_rgy_login_name_t      *login_name,
        [in, out]   sec_rgy_acct_key_t        *key_parts,
        [in]        rs_acct_parts_t           modify_parts,
        [in]        sec_rgy_acct_user_t       *user_part,
        [in]        sec_rgy_acct_admin_t      *admin_part,
        [in, ptr]   rs_acct_key_transmit_t    *key,          /* may be NULL */
        [in]        sec_passwd_type_t         new_keytype,
        [out]       sec_passwd_version_t      *new_key_version,
        [out]       rs_cache_data_t           *cache_info,
        [out]       error_status_t            *status
    ); 

    /*
     *  r s _ a c c t _ g e t _ p r o j l i s t 
     *
     * returns a person's projlist (if they have projlist_ok set in the pgo
     * record) 
     */
    [idempotent] void rs_acct_get_projlist (
        [in]        handle_t                h,
        [in]        sec_rgy_login_name_t    *name,
        [in, out]   sec_rgy_cursor_t        *projlist_cursor,
        [in]        signed32                max_number,
        [out]       signed32                *supplied_number,
        [out, length_is(*supplied_number), size_is(max_number)] 
                    uuid_t                  id_projlist[],
        [out, length_is(*supplied_number), size_is(max_number)] 
                    signed32                unix_projlist[],
        [out]       signed32                *num_projects,
        [out]       rs_cache_data_t         *cache_info,
        [out]       error_status_t          *status
    );
}

#!/bin/ksh
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: dcerpcrun.functions,v $
# Revision 1.1.6.2  1996/03/09  20:51:28  marty
# 	Add OSF copyright
# 	[1996/03/09  20:29:15  marty]
#
# Revision 1.1.6.1  1995/12/11  22:43:26  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/1  1994/07/01  13:55 UTC  bissen
# 	Merge hpdce02 (DCE 1.1 beta) and HPDCE01 into HPDCE02
# 
# 	HP revision /main/HPDCE01/1  1994/02/01  18:07  giza
# 	merge kk & hpdce01
# 	[1995/12/11  22:34:29  root]
# 
# Revision 1.1.2.2  1993/08/24  18:53:23  giza
# 	Initial version.
# 	[1993/08/24  18:52:58  giza]
# 
# $EndLog$
pad() {
(( $DEBUG )) && set -x
    integer i=4 status=1

    ZERO=0
    PAD=$1
    while (( ${#1} < $i ))
    do
        PAD="$ZERO$PAD"
        i=i-1
        status=0
    done
    print $(print $PAD | sed 's/\([0-9]\)\([0-9]\)\([0-9]\)\([0-9]\)/\1\2:\3\4/')
}

# Function:	checkTime( [start|end] )
#               check maximum delta time between client startup
checkTime() {
    (( $DEBUG )) && set -x
    set -A St 0
    set -A Et 0
    set -A Hn ""
    set -A Hs ""

    integer j=0 i=0 n=0 ucnt=0 total=0 again=1
    LDt="" MDt=""

    print -u2 "\nChecking $1 time between client host(s) \c"
    for host in $2
    do
        again=1
        while (( $again ))
        do
            if [[ -f $WORKDIR/client_$host.$1 ]]
            then
                St[$n]=`cat $WORKDIR/client_$host.$1`
                Hn[$n]=$host
                n=n+1
                again=0
                break
            fi 
        done
    done
    while (( $i < $n ))
    do
        comp=${St[$i]}; hostName=${Hn[$i]}
        while (( $j < $n && $comp > -1 ))
        do
            [[ "${Et[$j]}" -eq "" ]] && Et[$j]=-1
            if (( $comp > ${Et[$j]} && $comp != ${Et[$j]} ))
            then
                ttmp=${Et[$j]}
                Et[$j]=$comp
                comp=$ttmp
                htmp=${Hs[$j]}
                Hs[$j]=$hostName
                hostName=$htmp
                ucnt=ucnt+1
            elif (( $comp == ${Et[$j]} ))
            then
                break
            fi
            j=j+1
        done
        j=0
        i=i+1
    done

Lt=$(pad ${Et[$(( ${#Et[*]}-1 ))]} )
MDt=$(pad $(( ${Et[0]}-${Et[$(( ${#Et[*]}-1 ))]} )) )
Ht=$(pad $(( ${Et[0]} )) )

    print -u2 "\n\n\tClient $1 time summary [High/Low/MaxDelta (M:S)]\n\t--------------------------------------------------------------------"
    print -u2 "\tOut of $n $1 times examined $(( $n-${#Et[*]} )) were duplicates and were discarded"
    print -u2 "\tHigh (Ht)  = $Ht, host=${Hs[0]}"
    print -u2 "\tLow  (Lt)  = $Lt, host=${Hs[$(( ${#Et[*]}-1 ))]}"
    print -u2 "\tMax  (MDt) = $MDt\n"
} #end checkTime()


# Function:	trapSig( signal )
#               wrapper for cleanUp to detect user signal
trapSig()
{
    (( $DEBUG )) && set -x
        (( $CDS_TRACE > 2 )) && {
                infoLine "********************* $0 *********************"
                set -x
        }

	print $1 >$DATADIR/usersig
        cleanUp $1
        tet_abandon $1
}


# Function:	infoLine( text )
#               wrapper for tet_infoline to allow verbosity setting
infoLine() {
    if (( $VFLAG ))
    then
        print "$1"
        tet_infoline "$1"
    else
        tet_infoline "$1"
    fi
}


# Function:	roundUp( integer )
#               for timed iterations, rounds integers to nearest division of 10
roundUp() {
    (( $DEBUG )) && set -x
    integer n=$1

    (( $n < 10 )) && n=$(( n+(10-$n) ))
    (( $(($n % 10)) >= 5 )) && n=n+5
    Ot=$(( ($n-($n%10))/10 ))
}



/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: cds_clerkserver.idl,v $
 * Revision 1.1.6.2  1996/03/09  23:12:07  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:29:20  marty]
 *
 * Revision 1.1.6.1  1995/12/08  15:34:48  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  14:50:49  root]
 * 
 * Revision 1.1.4.2  1994/07/14  11:18:54  kevins
 * 	CR 11219 export cds_clerkserver.idl for cross component depend.
 * 	[1994/07/14  11:15:31  kevins]
 * 
 * Revision 1.1.4.1  1994/03/12  22:14:14  peckham
 * 	DEC serviceability and i18n drop
 * 	[1994/03/12  14:49:24  peckham]
 * 
 * Revision 1.1.2.4  1993/01/20  20:52:48  jd
 * 	Backed out the fix for #6673. It broke the nightly build on the RIOS.
 * 	[1993/01/20  20:47:14  jd]
 * 
 * Revision 1.1.2.2  1992/12/30  14:25:59  zeliff
 * 	Embedding copyright notices
 * 	[1992/12/29  23:34:09  zeliff]
 * 
 * Revision 1.1  1992/01/19  15:24:47  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
/*
 * COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1990-1994. ALL RIGHTS RESERVED.
 *
 * THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
 * ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
 * INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
 * COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
 * OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
 * TRANSFERRED.
 *
 * THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
 * AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
 * CORPORATION.
 *
 * DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
 * SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
 */
[uuid(257df1c9-c6d3-11ca-8554-08002b1c8f1f), version(1.0)]

interface cds_clerkserver

{
import "dce/cds_types.idl";
import "dce/id_base.idl";

error_status_t cds_AddReplica(
    [in] handle_t h,
    [in] cds_FullName_t  *directory_p,
    [in] unsigned small type,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_AllowClearinghouses(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_Combine(
    [in] handle_t h,
    [in] uuid_t *dir_p,
    [in] cds_Timestamp_t *skulk_p,
    [in] cds_Timestamp_t *allupto_p,
    [in] uuid_t *epoch_p,
    [in] cds_FullName_t *to_p,
    [out] uuid_t *next_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_CreateChild(
    [in] handle_t h,
    [in,out] cds_Progress_t *Progress_p,
    [in,ptr]sec_id_foreign_t *user_p,
    [in] uuid_t *childID_p,
    [in] cds_Set_t *replicaset_p,
    [out] uuid_t *parentID_p,
    [out] cds_status_t *cds_status_p
   );

error_status_t cds_CreateDirectory(
    [in] handle_t  h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_Timestamp_t  *actual_ts_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_CreateSoftLink(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] cds_FullName_t  *target_p,
    [in,ptr] cds_Timeout_t  *linkTimeout_p,
    [out] cds_Timestamp_t  *actual_ts_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_CreateObject(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in,ptr] cds_Name_t  *class_p,
    [in,ptr] cds_Version_t  *version_p,
    [in, ptr] uuid_t        *uuid_p,
    [out] cds_Timestamp_t *acutal_ts_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_DeleteChild(
    [in] handle_t h,
    [in,out] cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
   );

error_status_t cds_DeleteObject(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_DeleteSoftLink(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_DeleteDirectory(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_DisallowClearinghouses(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_DoUpdate(
    [in] handle_t h,
    [in] uuid_t *epoch_p,
    [in] cds_UpdatePkt_t *update_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_EnumerateAttributes(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] unsigned small type,
    [in] cds_Name_t  *context_p,
    [in] unsigned32 max_size,
    [in,out,ptr] cds_SetP_t *attr_set,
    [out] unsigned small *wholeset_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_EnumerateChildren(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] cds_Name_t  *wild_p,
    [in] cds_Name_t  *context_p,
    [in] unsigned32 max_size,
    [in,out,ptr] cds_SetP_t *name_set,
    [out] unsigned small *wholeset_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_EnumerateObjects(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] cds_Name_t  *wild_p,
    [in] cds_Name_t  *context_p,
    [in] cds_Name_t  *class_p,
    [in] unsigned32 max_size,
    [in,out,ptr] cds_SetP_t *name_set,
    [out] unsigned small *wholeset_p,
    [in,out] unsigned small *returnClass_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_EnumerateSoftLinks(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] cds_Name_t  *wild_p,
    [in] cds_Name_t  *context_p,
    [in] unsigned32 max_size,
    [in,out,ptr] cds_SetP_t *name_set,
    [out] unsigned small *wholeset_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_LinkReplica(
    [in] handle_t h,
    [in,out] cds_Progress_t *Progress_p,
    [in] uuid_t *directory_p,
    [in] cds_Update_t *update_p,
    [out] uuid_t *epoch_p,
    [out] uuid_t *ring_p,
    [out] cds_Version_t *rpversion_p,
    [out] cds_status_t *cds_status_p
   );

[idempotent] error_status_t cds_ModifyAttribute(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] unsigned small type,
    [in] cds_Update_t  *update_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_ModifyReplica(
    [in] handle_t h,
    [in] uuid_t *dir_p,
    [in] cds_Update_t *update_p,
    [out] cds_status_t *cds_status_p
   );

error_status_t cds_NewEpoch(
    [in] handle_t h,
    [in] cds_FullName_t *dirname_p,
    [in] cds_Set_t *readonlies_p,
    [in] cds_Set_t *secondaries_p,
    [out] cds_status_t *cds_status_p
    );

const unsigned small RA_none = 1;
const unsigned small RA_single = 2;
const unsigned small RA_set = 3;
const unsigned small RA_wholeSet = 4;

typedef struct {
    cds_Name_t name;
    union switch (unsigned small type) {
    case RA_none:
	;
    case RA_single:
	[ptr] cds_SetMember_t *single_p;
    case RA_set:
	[ptr] cds_Set_t *set_p;
    } value;
} cds_WE_entry_t;

typedef struct {
    unsigned small numberOfAttributes;
    [size_is(numberOfAttributes)] cds_WE_entry_t entry[];
} cds_WholeEntry_t;

typedef union switch (unsigned small returningToClerk) {
    case RA_none:
	;
    case RA_single:
	[ptr] cds_SetMember_t *value_single_p;
    case RA_set:
	[ptr] cds_Set_t *value_set_p;
    case RA_wholeSet:
	[ptr] cds_WholeEntry_t *wholeEntry_p;
} cds_RA_value_t;

[idempotent] error_status_t cds_ReadAttribute(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] unsigned small type,
    [in] cds_Name_t  *att_p,
    [in] cds_Timestamp_t  *context_p,
    [in] unsigned32 max_size,
    [in] unsigned32 maybemore,
    [out] cds_RA_value_t *value_p,
    [out] unsigned small *wholeset_p,
    [out] cds_status_t *cds_status_p
    );

error_status_t cds_RemoveReplica(
    [in] handle_t  h,
    [in] cds_FullName_t  *directory_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_ResolveName(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_Skulk(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_TestAttribute(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] unsigned small type,
    [in] cds_Name_t  *att_p,
    [in] cds_AtomicValue_t  *value_p,
    [out] unsigned small  *result_p,
    [out] cds_status_t *cds_status_p
    );

[idempotent] error_status_t cds_TestGroup(
    [in] handle_t h,
    [in,out]cds_Progress_t *Progress_p,
    [in] cds_FullName_t  *member_p,
    [in,out] uuid_t *loop_p,
    [in,out] unsigned small *direct_p,
    [out] unsigned small *result_p,
    [in,out,ptr] cds_TimeoutP_t *outTimeout_p,
    [out] cds_status_t *cds_status_p
    );



}

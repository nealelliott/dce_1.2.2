#
# ID: $Id: restoreft-cmd,v 1.3 1995/12/06 15:25:31 hyer Exp $
#
# COMPONENT_NAME: bak tests
#
# The following functions list may not be complete.
# Functions defined by/via macros may not be included.
#
# FUNCTIONS:
#	restoreft test command file
#
# ORIGINS: Transarc Corp.
#
# (C) COPYRIGHT Transarc Corp. 1993
# All Rights Reserved
# Licensed Materials - Property of Transarc
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
#
# HISTORY
# $TALog: restoreft-cmd,v $
# Revision 1.3  1995/12/06  15:25:31  hyer
# The backup test scripts were not working. Most of the tests either
# failed or never ran. Made significant changes to all scripts to make
# them work:
#
# Added function CATCHEXEC that does the same thing as catch "exec ..."
# but also displays each command and the response as well as any error codes
# that are returned from the exec.
#
# Added a loop in is_butc_ready to wait up to 200 seconds for the butc
# process to start, sleeping 10 seconds between checks.
#
# Changed the expected command output to match the messages generated
# by the current version of the code.
#
# Added sleeps around some of the tape I/O commands to keep them from
# failing because the device wasn't ready.
#
# Added chmod ogu+rwx commands after each fts crmount to give the test
# scripts access to the test filesets
#
#
# [from r1.1 by delta hyer-7109-backup-test-changes, r1.1]
#
# Revision 1.2  1995/11/29  17:14:07  hyer
# Delta for changes made to the backup scripts to get the backup tests running.
# Several changes were made to get the tests to run:
#
# 1. A loop was added to is_butc_ready to retry the status command
#    every 10 seconds, and time out after 200 seconds. The tests were
#    not being run because it can take over 1 minute for butc to start.
#
# 2. The directory permissions needed to be changed to allow R/W access
#    on the test filesets after they were created with fts crmount.
#
# 3. The error checking code in restore_disk and restore_ft, and dump
#    was reworked to make sure that the success or failure of the
#    operation was detected during the test.
#
# 4. The calls to "fts dump" and "fts restore" were returing error status
#    even though the operation succeeded. Changed the script to read the
#    response from the command to decide whether or not the command worked.
#
# 5. Added a EXEC routine that calls exec, but prints out each command and
#    the response.
#
# 6. Several other minor changes were made to address verious problems
#    with how the scripts were checking the success or failure of the
#    tests. The tests have run successfully start to finish on
#    Solaris with the changes reflected in this delta.
#
# see above
# [from r1.1 by delta hyer_7109_fixes_to_backup_test_scripts, r1.1]
#
# Revision 1.1  1993/11/15  23:00:44  vijay
# Add the test suite for the bak restoreft command to the test harness.
# [added by delta vijay-db4692-bak-add-restoreft-tests-to-suite, r1.1]
#
#
#

CMD-SETUP
    # startup bak 
    set bak_id  [run_bak  $bak_host]
    if -1==$bak_id {
	send_user "\nDanger - bak cannot start\n"
	continue
    }

    # save host information, and setup. Assume TapeConfig is ok
    set tc_fid [save_tapeconfig]
    if -1==[save_tapeconfig] {
	send_user "\n Danger - TapeConfig could not be saved\n"
	quit_bak $bak_id $bak_host
	continue
    }
    if -1==[add_tapeconfig_entry $butc_tape_size $butc_file_mark_size \
		$butc_device $butc_tcid] {
	send_user "\n Danger - TapeConfig entry could not be added\n"
	quit_bak $bak_id $bak_host
	continue
    }
    set hosts_buffer [save_host_info $bak_id]
    if [string match "-1" $hosts_buffer] {
   	send_user "\n Danger - hosts not saved\n"
	quit_bak $bak_id $bak_host
	continue
    }
    if 0==[remove_host_info_p $bak_id] {
   	send_user "\n Danger - hosts not saved\n"
	quit_bak $bak_id $bak_host
	continue
    }
    if [string match "" $butc_host] {
       CATCHEXEC "hostname" butc_host_name
    } else {
       set butc_host_name $butc_host
    }
    send -i $bak_id "addhost $butc_host_name $butc_tcid\r"
    expect {
	-i $bak_id $prompt {
    	   if -1==[string first "offset $butc_tcid to tape list...done" $expect_out(buffer)] {
	        quit_bak $bak_id $bak_host
		continue
	   }
	}
	-i $bak_id default {
	  send_user "\n Danger - host not added to database\n"
	  quit_bak $bak_id $bak_host
	  continue
	}
    }
    # startup butc
    set butc_id [run_butc $butc_host $butc_tcid]
    if -1==$butc_id {
	send_user "\n Danger - butc cannot start\n"
	# put back host info
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	# terminate bak
	quit_bak $bak_id $bak_host
	continue
    }
    # save fileset family and dump level information.
    set fileset_families [save_fileset_families $bak_id]
    if [string match "-1" $fileset_families] {
	send_user "\n Danger - cannot save fileset families\n"
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	quit_bak $bak_id $bak_host
	quit_butc $butc_id $butc_host
	continue
    }
    if 0==[remove_fileset_families_p $bak_id] {
	send_user "\n Danger - cannot save fileset families\n"
	add_fileset_families_p $bak_id $fileset_families
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	quit_bak $bak_id $bak_host
	quit_butc $butc_id $butc_host
	continue
    }
    set dump_schedule [save_dump_schedule $bak_id]
    if [string match "-1" $dump_schedule] {
	send_user "\n Danger - cannot save dump schedule\n"
	add_fileset_families_p $bak_id $fileset_families
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	quit_bak $bak_id $bak_host
	quit_butc $butc_id $butc_host
	continue
    }
    if 0==[remove_dump_schedule_p $bak_id] {
	send_user "\n Danger - cannot save fileset families\n"
	add_fileset_families_p $bak_id $fileset_families
	add_dump_schedule_p $bak_id $dump_schedule
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	quit_bak $bak_id $bak_host
	quit_butc $butc_id $butc_host
	continue
    }

CMD-PRE

    # Check if bakserver and butc are in known state
    if 0==[verifydb_p $bak_id] {
	send_user "\nDanger - db is corrupted\n"
        quit_bak  $bak_id  $bak_host
        quit_butc $butc_id $butc_host
	continue
    }

    if 0==[is_butc_ready_p $bak_id $butc_tcid] {
	# log message here and set error code
	send_user "\nDanger - butc is not listening\n"
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	add_fileset_families_p $bak_id $fileset_families
	add_dump_schedule_p $bak_id $dump_schedule
        quit_bak $bak_id $bak_host
        quit_butc $butc_id $butc_host
	continue
    }

    # Check if the server and aggregate do really exist
    if [CATCHEXEC "/opt/dcelocal/bin/fts lsheader $ftserver_host $fileset_aggr \
		$fts_verbose"] {
       	send_user "\nDanger - fileset server or aggregate does not exist\n"
	remove_host_info_p $bak_id
	add_host_info_p $bak_id $hosts_buffer 
	add_fileset_families_p $bak_id $fileset_families
	add_dump_schedule_p $bak_id $dump_schedule
        quit_bak $bak_id $bak_host
        quit_butc $butc_id $butc_host
	continue
    }

CMD-POST

    # Check if bak and butc are back in known state
    if 0==[verifydb_p $bak_id] {
	# log message here and set error code
	send_user "\nDanger - db is corrupted\n"
    }
    if 0==[is_butc_ready_p $bak_id $butc_tcid] {
	# log message here and set error code
	send_user "\nDanger - butc is not listening\n"
    }
    # Check if the server and aggregate do really exist
    if [CATCHEXEC "/opt/dcelocal/bin/fts lsheader $ftserver_host $fileset_aggr \
		$fts_verbose"] {
       	send_user "\nDanger - fileset server or aggregate does not exist\n"
    }

CMD-CLEANUP

     # terminate bak and butc
     remove_fileset_families_p $bak_id
     add_fileset_families_p $bak_id $fileset_families
     remove_dump_schedule_p $bak_id
     add_dump_schedule_p $bak_id $dump_schedule
     remove_host_info_p $bak_id
     add_host_info_p $bak_id $hosts_buffer
     restore_tapeconfig
     quit_bak $bak_id $bak_host
     quit_butc $butc_id $butc_host

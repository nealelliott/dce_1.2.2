#
# ID: $Id: restoredisk-cmd,v 1.6 1996/04/26 19:30:37 hyer Exp $
#
# COMPONENT_NAME: bak tests
#
# The following functions list may not be complete.
# Functions defined by/via macros may not be included.
#
# FUNCTIONS:
#
#
# ORIGINS: Transarc Corp.
#
# (C) COPYRIGHT Transarc Corp. 1993
# All Rights Reserved
# Licensed Materials - Property of Transarc
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
#
# HISTORY
# $TALog: restoredisk-cmd,v $
# Revision 1.6  1996/04/26  19:30:37  hyer
# Reopened delta to fix problems found testing callout routines
# for mount/unmount in savedb and restoredb.
#
# Added code to get the right string for the zap_id.
# [from r1.5 by delta hyer-7283-backup-throughput-mods, r1.4]
#
# Revision 1.5  1995/12/06  15:24:53  hyer
# The backup test scripts were not working. Most of the tests either
# failed or never ran. Made significant changes to all scripts to make
# them work:
#
# Added function CATCHEXEC that does the same thing as catch "exec ..."
# but also displays each command and the response as well as any error codes
# that are returned from the exec.
#
# Added a loop in is_butc_ready to wait up to 200 seconds for the butc
# process to start, sleeping 10 seconds between checks.
#
# Changed the expected command output to match the messages generated
# by the current version of the code.
#
# Added sleeps around some of the tape I/O commands to keep them from
# failing because the device wasn't ready.
#
# Added chmod ogu+rwx commands after each fts crmount to give the test
# scripts access to the test filesets
#
#
# [from r1.3 by delta hyer-7109-backup-test-changes, r1.1]
#
# Revision 1.4  1995/11/29  17:13:35  hyer
# Delta for changes made to the backup scripts to get the backup tests running.
# Several changes were made to get the tests to run:
#
# 1. A loop was added to is_butc_ready to retry the status command
#    every 10 seconds, and time out after 200 seconds. The tests were
#    not being run because it can take over 1 minute for butc to start.
#
# 2. The directory permissions needed to be changed to allow R/W access
#    on the test filesets after they were created with fts crmount.
#
# 3. The error checking code in restore_disk and restore_ft, and dump
#    was reworked to make sure that the success or failure of the
#    operation was detected during the test.
#
# 4. The calls to "fts dump" and "fts restore" were returing error status
#    even though the operation succeeded. Changed the script to read the
#    response from the command to decide whether or not the command worked.
#
# 5. Added a EXEC routine that calls exec, but prints out each command and
#    the response.
#
# 6. Several other minor changes were made to address verious problems
#    with how the scripts were checking the success or failure of the
#    tests. The tests have run successfully start to finish on
#    Solaris with the changes reflected in this delta.
#
# see above
# [from r1.3 by delta hyer_7109_fixes_to_backup_test_scripts, r1.1]
#
# Revision 1.3  1994/02/21  16:31:33  davecarr
# Upgraded tests to work with expect-5.1.3.  Also moved some configuration
# dependencies from restoredisk-cmd to generic.exp.  In the process, some
# variables had "dkr_" prepended to them to indicate that they are used only
# for the restoredisk tests.
#
# Upgraded test to work with expect-5.1.3.  Some variables had "dkr_"
# prepended to them to indicate that they are used only for the restoredisk
# tests.
# [from r1.2 by delta davecarr-db3672-bak-restoredisk-tests-I, r1.3]
#
# Revision 1.2  1993/11/24  17:54:30  davecarr
#    Minor modifications of tests after merging automated backup tests with
# Vijay's work.  These tests work with expect-4.3.  Changes will need to be
# made when updating to expect, version 5.
#
# Minor modifications.  This test works with expect-4.3.
# [from r1.1 by delta davecarr-db3672-bak-restoredisk-tests-I, r1.2]
#
# Revision 1.1  1993/06/10  18:31:55  davecarr
#    This delta adds the first set of expect-based tests for bak restoredisk.
# [added by delta davecarr-db3672-bak-restoredisk-tests-I, r1.1]
#
#

CMD-SETUP
    trap {cleanup_restoredisk 6;exit} SIGINT

    #
    # cleanup_restoredisk
    #
    proc cleanup_restoredisk {arg} {
        global dkr_fileset
        global prompt
        global bak_id
        global butc_id
        global bak_host
        global butc_host
        global dkr_server
        global dkr_aggr
        global dump_id
        global lshosts_restore_list
        global lsftfamilies_restore_list
        global lsdumps_restore_list
	global zap_id

        case $arg {
            0 {
                set todo_list {H}
            }
            1 {
                set todo_list {A H}
            }
            2 {
                set todo_list {C A H}
            }
            3 {
                set todo_list {F D C A H}
            }
            4 {
                set todo_list {F E D C A H}
            }
            5 {
                set todo_list {F E D C A H}
            }
            6 {
                set todo_list {F E D C B H}
            }
        }
        set manual 0
        foreach entry $todo_list {
            set new_error 0
            case $entry {
                A {
                    if [CATCHEXEC "/opt/dcelocal/bin/fts delete\
		       $dkr_fileset $dkr_server $dkr_aggr"] {
			send_user "Couldn't delete fileset.\n"
			set new_error 1
		    }
                }
                B {
		    # This occurs after some tests may have been run.
		    # If fileset has been zapped we can't just
		    # do an fts delete.
                   if [CATCHEXEC "/opt/dcelocal/bin/fts lsft \
		        -f $dkr_fileset" fts_out] {
                        if [CATCHEXEC "/opt/dcelocal/bin/fts delfldbentry \
			    $dkr_fileset"] {
			    send_user "Couldn't delete FLDB entry.\n"
			    set new_error 1
			}
		    } else {
                        if [CATCHEXEC "/opt/dcelocal/bin/fts delete\
			    $dkr_fileset $dkr_server $dkr_aggr"] {
			    send_user "Couldn't delete fileset.\n"
			    set new_error 1
			}
		    }
                }
                C {
                    if [CATCHEXEC "/opt/dcelocal/bin/fts delmount \
			/:/$dkr_fileset"] {
			send_user "Couldn't delete mount point.\n"
			set new_error 1
		    }
                }
                D {
                    quit_bak $bak_id $bak_host
                }
                E {
                    quit_butc $butc_id $butc_host
                }
                F {
                    if [info exists lshosts_restore_list] {
                        remove_host_info_p $bak_id
                        add_host_info_p $bak_id $lshosts_restore_list
                    }
                    if [info exists lsftfamilies_restore_list] {
                        remove_fileset_families_p $bak_id
                        add_fileset_families_p $bak_id \
			    $lsftfamilies_restore_list
                    }
                    if [info exists lsdumps_restore_list] {
                        remove_dump_schedule_p $bak_id
                        add_dump_schedule_p $bak_id $lsdumps_restore_list
                    }
                }
                G {
                    if [info exists dump_id] {
                        send -i $bak_id "deletedump $dump_id\r"
                        expect {
                            -i $bak_id $prompt {}
                        }
                    }
                }
		H {
		    restore_tapeconfig
		}
            }
            if $new_error {
                send_user "===========Possible manual cleanup"
                send_user " required===========\n"
                set manual 1
            }
        }
        if $manual {
            send_user "\nCAUTION.  "
            send_user "Cleanup of the restoredb command had problems.\n"
            send_user "Check back through this log file for lines like:\n"
            send_user "\n===========Possible manual cleanup"
            send_user " required===========\n\n"
            send_user "This indicates areas that you might want to check"
            send_user " manually to see if things are as expected.\n"

        }
        return
    }
#=================================start of setup=============================
    # save host information, and setup. Assume TapeConfig is ok
    if -1==[save_tapeconfig] {
	send_user "\n Danger - TapeConfig could not be saved\n"
	continue
    }
    if -1==[add_tapeconfig_entry $butc_tape_size $butc_file_mark_size \
		$butc_device $dkr_butc_tcid0] {
	send_user "\n Danger - TapeConfig entry could not be added\n"
	cleanup_restoredisk 0
	continue
    }
    if -1==[add_tapeconfig_entry $butc_tape_size $butc_file_mark_size \
		$butc_device $dkr_butc_tcid1] {
	send_user "\n Danger - TapeConfig entry could not be added\n"
	cleanup_restoredisk 0
	continue
    }
    if -1==[add_tapeconfig_entry $butc_tape_size $butc_file_mark_size \
		$butc_device $dkr_butc_tcid2] {
	send_user "\n Danger - TapeConfig entry could not be added\n"
	cleanup_restoredisk 0
	continue
    }
    # Add some filesets (and files) for testing.
    # For now, assume they don't exist.
    if [CATCHEXEC "/opt/dcelocal/bin/fts create\
	       $dkr_fileset $dkr_server $dkr_aggr" tmp] {
        send_user "\n\n$tmp\n\n"
        send_user "Problems in restoredisk command setup. Aborting.\n"
	cleanup_restoredisk 0
        continue
    }
    # Save the fileset id for later zapping by individual tests.
    # This assumes that the first line of output for 'fts create' is:
    # "filesetname                          "
    # "        readWrite   ID 0,,nnnn  valid"
    set zap_id [string range [lindex $tmp 3] 3 end]

    # Just in case 'someone' recently deleted fileset with same name and
    # cache hasn't been updated.
    CATCHEXEC "/opt/dcelocal/bin/cm checkfilesets"

    if [CATCHEXEC "/opt/dcelocal/bin/fts crmount\
	       /:/$dkr_fileset $dkr_fileset" tmp] {
        send_user "\n\n$tmp\n\n"
        send_user "Problems in restoredisk command setup. Aborting.\n"
        cleanup_restoredisk 1
        continue
    }

    if [CATCHEXEC "/bin/chmod ogu+rwx /:/$dkr_fileset" tmp] {
        send_user "\n\n$tmp\n\n"
        send_user "Problems in restoredisk command setup. Aborting.\n"
        cleanup_restoredisk 2
        continue
    }

    if {[CATCHEXEC "/bin/echo \"This is a test file\"\
	        > /:/$dkr_fileset/one"] ||
        [CATCHEXEC "/bin/cat\
                     /opt/dcelocal/var/dfs/dfstab > /:/$dkr_fileset/two"] ||
        [CATCHEXEC "/bin/cat\
                     /opt/dcelocal/bin/dce_login > /:/$dkr_fileset/three"]} {

        send_user "checksum problems for file(s) in $dkr_fileset.\n"
        send_user "Problems in restoredisk command setup. Aborting.\n"
        cleanup_restoredisk 2
        continue
    }

    # If we can add filesets and file, save checksums of files for checking
    # upon restore.
    if {[CATCHEXEC "/bin/sum /:/$dkr_fileset/one" sum_one] ||
        [CATCHEXEC "/bin/sum /:/$dkr_fileset/two" sum_two] ||
        [CATCHEXEC "/bin/sum /:/$dkr_fileset/three" sum_three]} {

        send_user "Problems in restoredisk command setup. Aborting.\n"
        cleanup_restoredisk 2
        continue
    }

    #    Now that we have saved the checksums for some files, go ahead and
    # start bak and butc, add the appropriate ftfamily and ftentry into the
    # database, add full dump level (if none exists) and dump all filesets
    # on $dkr_aggr.
    #    Note that starting butc is done after all the database
    # manipulations to insure that the tcid is in the database.
    #    Clearly this is a simple scenario.  Later it may be necessary to
    # do more involved dumps but for now this ensures that the tests are
    # automatic since we can dump and restore from the same tape.

    set bak_id [run_bak $bak_host]
    if $bak_id==-1 {
        send_user "Wasn't able to start bak.\n"
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 2
        continue
    }

    # Save output from lshosts, lsdumps and lsftfamilies for later
    # restoration.
    set lshosts_restore_list [save_host_info $bak_id]
    if {"$lshosts_restore_list"==-1} {
        send_user "Couldn't save host/tcid information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lshosts_restore_list
        cleanup_restoredisk 3
        continue
    }
    if ![remove_host_info_p $bak_id] {
        send_user "Couldn't remove host/tcid information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lshosts_restore_list
        cleanup_restoredisk 3
        continue
    }
    set lsftfamilies_restore_list [save_fileset_families $bak_id]
    if {"$lsftfamilies_restore_list"==-1} {
        send_user "Couldn't save fileset families information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lsftfamilies_restore_list
        cleanup_restoredisk 3
        continue
    }
    if ![remove_fileset_families_p $bak_id] {
        send_user "Couldn't remove fileset families information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lsftfamilies_restore_list
        cleanup_restoredisk 3
        continue
    }
    set lsdumps_restore_list [save_dump_schedule $bak_id]
    if {"$lsdumps_restore_list"==-1} {
        send_user "Couldn't save dump schedule information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lsdumps_restore_list
        cleanup_restoredisk 3
        continue
    }
    if ![remove_dump_schedule_p $bak_id] {
        send_user "Couldn't remove dump schedule information.\n"
        send_user "Aborting restoredisk command testing.\n"
        unset lsdumps_restore_list
        cleanup_restoredisk 3
        continue
    }

    # Now add the database information needed for restoredisk testing.
    set tmp_list [list "$dkr_server $dkr_butc_tcid0"\
                       "$dkr_server $dkr_butc_tcid1"\
		       "$dkr_server $dkr_butc_tcid2"]
    add_host_info_p $bak_id $tmp_list
    send -i $bak_id "lshosts\r"
    expect {
        -i $bak_id $prompt {
          if {[expr -1==[string first\
			 "Host $dkr_server, port offset $dkr_butc_tcid0"\
                         $expect_out(buffer)]] ||
              [expr -1==[string first\
		         "Host $dkr_server, port offset $dkr_butc_tcid1"\
                         $expect_out(buffer)]] ||
              [expr -1==[string first\
		         "Host $dkr_server, port offset $dkr_butc_tcid2"\
                         $expect_out(buffer)]]} {
              send_user "Problem adding host/tcid entries.\n"
              send_user "Aborting restoredisk command testing.\n"
              cleanup_restoredisk 3
              continue
          }
        }
    }

    send -i $bak_id "addftfamily $dkr_fileset\r"
    expect {
        -i $bak_id $prompt {
        }
    }
    send -i $bak_id "lsftfamilies\r"
    expect {
        -i $bak_id $prompt {
            if -1==[string first\
	            "Fileset family $dkr_fileset:" $expect_out(buffer)] {
                send_user "Problem adding ft family $dkr_fileset.\n"
                send_user "Aborting restoredisk command testing.\n"
                cleanup_restoredisk 3
                continue
            }
        }
    }
    send -i $bak_id "addftentry $dkr_fileset $dkr_server $dkr_aggr .*\r"
    expect {
        -i $bak_id $prompt {
        }
    }
    send -i $bak_id "lsftfamilies\r"
    expect {
        -i $bak_id $prompt {
            if -1==[string first\
	            "Fileset family $dkr_fileset:\r\n    Entry   1: server $dkr_server, aggregate $dkr_aggr, filesets: .*" $expect_out(buffer)] {
                send_user "Problem adding ft entry for ft family $dkr_fileset.\n"
                send_user "Aborting restoredisk command testing.\n"
                cleanup_restoredisk 3
                continue
            }
        }
    }

    send -i $bak_id "adddump /${dkr_fileset}_full\r"
    expect {
        -i $bak_id $prompt {
            if -1==[string first "bak: Created new dump schedule /${dkr_fileset}_full" $expect_out(buffer)] {
                send_user "Problems creating dump level /${dkr_fileset}_full.\n"
                send_user "Aborting restoredisk command testing.\n"
                cleanup_restoredisk 3
                continue
            }
        }
    }

    # Now start butc
    set butc_id [run_butc $butc_host $dkr_butc_tcid0]
    if $butc_id==-1 {
        send_user "Wasn't able to start butc.\n"
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 3
        continue
    }
    if ![is_butc_ready_p $bak_id $dkr_butc_tcid0] {
        send_user "Problem with butc.\n"
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 3
        continue
    }
    
    # Now go ahead and dump the aggr.  Assume that the tape at $tcid can be
    # overwritten.
    if [Label_tape $bak_id $butc_id "" "" $dkr_butc_tcid0] {
        send_user "Could not label tape as NULL.\n"
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 4
        continue
    }

    set dump_output [Dump $bak_id $butc_id $dkr_fileset \
		/${dkr_fileset}_full $dkr_butc_tcid0]
    if [string match "-1" $dump_output] {
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 5
    }

CMD-PRE

    if ![expr [verifydb_p $bak_id]&&[is_butc_ready_p $bak_id $dkr_butc_tcid0]] {
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 5
        continue
    }

CMD-POST
    if ![expr [verifydb_p $bak_id]&&[is_butc_ready_p $bak_id $dkr_butc_tcid0]] {
        send_user "Aborting restoredisk command testing.\n"
        cleanup_restoredisk 6
        continue
    }

CMD-CLEANUP
    cleanup_restoredisk 6

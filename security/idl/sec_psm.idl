/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: sec_psm.idl,v $
 * Revision 1.1.2.3  1996/11/13  18:02:37  arvind
 * 	Add/modify copyright info
 * 	[1996/08/23  14:44 UTC  aha  /main/DCE_1.2.2/4]
 *
 * 	[1996/05/08  14:25 UTC  cuti  /main/cuti_pk_work/4]
 *
 * Revision 1.1.2.2  1996/10/03  14:54:27  arvind
 * 	Merge Bill's change
 * 	[1996/08/13  13:48 UTC  cuti  /main/DCE_1.2.2/cuti_pk_bugfix/1]
 * 
 * 	Merge from cuti_pk_export to DCE_1.2.2
 * 	[1996/06/30  21:59 UTC  cuti  /main/DCE_1.2.2/3]
 * 
 * 	Merge PSM, sec_pvtkey, sec_pubkey, dced, base defs for Public Key Login
 * 	[1996/06/11  17:59 UTC  aha  /main/DCE_1.2.2/1]
 * 
 * 	change interface for public key domain.
 * 	make kvno's visible.
 * 	[1996/08/09  17:47 UTC  sommerfeld  /main/DCE122_PK/sommerfeld_pk_kdc/1]
 * 
 * 	[1996/05/08  14:25 UTC  cuti  /main/cuti_pk_work/4]
 * 
 * Revision 1.1.2.1  1996/07/08  20:20:18  arvind
 * 	OSF DCE1.2.2 Drop3
 * 	sec_psm.idl,v
 * 	Revision /main/DCE_1.2.2/3  1996/06/30  21:59 UTC  cuti
 * 	Merge from cuti_pk_export to DCE_1.2.2
 * 	[1996/07/08  19:56:10  arvind]
 * 
 * Revision /main/DCE122_PK/cuti_pk_export/3  1996/06/27  19:42 UTC  cuti
 * 	Merge out from DCE122
 * 
 * 	Change modulus_bit_sixe from in/out to in
 * 	[1996/06/27  15:14 UTC  cuti  /main/DCE122_PK/cuti_pk_export/2]
 * 
 * 	Merge out from cuti_pk_new to cuti_pk_export
 * 
 * 	Change modulus_size to in/out
 * 	[1996/06/11  19:50 UTC  cuti  /main/DCE12_PK/cuti_pk_new/4]
 * 
 * 	Update from review
 * 	[1996/05/24  20:37 UTC  cuti  /main/DCE12_PK/cuti_pk_new/3]
 * 
 * 	Change from local algorithm_id to real ASN.1 algorithm_id
 * 	[1996/05/24  19:26 UTC  cuti  /main/DCE12_PK/cuti_pk_new/2]
 * 
 * 	Update error status.
 * 	[1996/05/23  18:49 UTC  cuti  /main/DCE12_PK/cuti_pk_new/1]
 * 	Revision /main/DCE_1.2.2/2  1996/06/13  21:29 UTC  sommerfeld
 * 	remove double indirection.
 * 	[1996/06/11  18:58 UTC  sommerfeld  /main/DCE122_PK/sommerfeld_pk_indir/1]
 * 
 * Revision /main/DCE_1.2.2/1  1996/06/11  17:59 UTC  aha
 * 	Merge PSM, sec_pvtkey, sec_pubkey, dced, base defs for Public Key Login
 * 
 * Revision /main/DCE122_PK/1  1996/06/04  18:53 UTC  psn
 * 	Merge PK work from DCE12_PK off of DCE_1.2 to DCE122_PK off of DCE_1.2.2.
 * 
 * Revision /main/DCE12_PK/4  1996/05/28  17:59 UTC  cuti
 * 	Merge psm, pvtkey work
 * 
 * 	Update from review
 * 	[1996/05/24  20:37 UTC  cuti  /main/DCE12_PK/cuti_pk_new/3]
 * 
 * 	Change from local algorithm_id to real ASN.1 algorithm_id
 * 	[1996/05/24  19:26 UTC  cuti  /main/DCE12_PK/cuti_pk_new/2]
 * 
 * 	Update error status.
 * 	[1996/05/23  18:49 UTC  cuti  /main/DCE12_PK/cuti_pk_new/1]
 * 	Revision /main/DCE12_PK/3  1996/05/08  15:05 UTC  cuti
 * 	Add psm components
 * 
 * $EndLog$
 */
/*
 * Copyright (c) Hewlett-Packard Company 1996
 * Unpublished work.  All Rights Reserved.
 *
 *       Personal Security Module (PSM) Interface
 *
 */

[
    local
]

interface sec_psm
 
{

    import "dce/sec_pk_base.idl";

    typedef void *sec_psm_handle_t;

/* PSM API */

/* sec_psm_open
 * 
 * Open the personal security mechanism using password.  
 * 
 * Return status
 *   error_status_ok:    Success.
 *   other (non-zero):   sec_pvtkey_privileged
 *                       sec_pvtkey_no_more_memory
 *                       sec_psm_no_more_memory
 *
 * Input
 *
 *   name: Pointer to the user's canonical name within the 
 *         specified domain. 
 *   pwd: Pointer to the user's password.
 *   domain_id: Pointer to the application domain the user 
 *              is operating on.
 *
 * Output
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data. 
 *
 */

error_status_t sec_psm_open(
    [in]  void               *name,
    [in]  char               *pwd,
    [in]  sec_pk_domain_t    *domain_id,
    [out] sec_psm_handle_t   *psm_handle
);


/* sec_psm_close
 * 
 * Close the personal security mechanism and cleanup the 
 * personal security context data.  It also ensures any
 * confidential information such as passwords or private
 * key are zeroed.
 * 
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *         		sec_psm_invalid_handle
 * 	  		sec_psm_internal_error
 *	  		sec_pvtkey_invalid_handle
 *	  		sec_pvtkey_mechanism_not_init
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be 
 *               obtained through sec_psm_open().
 *
 */


error_status_t sec_psm_close(
    [in]  sec_psm_handle_t    psm_handle
);

/* sec_psm_sign_data
 * 
 * Compute the signature of the input data using the
 * signature algorithm specified in the arguments.
 *
 * The routine allocates memory for the data returned in 
 * the signature parameter.  Users should call 
 * sec_pk_data_free() to deallocate that memory.
 * 
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *          		sec_psm_invalid_handle
 *                      sec_psm_unsupported_algorithm_id
 *	  		sec_pvtkey_invalid_handle
 *                      sec_pvtkey_mechanism_not_init
 *                      sec_pvtkey_internal_error
 *                      sec_pvtkey_invalid_password
 *                      sec_pvtkey_multiple_key_usages
 *
 *
 * Input
 *   
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be 
 *               obtained through sec_psm_open().
 *   signature_alg_id: The ASN.1 DER-encoded object ID of the signature
 *                  algorithm, such as MD5WithRSAEncryption.
 *   key_usage: The usage of the private key which should be
 *              picked for this operation.
 *   data: Pointer to the ASN.1 DER-encoded data to be signed.
 *
 * Output
 * 
 *   kvno: Key version number of the key used.  
 *   signature: Pointer to a signature buffer pointer.
 *
 */


error_status_t sec_psm_sign_data(
    [in]  sec_psm_handle_t        psm_handle,
    [in]  sec_pk_algorithm_id_t   *signature_alg_id,
    [in]  sec_pk_usage_flags_t    key_usage,
    [in]  sec_pk_gen_data_t       *data,
    [out] unsigned32              *kvno,
    [out] sec_pk_signed_t         *signature
);


/* sec_psm_verify_data
 * 
 * Verify the data.  Usually, you verify other people's signature.
 * 
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *          		sec_psm_invalid_handle
 *                      sec_psm_unsupported_algorithm_id
 *          		ssec_bsafe_decryption_failure
 *	  		sec_pk_e_domain_unsupported,
 *           		sec_pk_e_usage_unsupported,
 *           		sec_rgy_object_not_found,
 *           		sec_rgy_not_authorized,
 *           		sec_attr_unauthorized
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be
 *               obtained through sec_psm_open().
 *   signer_domain: pointer to the application domain of the principal;
 *              [see the sec_pubkey interface for more details.]
 *   signer_name: Pointer to the name of the principal which had signed
 *                the data.
 *   kvno: Key version number of the key used.  
 *   signature_alg_id: The ASN.1 DER-encoded object ID of the signature
 *                  algorithm, such as MD5WithRSAEncryption.
 *   key_usage: The usage of the ;public key which should be
 *              picked for this operation.
 *   data: Pointer to the data to be verified
 *   signature: Pointer to the signature to be verified.
 *
 */



error_status_t sec_psm_verify_data(
    [in]  sec_psm_handle_t        psm_handle,
    [in]  sec_pk_domain_t         *signer_domain_id,
    [in]  void                    *signer_name,           
    [in]  unsigned32              kvno,
    [in]  sec_pk_algorithm_id_t   *signature_alg_id,
    [in]  sec_pk_usage_flags_t    key_usage,
    [in]  sec_pk_gen_data_t       *data,
    [in]  sec_pk_signed_t         *signature
);


/* sec_psm_encrypt_data
 * 
 * Encrypt the data in the algorithm specified.  The routine
 * allocates memory for the data returned in the cipher_data
 * parameter.  Users should call sec_pk_data_free() to 
 * deallocate that memory.
 *
 * For reference implementation, only keyEncipherment key_usage
 * will be implemented.
 *
 * Usually you encrypt the data with other's public key.
 * 
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *          		sec_psm_invalid_handle
 *                      sec_psm_unsupported_algorithm_id
 *	  		sec_pk_e_domain_unsupported,
 *           		sec_pk_e_usage_unsupported,
 *           		sec_rgy_object_not_found,
 *           		sec_rgy_not_authorized,
 *           		sec_attr_unauthorized
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be
 *               obtained through sec_psm_open().
 *   encryptee_domain: pointer to the application domain of the principal;
 *              [see the sec_pubkey interface for more details.]
 *   encryptee_name: Pointer to the name of the principal this data is
 *                   encrypted for.
 *   encryption_alg_id: The ASN.1 DER-encoded object ID of encryption
 *                   algorithm, such as RSA.
 *   key_usage: The usage of the public key this key pair 
 *              belongs to.
 *   clear_data: Pointer to the ASN.1 DER-encoded data to be encrypted.
 *
 * Input, output
 * 
 *   kvno: Key version number of the key used.  
 *
 * Output
 *
 *   cipher_data: Pointer to the encrypted output buffer.
 */

error_status_t sec_psm_encrypt_data(
    [in]  sec_psm_handle_t              psm_handle,
    [in]  sec_pk_domain_t               *encryptee_domain,
    [in]  void                          *encryptee_name,
    [in,out]  unsigned32                *kvno,
    [in]  sec_pk_algorithm_id_t         *encryption_alg_id,
    [in]  sec_pk_usage_flags_t          key_usage,
    [in]  sec_pk_gen_data_t             *clear_data,
    [out] sec_pk_encrypted_t            *cipher_data
);

/* sec_psm_decrypt_data
 * 
 * Decrypt the mechanism-specific encrypted data. The routine
 * allocates memory for the data returned in the clear_data
 * parameter.  Users should call sec_pk_data_free() to 
 * deallocate that memory. 
 *
 * For reference implementation, only keyEncipherment key_usage
 * will be implemented.
 * 
 * Usually you decrypted the data with your own private key.
 *
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *          		sec_psm_invalid_handle
 *                      sec_psm_unsupported_algorithm_id
 *	  		sec_bsafe_encryption_failure
 *	  		sec_pvtkey_invalid_handle
 *                      sec_pvtkey_mechanism_not_init
 *                      sec_pvtkey_internal_error
 *                      sec_pvtkey_invalid_password
 *                      sec_pvtkey_multiple_key_usages
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be
 *               obtained through sec_psm_open().
 *   kvno: Key version number of the key used.
 *   encryption_alg_id: The ASN.1 DER-encoded object ID of encryption
 *                   algorithm, such as RSA.
 *   key_usage: The usage of the private key which should be
 *              picked for this operation.
 *   cipher_data: Pointer to encrypted cipher buffer.
 *
 *
 * Output
 *
 *   clear_data: Pointer to decrypted clear text buffer pointer.
 *
 */




error_status_t sec_psm_decrypt_data(
    [in]  sec_psm_handle_t              psm_handle,
    [in]  unsigned32                    kvno,
    [in]  sec_pk_algorithm_id_t         *encryption_alg_id,
    [in]  sec_pk_usage_flags_t          key_usage,
    [in]  sec_pk_encrypted_t            *cipher_data,
    [out] sec_pk_gen_data_t             *clear_data
);


/* sec_psm_gen_pub_key
 *
 * Generate public key according to key type.  The routine
 * allocates memeory for the data returned in the key
 * parameters.  Users should call sec_pk_data_free() to
 * deallocate that memory.
 *
 * Currently it only supports RSADSI's public key.
 *
 * Return status
 *   error_status_ok:    Success.
 *   other (non-zero):   sec_psm_wrong_pub_key_type 
 *                       sec_bsafe_alloc
 *
 * Input
 *
 *    key_type: Only RSA_PKCS is supported.
 *
 *    modulus_bit_size: Desired key-length.  The length of the desired key.
 *                 	Interpretation of this parameter is algorithm-dependent;
 *                 	For RSA, it shall be interpreted as the bit-length of
 *                 	the key. 
 *
 * Output
 *
 *    private_key:  Pointer to the encoded private key structure of the
 *                  newly-generated key.  
 *    public_key: Pointer to the encoded public key structure of the
 *                 newly-generated key.
 *
 */


error_status_t sec_psm_gen_pub_key(
    [in]  sec_pk_algorithm_id_t   *key_type,
    [in]  unsigned32              modulus_bit_size,
    [in]  sec_pk_gen_data_t       *seed,
    [out] sec_pk_data_t           *public_key,
    [out] sec_pk_data_t           *private_key
);





/* admin */

/* sec_psm_put_pub_key
 * 
 * Store the public key pair with associated data into the personal 
 * security mechanism.
 *
 *
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *         		sec_psm_invalid_handle
 *	  		sec_pk_e_domain_unsupported,
 *           		sec_pk_e_usage_unsupported,
 *           		sec_rgy_object_not_found,
 *           		sec_rgy_not_authorized,
 *           		sec_attr_unauthorized
 *    			sec_pvtkey_invalid_handle
 *                      sec_pvtkey_mechanism_not_init
 *                      sec_pvtkey_no_more_memory
 *                      sec_pvtkey_internal_error
 *                      sec_pvtkey_same_domain_and_usage_key_already_exists.
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be
 *               obtained through sec_psm_open().
 *   pwd:  Pointer to the user's password.
 *   key_usage: The usage of the public key this key pair 
 *              belongs to.
 *   pvtkey: Pointer to the ASN.1 DER-encoded private key buffer.
 *   pubkey: Pointer to the ASN.1 DER-encoded public key buffer.
 *
 */


error_status_t sec_psm_put_pub_key(
    [in]  sec_psm_handle_t       psm_handle,
    [in]  char                   *pwd,
    [in]  sec_pk_usage_flags_t   key_usage,
    [in]  sec_pk_pubkey_t        *public_key,
    [in]  sec_pk_pvtkey_t        *private_key
);

/* sec_psm_update_pub_key
 * 
 * Update the user's own public key pair or passphrase. The oldpassphrase is 
 * specified to authenticate the user updating the key.
 *
 * In the reference implementation, only a single version of a key
 * with a given key usage will be maintained.  Any old key version
 * will be overwritten.
 * 
 * Return status
 *   error_status_ok:   Success.
 *   other (non-zero):  sec_psm_not_init
 *          		sec_psm_invalid_handle
 *	  		sec_pk_e_domain_unsupported,
 *           		sec_pk_e_usage_unsupported,
 *           		sec_rgy_object_not_found,
 *           		sec_rgy_not_authorized,
 *           		sec_attr_unauthorized
 *     			sec_pvtkey_invalid_handle
 *			sec_pvtkey_mechanism_not_init
 *			sec_pvtkey_private_key_is_not_supplied
 *			sec_pvtkey_new_password_required
 *			sec_pvtkey_no_more_memory
 *			sec_pvtkey_internal_error
 *			sec_pvtkey_no_matched_private_key
 *                      sec_pvtkey_Invalid_password.
 *
 * Input
 *
 *   psm_handle: Pointer to an opaque handle to the personal 
 *               security context data.  This handle should be
 *               obtained through sec_psm_open().
 *   oldpwd:  Pointer to the user's current password.
 *   newpwd:  Pointer to the user's new password.
 *   key_usage: The usage of the public key this key pair 
 *              belongs to.
 *   pvtkey: Pointer to the ASN.1 DER-encoded private key buffer.
 *   pubkey: Pointer to the ASN.1 DER-encoded public key buffer.
 *
 */


error_status_t sec_psm_update_pub_key(
    [in]  sec_psm_handle_t       psm_handle,
    [in]  char                   *oldpwd,
    [in]  char                   *newpwd,
    [in]  sec_pk_usage_flags_t   key_usage,
    [in]  sec_pk_pubkey_t        *public_key,
    [in]  sec_pk_pvtkey_t        *private_key
);


}

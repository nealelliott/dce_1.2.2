#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#

###############################################################################
#    Copyright (C) 1995, 1991 Transarc Corporation - All rights reserved      #
###############################################################################

# This script tests fileset cleanup of Episode filesets.  It exercises the 
# normal aborted-move cases.

###############################################################################

# Usage:	mtest3

# Typically run via:    mtest3 >& mtest3.out

###############################################################################

# Test environment:
# This test requires full-blown DFS with exported Episode. DFS server $SERVER_1
# must export Episode aggregate $SERV1_AGGR1, and $SERVER_2 must export
# $SERV2_AGGR2. $SERVER_1 and $SERVER_2 can be the same machine.

# Privilege required:
# You must be in admin.fl, and in admin.ft on $SERVER_1 and $SERVER_2, in
# order to run the fts commands contained in this script. You must also be
# able to create mount points in $export_root.

# Highest error number is: 64.

###############################################################################

# VOL_RW	0x00001	/* R/W volume */
# VOL_READONLY	0x00002	/* ReadOnly Volume */
# VOL_BUSY	0x00004 /* Volume is Busy */
# VOL_OFFLINE	0x00008 /* Volume is offline */
# VOL_DELONSALVAGE	0x00010 /* Delete On Salvage */
# VOL_OUTOFSERVICE	0x00020 /* Out Of service */
# VOL_TYPEFIELD	0xf0000	/* what high-level type of volume this is */
# VOL_TYPE_RW	0x10000	/* read-write (ordinary) */
# VOL_TYPE_RO	0x20000
# VOL_TYPE_TEMP	0x40000	/* temporary use, for dumps and moves etc. */
# VOL_MOVE_TARGET	0x800000    /* this vol is a target for a move op */
# VOL_MOVE_SOURCE	0x1000000   /* this vol is a source for a move op */
# VOL_ZAPME	0x2000000   /* delete volume with extreme prejudice */
# VOL_CLONEINPROG 0x4000000   /* this vol is partially cloned */
# VOL_OPENDONE	0x10000000   /* back from VOL_OPEN procedure */

###############################################################################

d=`pwd`
p=`basename $0`
dn=`dirname $0`
rc=0
ty=mov

# Load the test context.
. $dn/statusCheck

# Sets testuser and testuid
getUserId
echo "TESTER is $testuser, TESTER ID is $testuid"

ft_1=Dogbreath.$$

dir_1=$test_root/Plague.$$

SHORT_SERVER_1=`echo $SERVER_1 | sed -e 's;/.*/\([^/]*\);\1;'`
SHORT_SERVER_2=`echo $SERVER_2 | sed -e 's;/.*/\([^/]*\);\1;'`

export ft_1 dir_1 SHORT_SERVER_1 SHORT_SERVER_2

###############################################################################

echo ""
echo "$ty/$p starting as PID $$ at `date` on $hn"
echo "   in cell $CELL_NAME."
echo "Using aggregates $SERV1_AGGR1 on $SERVER_1 and $SERV2_AGGR2 on $SERVER_2."

echo ""
echo "Will attempt moves between $SERVER_1 and $SERVER_2"
echo "Short names: $SHORT_SERVER_1 and $SHORT_SERVER_2"
if test "$SERVER_1" = "$SERVER_2"
    then
	echo 'These are the same server!  ABORTING'
	exit 2
fi

if test "$CELL_NAME" = ""
   then echo "Can't find cellname in /opt/dcelocal/dce_cf.db - aborting."
	 exit 2
   fi

bombset=" "
for pel in $path /opt/dcelocal/bin /opt/dce*/bin . ; do
	if [ -x $pel/bomb ]
	then
		bombset="$pel/bomb set"
		echo "Using $pel/bomb as bomb-setter."
		break
	fi
done
if [ "$bombset" = " " ]
then
	echo "No bomb_set program to be found in any obvious place!  Aborting."
	exit 2
fi
export bombset

###############################################################################

# : ${CASES="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23"}
: ${CASES="1 2 7 8 9 11 12 13 14 15 16 17 18 19 20 21 22 23"}
export CASES

echo ""; echo "Fileset moves"; echo "-------------"

########################################

echo ""; echo "Creating filesets with names starting with $ft_1 ...."
for ix in $CASES; do
    fts create $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $cav_arg; rf=$?
    if test $rf -ne 0
	then echo "- fts create failed (errno $rf) ($p: E$ix.61)"; rc=`expr $rc + 1`
	     echo "BAILING OUT of this part"; continue
	fi

    ftid=`fts lsfldb $ft_1.$ix $cav_arg | sed -n '/readWrite/s/.*readWrite.*ID \([^ ,]*\),,\([^ ]*\) .*/\1,,\2/p'`
    fthi=`echo $ftid | sed -n 's/\([^,]*\),,\([^,]*\)/\1/p'`
    ftlo=`echo $ftid | sed -n 's/\([^,]*\),,\([^,]*\)/\2/p'`
    if test "$fthi" -eq 0 -a "$ftlo" -eq 0
	then echo "- fileset ID is unreasonable ($ftid, $fthi, $ftlo) ($p: E$ix.62)"
	     rc=`expr $rc + 1`
	     echo "BAILING OUT of this part"; continue
	fi
    eval ftid_$ix=$ftid

    echo "Creating mount point at $dir_1.$ix for $ft_1.$ix ..."
    fts crmount $dir_1.$ix $ft_1.$ix $CELL_ARG; rf=$?
    if test $rf -ne 0
	then echo "- fts crmount failed (errno $rf) ($p: E$ix.63)"; rc=`expr $rc + 1`
	fi
 
    setFsetRootProt $dir_1.$ix $testuid "E$ix.64"
done

########################################

echo ""; echo "Putting stuff in the new filesets..."
for ix in $CASES; do
    cd /tmp; cd $dir_1.$ix; rf=$?
    if test `pwd` != $dir_1.$ix -o $rf -ne 0
	then echo "- cd $dir_1.$ix failed (errno $rf, wd `pwd`) ($p: E$ix.64)"
	     echo "BAILING OUT of this part"; continue
	fi

    cat > f0 << ==END==

    We hold these truths to be self-evident, that all men are created equal,
    that they are endowed by their creator with certain unalienable rights,
    that among these are life, liberty, and the pursuit of happiness. That
    to secure these rights, governments are instituted among men, deriving
    their just powers from the consent of the goverened.

    That whenever any form of government becomes destructive of these ends,
    it is the right of the people to alter or abolish it, and to institute
    new government, laying its foundations on such principles and organizing
    its powers in such form, as to them shall seem most likely to effect
    their safety and happiness.

==END==
    echo "fset $ix here; Elvis has just left the building" > f1.$ix
    echo "She wants to sell my back monkey" > f2.$ix
    echo "Buy Sam a drink and get his fish one too" > f3.$ix
    echo "This is $dir_1/file_1.$ix." > file_1.$ix
    cat file_1.$ix file_1.$ix file_1.$ix file_1.$ix | sed 's/file_1/file_4.$ix/' > file_4.$ix
    cat file_4.$ix file_4.$ix file_4.$ix file_4.$ix | sed 's/file_4/file_16/' > file_16.$ix
    mkdir d1 d2...$ix d3
    cp f* d1
    cp file_4.$ix d2...$ix
    cp file_16.$ix d3
    fts lsmount $dir_1.$ix
    cm whereis .
done

cd /tmp

########################################

export SERVER_1 SERVER_2 SERV1_AGGR1 SERV2_AGGR2 cav_arg CELL_ARG

for ix in $CASES; do

########################################

echo ""; echo "Case ${ix}:"

msg=""
case $ix in
	1) msg="Initial state.";;
	2) msg="Abort after making the source fileset busy.";;
	3) msg="Abort after creating the clone.";;
	4) msg="Abort after initially making the new clone busy.";;
	5) msg="Abort after setting CLONEINPROG and ZAPME in the source and clone.";;
	6) msg="Abort after finishing the source clone, while the clone is still busy.";;
	7) msg="Abort after making the clone.";;
	8) msg="Abort after the clone is made and no filesets are busy.";;
	9) msg="Abort after making the clone busy in preparing to dump it.";;
	10) msg="Abort after first creating the target.";;
	11) msg="Abort after first making the target busy.";;
	12) msg="Abort after marking the target with ZAPME.";;
	13) msg="Abort after setting TARGET in the target.";;
	14) msg="Abort after dumping the clone and destroying it.";;
	15) msg="Abort after taking the source off-line for the last time.";;
	16) msg="Abort after doing the incremental dump and turning off ZAPME in the target.";;
	17) msg="Abort after turning off BUSY and DELONSALVAGE in the target.";;
	18) msg="Abort after setting SOURCE in the source.";;
	19) msg="Abort after switching the FLDB.";;
	20) msg="Abort after setting OFFLINE in the source.";;
	21) msg="Abort after exposing OFFLINE in the source.";;
	22) msg="Abort after getting THERE token and clearing TARGET in the target.";;
	23) msg="Normal move.";;
esac
if [ "$msg" = "" ]
    then
	msg="State $ix"
    fi
echo $msg

# Do the possibly-sabotaged move operation.

case $ix in
1)
# The initial state--no move.
;;

2)
# Abort after making the source fileset busy.
$bombset 'clonevolume#3:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.1)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

3 | 4 | 5 | 6 | 10)
# State cannot be reached.
echo "State $ix is internal to ftserver and CANNOT BE REACHED with fts alone."
echo "--ABORTING state $ix--"
;;

7)
# Abort after the clone is made and making it busy
$bombset 'clonevolume#7:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.2)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

8)
# Abort after the clone is made and no filesets are busy.
$bombset 'movevolume#25:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.3)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

9)
# Abort after making the clone busy in preparing to dump it.
$bombset 'copyclone#3:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.4)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

11)
# Abort after first making the target busy.
$bombset 'copyclone#5:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.5)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

12)
# Abort after marking the target with ZAPME.
$bombset 'copyclone#6:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.6)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

13)
# Abort after setting TARGET in the target.
$bombset 'copyclone#8:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.7)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

14)
# Abort after dumping the clone and destroying it.
$bombset 'copyclone#12:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.8)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

15)
# Abort after taking the source off-line for the last time.
$bombset 'copyclone#14:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.9)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

16)
# Abort after doing the incremental dump and turning off ZAPME in the target.
$bombset 'movevolume#28:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.10)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

17)
# Abort after turning off BUSY and DELONSALVAGE in the target.
$bombset 'movevolume#29:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.11)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

18)
# Abort after setting SOURCE in the source.
$bombset 'movevolume#30:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.12)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

19)
# Abort after switching the FLDB.
$bombset 'movevolume#47:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.13)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

20)
# Abort after setting OFFLINE in the source.
$bombset 'movevolume#48:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.14)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

21)
# Abort after exposing OFFLINE in the source.
$bombset 'movevolume#48a:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.15)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

22)
# Abort after getting THERE token and clearing TARGET in the target.
$bombset 'movevolume#52:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.16)"; rc=`expr $rc + 1`
	echo 1 > $resfile
   fi
;;

23)
# The normal operation.
fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
    if test $rf -ne 0
	then echo "- fts move failed (errno $rf) ($p: E$ix.17)"; rc=`expr $rc + 1`
	    echo 1 > $resfile
	fi
;;

esac

# Advance to the next case (setup phase)
done

# Wait for the filesets to lose VOL_BUSY, if necessary.
for ix in $CASES; do
case $ix in
2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20)
echo ''; echo 'Sleeping ten minutes, until filesets are not busy.'
date; sleep 600; date; break;;
esac
done

# Now re-try a normal fileset move.
for ix in $CASES; do
fts unlock $ft_1.$ix $cav_arg
fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
    if test $rf -ne 0
	then echo "- fts move failed (errno $rf) ($p: E$ix.17)"; rc=`expr $rc + 1`
	    echo 1 > $resfile
	fi
done


# Read the presence/absence on the disks
fts lshead $SERVER_1 $SERV1_AGGR1 -long -verbose $cav_arg > /tmp/src-list.$$; rf=$?
if test $rf -ne 0
   then echo "- source fts lshead failed (errno $rf) ($p: E$ix.25)"; rc=`expr $rc + 1`
   fi
fts lshead $SERVER_2 $SERV2_AGGR2 -long -verbose $cav_arg > /tmp/dst-list.$$; rf=$?
if test $rf -ne 0
   then echo "- source fts lshead failed (errno $rf) ($p: E$ix.26)"; rc=`expr $rc + 1`
   fi

########################################

for ix in $CASES; do

########################################

echo ""; echo "Analysis for case ${ix}:"

# Check for fldb motion
fts lsfldb $ft_1.$ix $cav_arg | grep RW > /tmp/fl-list.$ix.$$
# Check where the CM thinks the fileset is.
cm whereis $dir_1.$ix/. > /tmp/cm-list.$ix.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix 'cm whereis' fails (error $rf) ($p: E$ix.27)"; rc=`expr $rc + 1`
    fi
grep -s "fileset '$ft_1.$ix'" /tmp/cm-list.$ix.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix CM does not point to fileset (status $rf) ($p: E$ix.28)"; rc=`expr $rc + 1`
    fi



# ----- SOURCE STATUS CHECK -----
# ----- SOURCE STATUS CHECK -----
# ----- SOURCE STATUS CHECK -----
# Source should not contain the fileset.
grep -s "$ft_1.$ix " /tmp/src-list.$$; rf=$?
if test $rf -ne 1
    then echo "- $ft_1.$ix is present on source (status $rf) ($p: E$ix.36)"; rc=`expr $rc + 1`
    fi

# ----- TARGET STATUS CHECK -----
# ----- TARGET STATUS CHECK -----
# ----- TARGET STATUS CHECK -----
# When the target isn't busy, check that the fileset is there.
grep -s "$ft_1.$ix " /tmp/dst-list.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix not on target (status $rf) ($p: E$ix.41)"; rc=`expr $rc + 1`
    fi
tgtstatus=`grep "$ft_1.$ix " /tmp/dst-list.$$ | awk '{if ($5=="states") print $6}'`
if test "$tgtstatus" = ""
    then echo "- target status unreadable (status $rf) ($p: E$ix.59)"; rc=`expr $rc + 1`
    fi
goodtstatus="0x10010005"
if [ "$tgtstatus" != "$goodtstatus" ]
    then echo "- target status wrong (status $tgtstatus, not $goodtstatus) ($p: E$ix.60)"; rc=`expr $rc + 1`
    fi

# ----- FLDB LOCATION CHECK -----
# ----- FLDB LOCATION CHECK -----
# ----- FLDB LOCATION CHECK -----
# Check for fldb motion
grep "^$SHORT_SERVER_1" /tmp/fl-list.$ix.$$ > /tmp/fl-list1.$ix.$$
grep "^$SHORT_SERVER_2" /tmp/fl-list.$ix.$$ > /tmp/fl-list2.$ix.$$
# Check that the FLDB does not point to the source, but points to the target
grep -ws $SERV1_AGGR1 /tmp/fl-list1.$ix.$$; rf=$?
if test $rf -ne 1
    then echo "- $ft_1.$ix FLDB points to source (status $rf) ($p: E$ix.44)"; rc=`expr $rc + 1`
    fi
grep -w $SERV2_AGGR2 /tmp/fl-list2.$ix.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix FLDB does not point to target (errno $rf) ($p: E$ix.45)"; rc=`expr $rc + 1`
    fi

# ----- CM LOCATION CHECK -----
# ----- CM LOCATION CHECK -----
# ----- CM LOCATION CHECK -----
# If the fileset isn't busy, check where the CM thinks it is.
# Fileset should not be busy.  CM should think it's on the target.
grep -s "host $SHORT_SERVER_1" /tmp/cm-list.$ix.$$; rf=$?
if test $rf -ne 1
    then echo "- $ft_1.$ix CM points to source server (status $rf) ($p: E$ix.48)"; rc=`expr $rc + 1`
    fi
grep -s "host $SHORT_SERVER_2" /tmp/cm-list.$ix.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix CM does not point to target server (status $rf) ($p: E$ix.49)"; rc=`expr $rc + 1`
    fi

# Clean up from one run

rm -f /tmp/src-list.$ix.$$ /tmp/src-list2.$ix.$$
rm -f /tmp/dst-list.$ix.$$ /tmp/dst-list2.$ix.$$
rm -f /tmp/fl-list.$ix.$$ /tmp/fl-list1.$ix.$$ /tmp/fl-list2.$ix.$$
rm -f /tmp/cm-list.$ix.$$

########################################

# Advance to the next case

done

# Clean up from all runs
rm -f /tmp/src-list.$$ /tmp/dst-list.$$

########################################

echo ""; echo "Done with move tests"

echo ""; echo "Cleaning up filesets with names starting with $ft_1 ...."
cd /tmp
for ix in $CASES; do
    fts delmount $dir_1.$ix $CELL_ARG
    fts unlock $ft_1.$ix $cav_arg
    fts delfldb $ft_1.$ix $cav_arg
    ctrname=`echo "\$ ftid_$ix" | tr -d ' '`
    fts zap `eval echo $ctrname` $SERVER_1 $SERV1_AGGR1 $cav_arg
    fts zap `eval echo $ctrname` $SERVER_2 $SERV2_AGGR2 $cav_arg
    cctrname=`echo "\$ ftid_clone_$ix" | tr -d ' '`
    if [ "`eval echo $cctrname`" != "" ]
	then fts zap `eval echo $cctrname` $SERVER_1 $SERV1_AGGR1 $cav_arg
    fi
done

###############################################################################

echo ""; echo "All done with cases ${CASES} at `date`."; echo ""
if test $rc -eq 0
   then echo "$p PASSED"
   else echo "$p FAILED ($rc errors)"
   fi
exit $rc

###############################################################################

*
* @OSF_COPYRIGHT@
* COPYRIGHT NOTICE
* Copyright (c) 1993 Open Software Foundation, Inc.
* ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
* src directory for the full copyright text.
*
*
* (C) Copyright 1993 Transarc Corporation.
* All Rights Reserved.
*
*
* HISTORY
* $Log: adverse_move3.itl,v $
* $EndLog$
*
* adverse_move3.itl
*
* This is one of 10 test programs testing the CM under Adverse Fileset Moves
* For more detailed information about the test, please refer to the document
* [Test the CM Under Adverse Fileset Moves]
*
*
* In a very rare situation, a fileset could be moved to a new location
* without all of participating CMs involved. That is, the HERE-token-revocation
* request never arrives to a particular CM during the the move. Therefore, the
* CM still thinks that it has some tokens granted from the source file server.
* The CM will not notice that the fileset is actually moved until one of users
* issues an RPC call to access that fileset. This RPC call will then trigger 
* the CM to perform the TSR-MOVE procedure at run time. 
* 
* The test environment of this test is very similar to Test No.#2 execpt this
* test program is to make sure that CM will not recover the System V locks 
* for files open before the move. The CM will mark them STALE.
*
*  Requirements -
*	2 machines used as CM1/FX1 and CM2/FX2.
*
*  Setup - (2 machine)
*	The master(ie., Hub) and client #1 running MoveClient#1 are started on 
*       Machine #1 and client #2 running MoveClient#2 started on Machine #2.
*       The filset, fset1, is exported by FX1 and later moved to FX2.
* 
* HISTORY
* $Log:$
*
* $EndLog$
******************************************************************************





******************************************************************************
*                                                                            *
*                        HUB CODE                                            *
*                                                                            *
******************************************************************************
*
*
* Echo the following msg !
!* Include adverse-move configuration.
*
include adverse_move.config
*
*
set WRITE_OFFSET0 int (0 * $chunkSize)
set WRITE_OFFSET1 int ((1 * $chunkSize) - 10 )
set WRITE_OFFSET2 int ((2 * $chunkSize) - 10 )
set WRITE_OFFSET3 int ((3 * $chunkSize) - 10 )
set WRITE_OFFSET4 int ((4 * $chunkSize) - 10 )
set WRITE_OFFSET5 int ((5 * $chunkSize) - 10 )
set newline vector "0x0a0d"
*
*
*
* Hub Code. 
*
* The Hub code does the following initialization:
* 
* 1) Create a fileset, $fset1
* 2) Mount $fset1 to dir /:/$fset1
* 3) Create two dirs,  /:/$fset1/tdir1 and /:/$fset1/tdir1
*
!* Delete the existing fileset, $fset1 and mount point, $mt, if any
*
*
!* Clean up ....it may take a while ....
*
set ITL_IgnoreShellError 1
set command string ("fts lsfldb " + $fset1 + " " +$dumpDev )
shellExec command
if ($CommandResult == 0) {

    set command string ("fts delete " + $fset1 + " " +$HostName1+ " " + $aggrDev1 +$dumpDev )
    shellExec command
    if ($CommandResult != 0) {
	* 
	* Delete the fileset from another server.
	set command string ("fts delete " + $fset1 +" "+$HostName2+ " " + $aggrDev2 +$dumpDev )
	shellExec command    
        if ($CommandResult != 0) {
	    echo
            echo "ERROR: cannot delete the fileset $fset1 !"
	    echo
	    quit
        }
    }	
}
set ITL_IgnoreShellError 0
set command string ("cd /:")
shellExec command
set ITL_IgnoreShellError 1
set command string ("fts delm " + " " + $mt + $dumpDev )
shellExec command
set ITL_IgnoreShellError 0
set command string ("cm checkfileset" + $dumpDev )
shellExec command
*
!* Creating fileset, $fset1, on $aggrDev1 of $HostName1 ...
*
set command string ("fts create " + " " + $fset1 + " " + $HostName1 + " " + $aggrDev1 +  $dumpDev )
shellExec command
*
!* Set quota size to $fsetQuota
*
set command string ("fts setquota -fileset " + $fset1 + " -size " +$fsetQuota )
shellExec command
*
!* Mount the fileset, $fset1, on $mt
*
set command string ("fts crm " + " " + $mt + " " + $fset1 + $dumpDev )
shellExec command
*
!* Create two dirs $testDir1 and $testDir2
*
set command string (" mkdir " + $testDir1)
shellExec command
set command string (" mkdir " + $testDir2)
shellExec command
*
*
  set fileDataA string "It is really a boring task, but someone got to do it"
  set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
*
*
******************************************************************************
*                                                                            *
*                          Process 1 On Machine1                             *
*                                                                            *
******************************************************************************
*
*
*
!* Define procedure for process No#1 running on M1
* 
set MoveClient1 proc
END_PROC
  *
  *
  !* Start process MoveClient1 
  *
  *  Set up local variables
  *  NOTE that until the notion of GLOBAL VARIABLE is implemented in ITL,
  *       we have to duplicate these "Shared varaibles" in every procedure.
  *       All these "Shared variables" are defined in ADVERSE_MOVE.CONFIG.
  *
  !* Get READ tokens for files in $mt and $testDir1
  *
  set dumpDev string " > /dev/null"
  set fileDataA string "It is really a boring task, but someone got to do it"
  set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
  *
  *
  set command string ("cm checkfileset" + @dumpDev )
  shellExec command
  set command string ("ls -l " + $mt + " " + @dumpDev )
  shellExec command
  *
  set command string ("ls -l " + $testDir1  + @dumpDev )
  shellExec command
  set command string ("ls -l " + $testDir2  + @dumpDev )
  shellExec command
  *
  !* Now create files $testFile1 and $testFile4
  * 
  open $testFile1 (@O_RDWR | @O_CREAT) 0644 fileId1
  *
  !* Write Lock the entire $testFile1
  *
  set LockData fs_flock @F_WRLCK @SEEK_SET 0 0
  fcntl @fileId1 @F_SETLK LockData
  lseek @fileId1 @SEEK_SET $WRITE_OFFSET1
  write @fileId1 @fileDataA
  lseek @fileId1 @SEEK_SET $WRITE_OFFSET4
  write @fileId1 @fileDataB
  *
  *
  open $testFile4 (@O_RDWR | @O_CREAT) 0644 fileId4
  set ENDRANGE int ($WRITE_OFFSET2 + 1000)
  !* Write Lock $testFile4 from $WRITE_OFFSET2 to @ENDRANGE
  *
  set LockData fs_flock @F_WRLCK @SEEK_SET $WRITE_OFFSET2 @ENDRANGE
  fcntl @fileId4 @F_SETLK LockData
  lseek @fileId4 @SEEK_SET $WRITE_OFFSET2
  write @fileId4 @fileDataA
  *
  set ENDRANGE int ($WRITE_OFFSET5 + 1000)
  !* Write Lock $testFile4 from $WRITE_OFFSET4 to @ENDRANGE
  set LockData fs_flock @F_WRLCK @SEEK_SET $WRITE_OFFSET5 @ENDRANGE
  fcntl @fileId4 @F_SETLK LockData
  lseek @fileId4 @SEEK_SET $WRITE_OFFSET5
  write @fileId4 @fileDataB
  *
  *
  sync_join "WAIT_FOR_SYSTEM5_LOCK" $syncPointTimeout
  *
  *
  !* Try to READ Lock $testFile2 .. (Should not get one)
  * 
  open $testFile2 (@O_RDWR | @O_CREAT) 0644 fileId2
  set LockData fs_flock @F_RDLCK @SEEK_SET 0 0
  verifyStatus false
  fcntl @fileId2 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo
     echo ERROR: gets READ LOCK for $testFile2 !
     echo
     set ITL_SpokeResult int -1
     quit
  }
  verifyStatus true 	
  *
  !* Wait for the event of MISSING A TOKEN REVOCATION ..
  *   It is established by setting the bomb point off.
  *
  sync_join "WAIT_FOR_MISS_REVOKE" $syncPointTimeout
  *
  *
  !* Wait for the fileset to be moved. 
  * 
  sync_join "MOVE_THE_FILESET" $syncPointTimeout
  *
  *
  !* Wait for the CM to behave normally ..
  * 
  sync_join "WAIT_FOR_MISS_REVOKE_OFF" $syncPointTimeout
  *
  !*
  !* Verify results after CM's performing TSR-MOVE procedures 'on the fly' ..
  !* 
  !* 1) Open $testFile2, get READ Lock for entire file and read it ..
  *
  open $testFile2 (@O_RDWR | @O_CREAT) 0644 fileId2
  set LockData fs_flock @F_RDLCK @SEEK_SET 0 0 
  fcntl @fileId2 @F_SETLK LockData
  lseek @fileId2 @SEEK_SET $WRITE_OFFSET2
  read @fileId2 #@fileDataA readBuffer
  if (@readBuffer != @fileDataA ) {
      echo 
      echo ERROR on read file $testFile2:
      echo Expected: @fileDataA
      echo Actual: @readBuffer
      set ITL_SpokeResult int -1
      quit
  } else {
      echo
      echo Result #1) OK: Gets READ Lock from $testFile2 !
      echo
  }
  *
  !* 2) Test $testFile1 and $testFile4
  *
  set LockData fs_flock @F_WRLCK @SEEK_SET 0 0 
  verifyStatus false
  fcntl @fileId1 @F_SETLK LockData
  if ( @ITL_Status != @ESTALE ) {
     echo
     echo ERROR: $testFile1 is not STALE
     set ITL_SpokeResult int -1
  } else {
    echo
    echo Result #2) OK: $testFile1 is STALE !
    echo
  }
  *
  fcntl @fileId4 @F_SETLK LockData
  if ( @ITL_Status != @ESTALE ) {
     echo
     echo ERROR: $testFile4 is not STALE
     set ITL_SpokeResult int -1
  } else {
    echo
    echo Result #2) OK: $testFile4 is STALE !
    echo
  }
  verifyStatus true
  *
  !* 3) Try to get READ Lock for file3 (Should not)
  *
  open $testFile3 (@O_RDWR | @O_CREAT) 0644 fileId3
  set ENDRANGE int ($WRITE_OFFSET3 + 1000)
  set LockData fs_flock @F_RDLCK @SEEK_SET $WRITE_OFFSET2 @ENDRANGE
  verifyStatus false
  fcntl @fileId3 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo 
     echo ERROR: get READ LOCK in ($WRITE_OFFSET2, @ENDRANGE)
     echo
     set ITL_SpokeResult int -1
     quit
  } else {
    echo
    echo Result #3) OK: cannot get READ Lock in ($WRITE_OFFSET2, @ENDRANGE)
    echo
  }
  verifyStatus true
  *
  !* 4) Try to WRITE Lock $testFile5 (Should not)
  *
  open $testFile5 (@O_RDWR | @O_CREAT) 0644 fileId5
  set LockData fs_flock @F_RDLCK @SEEK_SET 0 0 
  verifyStatus false
  fcntl @fileId5 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo
     echo ERROR: get WRITE LOCK for whole file !
     echo
     set ITL_SpokeResult int -1
     quit
  } else {
    echo
    echo Result #4) OK: cannot get the WRITE Lock !
    echo
  }
  verifyStatus true
  *
  !* Wait for "WAIT_FOR_TEST_COMPLETE" Sync point
  *
  sync_join "WAIT_FOR_TEST_COMPLETE" $syncPointTimeout
  *
  !* close all files, we are done!
  *
  close @fileId2
  close @fileId5
  quit
END_PROC
*
*
******************************************************************************
*                                                                            *
*                          Process 2 On Machine2                             *
*                                                                            *
******************************************************************************
*
*
*
*  Implmentation for MoveClient
*
*
set MoveClient2 proc
END_PROC
  *
  *
  !* Start process MoveClient2
  *
  *  Set up local variables
  *  NOTE that until the notion of GLOBAL VARIABLE is implemented in ITL,
  *       we have to duplicate these "Shared varaibles" in every procedure.
  *
  *
  *
  !* Get READ tokens for files in $mt and $testDir1
  *
  set dumpDev string " > /dev/null "
  set fileDataA string "It is really a boring task, but someone got to do it"
  set fileDataB string "I beg your pardon. I never promise you a rose gardon even though I may have left my heart in San Francisco ...."
  *
  *
  set command string ("cm checkfileset" + @dumpDev )
  shellExec command

  set command string ("ls -l " + $mt + " " + @dumpDev )
  shellExec command
  *
  set command string ("ls -l " + $testDir1  + @dumpDev )
  shellExec command
  set command string ("ls -l " + $testDir2  + @dumpDev )
  shellExec command
  *
  *
  !* Create a new file $testFile2 and ....
  *
  open $testFile2 (@O_RDWR | @O_CREAT) 0644 fileId2
  set ENDRANGE int ($WRITE_OFFSET2 + 1000)
  !* WRITE Lock $testFile2 from $WRITE_OFFSET2 to @ENDRANGE
  set LockData fs_flock @F_WRLCK @SEEK_SET $WRITE_OFFSET2 @ENDRANGE
  fcntl @fileId2 @F_SETLK LockData
  lseek @fileId2 @SEEK_SET $WRITE_OFFSET2
  write @fileId2 @fileDataA
  *
  !* Create a new file $testFile3 and ....
  *
  open $testFile3 (@O_RDWR | @O_CREAT) 0644 fileId3
  set ENDRANGE int ($WRITE_OFFSET3 + 1000)
  !* WRITE Lock $testFile3 from $WRITE_OFFSET3 to @ENDRANGE
  set LockData fs_flock @F_WRLCK @SEEK_SET $WRITE_OFFSET3 @ENDRANGE
  fcntl @fileId3 @F_SETLK LockData
  lseek @fileId3 @SEEK_SET $WRITE_OFFSET3
  write @fileId3 @fileDataA
  *
  !* Test the System Lock
  *
  sync_join "WAIT_FOR_SYSTEM5_LOCK" $syncPointTimeout
  *
  *
  !* Try to WRITE Lock entire $testFile1 (Should not)
  *
  open $testFile1 (@O_RDWR | @O_CREAT) 0644 fileId1
  set LockData fs_flock @F_WRLCK @SEEK_SET 0 0 
  verifyStatus false
  fcntl @fileId1 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo
     echo ERROR: gets WRITE LOCK for $testFile1
     echo
     set ITL_SpokeResult int -1
     quit
  }
  verifyStatus true
  *
  !* Wait for the event of MISSING A TOKEN REVOCATION ..
  *   It is established by setting the bomb point off.
  *
  sync_join "WAIT_FOR_MISS_REVOKE" $syncPointTimeout
  *
  *
  !* Wait for the Fileset to be moved and then update files
  *
  sync_join "MOVE_THE_FILESET" $syncPointTimeout
  *
  !* After the fileset is MOVED .... 
  *
  !* create $testFile5 and get WRITE Lock ..
  * 
  open $testFile5 (@O_RDWR | @O_CREAT) 0644 fileId5
  set LockData fs_flock @F_WRLCK @SEEK_SET 0 0
  fcntl @fileId5 @F_SETLK LockData
  lseek @fileId5 @SEEK_SET $WRITE_OFFSET5
  write @fileId5 @fileDataA
  * 
  !* close $testFile2 and release all LOCKs
  *
  close @fileId2
  * 
  !* Wait for the CM to behave normally
  *
  sync_join "WAIT_FOR_MISS_REVOKE_OFF" $syncPointTimeout
  *
  *
  !* Sleep for 1 minute
  *
  Sleep 60000
  *
  !* 1) Try to get WRITE Lock on $testFile1 
  *
  verifyStatus false
  set LockData fs_flock @F_WRLCK @SEEK_SET 0 0 
  fcntl @fileId1 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo
     echo Result #1) OK: get the WRITE Lock !
     echo
     set ITL_SpokeResult int -1
     quit
  } else {
     echo
     echo ERROR: cannot get WRITE LOCK for $testFile1 !
     echo
  }
  *
  !* 2) Try to get WRITE Lock on $testFile4 
  *
  open $testFile4 (@O_RDWR | @O_CREAT) 0644 fileId4
  set LockData fs_flock @F_WRLCK @SEEK_SET $WRITE_OFFSET2 $WRITE_OFFSET5
  fcntl @fileId4 @F_SETLK LockData
  if ( @ITL_Status == 0 ) {
     echo
     echo Result #3) OK: get the WRITE Lock !
     echo
     set ITL_SpokeResult int -1
     quit
  } else {
     echo
     echo ERROR: cannot get WRITE LOCK on $testFile4 !
     echo
  }
  verifyStatus true
  *
  !* Wait for the "WAIT_FOR_TEST_COMPLETE"
  *
  sync_join "WAIT_FOR_TEST_COMPLETE" $syncPointTimeout
  *
  *
  close @fileId5
  close @fileId4
  close @fileId3
  close @fileId1
  echo 
  echo Proc 2 Completes !
  quit
END_PROC
*
*
******************************************************************************
*                                                                            *
*                         Now Back to the Hub code                           *
*                                                                            *
******************************************************************************
set clientErrors int 0
*
*
*
*
!* Send test procedures to clients.
*
loop x  0 1 1 
   set y int ($x + 1)
   set procName string ("MoveClient" + $y)
   rexec_async $ITL_spoke[$x] $procName clientResults[$x] asyncId[$x]
endLoop
*
*
!* Create "WAIT_FOR_SYSTEM5_LOCK" $syncPointTimeout
*
sync_create "WAIT_FOR_SYSTEM5_LOCK" 2 $syncPointTimeout
sync_release "WAIT_FOR_SYSTEM5_LOCK"
*
*
!* Create  "WAIT_FOR_MISS_REVOKE" sync point.
*
sync_create "WAIT_FOR_MISS_REVOKE" 2 $syncPointTimeout
*
*
!* Set off the "Bomb Point" to make CM lose token-revocation
*
*
set command string ("bomb set 'GIVEUP_TOKEN:error=-1:count=1+1' -kernel")
shellExec command
* 
*
!* Release "WAIT_FOR_MISS_REVOKE" sync point
*
sync_release "WAIT_FOR_MISS_REVOKE"
*
*
!* Create  "MOVE_THE_FILESET" sync point.
*
sync_create "MOVE_THE_FILESET" 2 $syncPointTimeout
*
*
*  Move the fileset 
!* Moving fileset $fset1 from, $HostName1 $aggrDev1, to, $HostName2 $aggrDev2
*
set command string ("fts move " + $fset1 + " " + $HostName1 + " " + $aggrDev1 + " " + $HostName2 + " " + $aggrDev2 + " -verbose")
echo $command
shellExec command
*
*
!* Release sync point "MOVE_THE_FILESET"
*
sync_release "MOVE_THE_FILESET"
*
!* Create  "WAIT_FOR_MISS_REVOKE_OFF" sync point.
*
sync_create "WAIT_FOR_MISS_REVOKE_OFF" 2 $syncPointTimeout
*
*
*
!* Set off the "Bomb Point" to make CM  behave normally
*
set command string ("bomb unset -bpname 'GIVEUP_TOKEN' -kernel")
shellExec command
*
*
!* Release "WAIT_FOR_MISS_REVOKE_OFF" sync point.
*
*
sync_release "WAIT_FOR_MISS_REVOKE_OFF"
*

!* Create "WAIT_FOR_TEST_COMPLETE" Sync point
sync_create "WAIT_FOR_TEST_COMPLETE" 2 $syncPointTimeout
*
*
!* Release "WAIT_FOR_TEST_COMPLETE" Sync point
sync_release "WAIT_FOR_TEST_COMPLETE"
*
*
*
set syncClients int 2
*
loop x  0 1 1
   async_join $asyncId[$x] $syncPointTimeout
*
!* Validating results after async join number $x
*
    if ($clientResults[$x] != 0) {
      echo Client $x had a failure, status was $clientResults[$x]
      set clientErrors ($clientErrors + 1)
    }
endLoop

if ($clientErrors == 0) {
  echo 
  echo Adverse Move Test No.3 Completed Successfully!
  echo 
}
else {
  error Adverse Move Test No.3 FAILED - with $clientErrors client failures.
}

quit



# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: README,v $
# Revision 1.1.10.1  1996/10/17  18:22:18  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:51:39  damon]
#
# Revision 1.1.5.2  1993/08/03  20:09:57  rsarbo
# 	correct typo in name of UFS_FSNAME_2 environment variable
# 	[1993/08/03  19:54:38  rsarbo]
# 
# Revision 1.1.2.8  1993/03/31  17:34:12  jaffe
# 	Transarc delta: shl-ot7591-fix-fts-test18
# 	  Selected comments:
# 	    Removed references to EPI_PART_1 and EPI_PART_2;
# 	    added caveats for running test18.
# 	[1993/03/31  15:44:10  jaffe]
# 
# Revision 1.1.2.7  1993/03/23  22:07:05  jaffe
# 	Cleanup README to note that EPI_AGGRNAME_2 is from server2
# 	[1993/03/23  21:18:43  jaffe]
# 
# Revision 1.1.2.6  1993/03/09  21:16:18  jaffe
# 	Transarc delta: cfe-ot7263-fts-tests-again 1.3
# 	  Selected comments:
# 	    closing to upgrade
# 	    Fix up some of the fts tests.
# 	    (a) Allow VERB_ARG to be set without passing it inappropriately to commands
# 	    that don't use it (fts crmount/lsmount/delmount).
# 	    (b) Recover test17 from the dead!
# 	    (c) Use ``fts lsfldb'' rather than ``fts lsft'' to read the fldb entry and
# 	    extract a fileset ID.
# 	    Bring this document into line with reality a little better.
# 	    Fix the higher-numbered tests (18, 19, 20, 21).
# 	[1993/03/09  20:16:27  jaffe]
# 
# Revision 1.1.2.5  1993/01/13  20:26:01  shl
# 	Transarc delta: vijay-ot5614-fts-add-new-tests-to-suite 1.10
# 	  Selected comments:
# 
# 	    This delta captures all the new tests added to the fts test suite. The new
# 	    tests are added from the checklist.
# 	    A small change here.
# 	    Adding a new test for fts move, and some changes to test19
# 	    Fixed some problems in test17, mostly minor. Now that the test and src
# 	    deltas are in one place, I have to switch a lot more.
# 	    Some more changes to get test20 to pass. It still doesn't because of some
# 	    move problems, but have to close this delta to move on. Some more iterations
# 	    necessary to get test18 to work.
# 	    Get test18 and test20 to work. Test20 works fine, but there are a few more
# 	    problems with test18.
# 	    Yet another iteration in getting these tests to work. This version passes on
# 	    rios in one and two machine cases.
# 	    There are some problems with the management of the in-core fileset inconsistent
# 	    bit that affect test19. Jeff has since fixed these problems. This test now
# 	    calls lsheader after each restore to refresh the in-core inconsistent bit.
# 	    This will not be required later on when Jeff's delta is included.
# 	    Jeff Prem has test17 exported already. This revision moves my four tests from
# 	    18 through 21. The Makefile is changed appropriately. Take care when merging
# 	    this delta with Jeff's.
# 	    Forgot to modify the runtests driver to run the new tests.
# 	[1993/01/13  13:18:40  shl]
# 
# Revision 1.1.2.4  1993/01/11  18:28:08  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:03:58  htf]
# 
# Revision 1.1.2.3  1992/11/18  21:16:24  jaffe
# 	Transarc delta: vijay-ot5342-reorganize-debug-fts-test-suite 1.9
# 	  Selected comments:
# 
# 	    Add some flexibility to the way fts scripts expect the local aggregate
# 	    configuration to be. Now, the scripts run if 1 or 2 aggregates are exported
# 	    in the LFS case, and 0 or 1 aggregate is exported by the second machine.
# 	    Failure case would be when no aggregates are exported. This is handled
# 	    gracefully. Also, enabled move and quota tests. The rename test in test12
# 	    is disabled because it was identified to be the source of the quota problem.
# 	    This continues to be investigated. A short feature to run a subset of the
# 	    fts tests is added.
# 	    more info on configuration and setup.
# 	[1992/11/18  14:36:42  jaffe]
# 
# Revision 1.1.2.2  1992/10/28  17:29:14  jaffe
# 	New file
# 	[1992/10/27  19:21:04  jaffe]
# 
# $EndLog$

			      FTS TESTS
			      ---------

The "runall" script in this directory is a wrapper for a higher
level script. This particular runall script cannot be run in
isolation from its parent script. This script executes the
"fts long" tests in lfs on behalf of its parent script.

Version 1.0
-----------

This file gives some details about the fts tests and explains how to run them.
The fts tests driver is the file called runtests. It is a script that takes
a few options on the command line and acts accordingly. It runs tests 1 through
16 which test various fts commands. The runtests script has simple help
facilities for the command line options. Typing runtests -help we get,

$ runtests -help
Usage: runtests [-nt <iter>] [-np <procs>] [-server1 <host>]
[-server2 <host>] [{-ufs | -lfs}] [-short] [-help]

nt is the number of iterations running tests 1 - 16. np is the number of 
processes running the fts tests (1 through 16) simultaneously, server1 is
the name of the first server machine (eg. paradox), server2 is the name of
the second server machine, -ufs specfies testing fts commands on exported 
non-LFS filesets, and -lfs specifies testing fts commands on exported LFS 
filesets. Using the -short option runs tests 4, 5, 6, 10, 12 and 14. This 
should test most of the fts commands and would complete sooner than the 
complete test.

One way to run these tests would be 
$ sh fts/runtests -lfs -short >&! /tmp/run.out &

The runtests script may not have the exec bit set, hence the "sh ". The
runtests script creates the fts.runtests.log output file, and the run.out
file is essentially identical to the fts.runtests.log output file. Once the
run is complete a "grep PASSED fts.runtests.log" could be used to find out
which tests passed and which failed. The log file would have complete details
of which particular command in the test failed. 

Configuration for fts testing:

1. Single machine UFS: export a UFS partition, say /tmp and create a FLDB
   entry for it. Now, set the environment variables UFS_ROOT_2 to /tmp and
   UFS_FSNAME_2 to the fileset name in the FLDB. Run the runtests script 
   with the -ufs switch.

2. Single machine LFS: export at least a single LFS aggregate. For cross
   aggregate testing, export another LFS aggregate. If the aggregate names
   are not the default "epi1" and "epi2" set the environment variables
   EPI_AGGRNAME_1 and EPI_AGGRNAME_2 to the correct aggregate names from the
   dfstab file. When only one aggregate is exported, cross aggregate move
   and restore operations are not tested. Run the runtests script with -lfs.

3. Two machine UFS: On the machine running the runtests script, set the
   enviornment variables UFS_ROOT_2 and UFS_FSNAME_2 to point to the UFS
   aggregate exported by the second machine. On the second machine export
   a UFS aggregate. Run the runtests script with -server2 and -ufs switches.

4. Two machine LFS: Export at least one aggregate on the machine running the
   runtests script. It is not necessary to export another aggregate on this
   machine (no cross aggregate testing here), or export a LFS aggregate on the
   second machine (no cross machine testing here). For cross aggregate and
   cross machine testing, export two aggregates on machine 2.
   Run runtests with -server2 and -lfs switches.  EPI_AGGRNAME_1 should be 
   an EMPTY aggregate on SERVER_1, or else test18 will fail.

NOTE: For all of test18 to run, you must also check for these conditions:
      - /opt/dcelocal/bin/epiunmount must be installed (dce_config doesn't do it)
      - the runtests script MUST be run on SERVER_1
      - EPI_AGGRNAME_1 must be an *empty* aggregate on SERVER_1

      Otherwise, some or all of test18 will be skipped.

As can be seen, the fts tests support testing in a distributed fashion using
two server machines. Both these machines would run DFS file servers along with
the DFS fileset server. For testing fts commands on LFS, the machine 
corresponding to server1 should export at least one LFS aggregate. Two 
aggregates are recommended. The machine corresponding to server2 should export 
one LFS aggregate, but this is optional. If server1 and server2 are the same 
machine, one aggregate is required, and the second one is optional but 
recommended. By default (when -server1 and -server2 are not specified on 
command line), server1 and server2 are set to the machine running the fts 
tests. By default, when testing fts on LFS, the aggregate names chosen are 
epi1 and epi2 on the first machine and epi1 on the second. When
running fts tests on exported UFS filesets, server1 and server2 should export 
/tmp. server2 should have a fileset entry called tmp.ufs for the /tmp 
aggregate. All these can be overridden by setting appropriate shell environment
variables. Here are some of the relevant environment variables, and their 
default values. To override the default set the environment variable before 
running runtests.

 Variable Name		Default Value
 -------------         -------------
 UFS_ROOT_1		/usr		; non-LFS aggregate exp. by SERVER_1
 UFS_ROOT_2		/tmp		; non-LFS aggregate exp. by SERVER_2
 UFS_FSNAME_2		ufs2		; fldb entry for UFS_ROOT_2, create it
 UFS_MP_NAME_2		tmp.ufs.$$	; mount point, created by the tests
 EPI_AGGRNAME_1		epi1		; LFS aggregate exp. by SERVER_1
 EPI_AGGRNAME_2		epi2		; LFS aggregate exp. by SERVER_2
 EPI_AGGRNAME_3		epi1		; LFS aggregate exp. by SERVER_2
 SERVER_1		`hostname`	; host on which test running
 SERVER_2		`hostname`	; host on which test running
 FTS_LOG_HOME		pwd		; fts.runtests.log resides here
 FTS_VERBOSE		OFF		; scripts run without the -verbose flag
 FTS_TESTS		All fts tests   ; selection of tests to run

The runtests driver can be invoked from any directory. That is, PWD need not be
within DFS and you don't have to copy the tests into DFS space. Typically, the
test scripts are stored somewhere in the test hierarchy, and you could
invoke runtests directly from here. A log is maintained in PWD (the directory
from which the tests were invoked). This can be overridden by setting the
environment variable FTS_LOG_HOME to a particular directory (eg. /tmp). The
log file is created in the directory indicated by FTS_LOG_HOME. The default
is the current working directory from which the runtests driver was invoked.
The log contains details about the PASS/FAIL status of each test(1 through 16).
There would also be messages about which test failed indicating by an error
number (eg. E87). Looking for this error code in the test script would
show which particular fts command failed. Alternatively the FTS_VERBOSE
environment variable can be set to "ON", and this causes the shell script to 
execute in verbose mode dumping each script line into the log file. Setting
FTS_TESTS to a sequence of numbers from 1 through 16 selects which set of 
tests (test1 - test16) needs to be run.

The tests can be run with server1 and server2 being either RS/6000 (AIX) or 
DS 3100/2100 (OSF/1). A 2 machine cell with both being DFS servers can be
setup to run the distributed test where -server1 and -server2 should be set
appropriately. The runtests driver should be invoked on any one machine
specifying -server1 and -server2. Most of the tests are run on server1, and
server2 is only used to test inter-machine fileset moves and restores. 

The tests are designed to cleanup all test resources before exit, but some of
the allocated resources may be left over on abnormal exit. These can be
cleaned using the scripts provided with the fts test suite. They are 
util/aggr.clean, util/sentry.clean and util/fldb.clean. aggr.clean takes a
server name and aggregate name (eg. aggr.clean paradox epi1) and removes
all filesets in the aggregate except root.dfs. sentry.clean removes all
server entries including the ones needed to run the tests. You may have to 
put back the server entries for the machines configured in your cell before
continuing. fldb.clean removes all fileset entries in the FLDB except root.dfs.
If you had defined any filesets or server entries of your own, these may also
get removed by executing these scripts, so exercise caution while using these.

Another thing to remember is, when these tests are run, particularly on a PMAX,
they make take quite a while to complete. Since fts commands get authenticated
with the user's credentials, your credentials should not expire before the
tests complete. So it is advisable to keep your tickets valid for at least
12 hours.

This is the test checklist for full aggregate testing.  It is biased towards 
LFS aggregates.


BASIC:
  - Fill an aggregate to 97% full and validate that the fts lsquota 
    prints a warning message.
  - Fill a aggregate to one allocation unit shy of full.
  - Fill a aggregate to exactly its quota. 
  - Create a zero length file in a fileset that resides within an
    aggregate that is full to its quota.  This must be done in
    a directory that has space available, i.e. is not a multiple of the
    allocation unit.
  - In a aggregate with one allocation unit left open a file (in a fileset
    that is not at quota), and write some data (less than the allocation 
    unit size).  While that file is open, try to open a second file and write
    data to it.  This should fail.  While the second file is open write some
    additional data into the first file (still less than the allocation
    unit).  This should succeed.
  - Start a process that will eventually cause a aggregate to be full.  When
    it becomes full, and while this process is still attempting to add
    data to the aggregate, increase the size of the aggregate. (Would be nice
    if this could be set up under the following conditions. Process just
    issues writes to a file.  Eventually write fails due to lack of space.
    Increase quota, and then re-issue write.)
  - Start a process that writes data into the aggregate until it is full.
    When the aggregate becomes full, remove an existing file, and verify that
    the first process can continue to write data.
  - In an aggregate that is 95% full, move a fileset to it that will use
    up the other 5%, and cause the aggregate to be at its quota.
  - In an aggregate that is 95% full, create a fileset with a quota that
    is larger than the space that remains in the aggregate.  Verify that 
    you can only add data to the fileset up to the aggregate  full
    condition, even though the fileset is under quota.
  - Create a fileset on one aggregate.  Inside of it create a mount point 
    for a fileset that resides on another aggregate. Now fill the firsg
    fileset to capacity. Finally, create a file with data in the 
    second fileset, that resides on a separate aggregate.
  - Create a fileset in an aggregate (that has other filesets) so that upon
    filing this fileset to quota, the aggregate wil also be at quota.
    Verify that both operations on the fileset (creating new files or
    expanding existing ones) and operations on the aggregate (creating new
    filesets) fails with an appropriate error message.


ERROR:
  - Fill a aggregate to its quota then try to write a 1 byte file into the 
    aggregate.
  - Fill a aggregate to within 1 allocation unit of its quota, then try to 
    write a file of one allocation unit plus 1 bytes.
  - Try to create a mount point for another aggregate inside of a full 
    aggregate. This must be done in a directory that has no additional space,
    i.e. is a multiple of the fragment size.
  - Create a zero length file in a full aggregate, in 
    a directory that has no space available, i.e. is a multiple of
    the fragment size.
  - Try to move a fileset into in aggregate, when that fileset would 
    cause the aggregate to be over quota.


STRESS:
  - With a aggregate at 95% full, run a number of concurrent processes that
    create, expand, shrink, and destroy files, but as a whole do not
    push the aggregate over the quota limit.  This should run for a number of
    hours without failing.

==============================================================================

NOTES:
	Tests to implement this checklist must be able to account for the
	following.

	- Does the file system allow for overdraw, i.e. the ability to
	  continue to write files past quota.  (My current thinking is 
	  that this can be handled transparently by the tests, i.e. if
	  the 'overdraw' flag is set then just adjust the definition of
	  what "full" means by the overdraw percentage.)
	- What is the allocation unit for the file system.
	  (This my need to be passed in, if cannot be determined from
	   existing commands.)

	(*) - is really a quota tests.



    LFS -

	Files must be greater than 256 bytes to use an entire fragment.
	Othersies they are stored in-line in the anode.

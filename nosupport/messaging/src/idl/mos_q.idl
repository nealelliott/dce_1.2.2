/* ______________________________________________________________________
 * Copyright (c) 1996 The Open Group, Inc., Cambridge, MA USA
 * All rights reserved.
 * ______________________________________________________________________
 *
 *	M O S _ Q . I D L
 *
 * Queuing operations.
 * ______________________________________________________________________
 *
 * $Log: mos_q.idl,v $
 * Revision 1.6  1996/11/26  17:16:35  bowe
 * Add "flags" param to mos_q_move_item().
 *
 * Revision 1.5  1996/11/14  20:48:49  bowe
 * Add mos_q_move_item() operation.
 *
 * Revision 1.4  1996/10/31  20:09:19  bowe
 * Add mask param to mos_q_get_id_list.  Add new operation,
 * mos_q_get_id_list_all().
 *
 * Revision 1.3  1996/09/19  14:55:54  bowe
 * Change param type to mos_que_delete_op_t in mos_q_delete_queue.
 *
# Revision 1.2  1996/09/16  20:56:22  bowe
# Rename *_attr_* to *_mattr_*. Added persistence and queue
# enable/disable attributes.
#
# Revision 1.1  1996/09/12  15:42:58  bowe
# Initial revision
#
 * $EndLog$
 * ______________________________________________________________________
 */

[
    uuid(995711fa-b275-11cf-a878-0800092474cc),
    pointer_default(ptr),
    version(1.0)
]

interface mos_q
{
    import "mos_base.idl";


    /* ---------- ops on messages ---------- */

    /* Enqueue an item */
    void mos_q_enqueue(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in]	mos_mattr_t	*attr,
	[in]	mos_datatype_bytearray_t
				*body,
	[in]	unsigned32	flags,
	[out]	uuid_t		*id,
	[out]	error_status_t	*st
    );

    /* Dequeue next item of a queue matching criteria */
    void mos_q_dequeue(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in,ptr]
		mos_mask_list_t	*masks,
	[in]	unsigned32	flags,
	[out]	mos_mattr_t	*attr,
	[out]	mos_datatype_bytearray_t
				*body,
	[out]	error_status_t	*st
    );

    /* Dequeue next item of a queue */
    void mos_q_dequeue_next(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[out]	mos_mattr_t	*attr,
	[out]	mos_datatype_bytearray_t
				*body,
	[out]	error_status_t	*st
    );

    /* Peek at next item of a queue matching criteria */
    void mos_q_peek(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in,ptr]
		mos_mask_list_t	*masks,
	[in]	unsigned32	flags,
	[out]	mos_mattr_t	*attr,
	[out]	mos_datatype_bytearray_t
				*body,
	[out]	error_status_t	*st
    );

    /* Purge/delete message with given ID */
    void mos_q_purge(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in]	uuid_t		*id,
	[out]	error_status_t	*st
    );

    /* Retrieve attributes of an item matching criteria */
    void mos_q_retrieve_mattr(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in,ptr]
		mos_mask_list_t	*masks,
	[in]	unsigned32	flags,
	[out]	mos_mattr_t	*attr,
	[out]	error_status_t	*st
    );

    /* Retrieve attributes of an item with given UUID */
    void mos_q_retrieve_mattr_by_id(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in]	uuid_t		*id,
	[out]	mos_mattr_t	*attr,
	[out]	error_status_t	*st
    );

    /* Get list of IDs of queue items. */
    void mos_q_get_id_list(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in,ptr]
		mos_mask_list_t	*masks,
	[out]	mos_uuid_list_t	*ids,
	[out]	error_status_t	*st
    );

    /* Get list of IDs of all queue items. */
    void mos_q_get_id_list_all(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[out]	mos_uuid_list_t	*ids,
	[out]	error_status_t	*st
    );

    /* ---------- ops on queues ---------- */

    /* Delete a queue and its contents (items) */
    void mos_q_delete_queue(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in]	mos_que_delete_op_t	flags,
	[out]	error_status_t	*st
    );

    /* Get attributs of a single queue */
    void mos_q_get_qattr_by_name(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[out]	mos_qattr_t	*attr,
	[out]	error_status_t	*st
    );
    void mos_q_get_qattr_by_id(
	[in]	handle_t	h,
	[in]	uuid_t		*id,
	[out]	mos_qattr_t	*attr,
	[out]	error_status_t	*st
    );

    /* Set attributs of a single queue */
    void mos_q_set_qattr_by_name(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[in]	mos_qattr_t	*attr,
	[out]	error_status_t	*st
    );
    void mos_q_set_qattr_by_id(
	[in]	handle_t	h,
	[in]	uuid_t		*id,
	[in]	mos_qattr_t	*attr,
	[out]	error_status_t	*st
    );

    /* See if queue exists.  Supports the API's "attach" call. */
    void mos_q_ping(
	[in]	handle_t	h,
	[in,string]
		char		*name,
	[out]	uuid_t		*id,
	[out]	error_status_t	*st
    );

    /* Move a single item from one queue to another. */
    void mos_q_move_item(
	[in]	handle_t	h,
	[in,string]
		char		*from_queue,
	[in,string]
		char		*to_queue,
	[in]	uuid_t		*id,
	[in]	unsigned32	flags,
	[out]	error_status_t	*st
    );

    /* ________________________________________________________ */
}


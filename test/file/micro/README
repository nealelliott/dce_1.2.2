# 
# Copyright (C) 1993  Transarc Corporation - All rights reserved 
#
#
# HISTORY
# $Log$
# $EndLog$
#
#
This directory contains performance tests which can be
used to measure specific cache manager performance parameters.
Tests can be run in any directory where the user has write permission,
but some tests require an alternate path to "." through the glue layer
to ensure that the cache reads are cold.  Tests should be run while
currently in a DFS directory.

Micro1: Storeback efficiency test.  This test writes out a large block of
	data causing the background daemons to cycle through storing parts
	of the file.
	Usage:  micro1 -h 	for help message.
		micro1 [fsize] 	fsize is the number of 64K chunks to write out.

Micro2: Dirty range store back on write/close.  This test writes a small
	amount of data in a large (64K) file.  It measures the time required 
	to write and close the file.  This tests measures the efficiency
	of writing only dirty ranges back to the server.
	Usage:  micro1 -h 	for help message.
		micro1 [nfiles] nfiles is the number of files to create.

Micro3: Cache cold read-in chunk handling.  This test does cold reads
	on very large files (16 chunks) to test the efficiency
	of data-cache chunk allocation/preparation.  It creates the files
	in advance through the glued native file system path and then
	reads them in through DFS.
	Usage:  micro1 -h 		for help message.
		micro1 path [nfiles] 	path- the native fs path to test dir.
					nfiles- the number of files to create.

Micro4: Open system call resource allocation test.  This test does
	open()'s of many small files to determine the overhead cost of 
	accessing files in DFS.
	Usage:  micro1 -h 	for help message.
		micro1 [nfiles] nfiles is the number of files to create.

Micro5: Store back RPC efficiency test.  This test causes all the background
	daemons to process store backs to a file server on behalf of many
	processes concurrently.  This exercises the RPC binding pool
	for efficient handling of requests going the same server for the
	same PAG.  The test works by fork()'ing several children which
	each open and write large (16 chunk) files to the same directory.
	Each child times its activities and stores the results in a
	separate file.  After all children exit, the parent process 
	accumulates the results and presents them.
	Usage:  micro1 -h 	for help message.
		micro1 [nfiles [nprocs]] 
				nfiles is the number of files to create.
				nprocs is the number of processes to run.

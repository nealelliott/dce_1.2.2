#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#

###############################################################################
#    Copyright (C) 1996, 1991 Transarc Corporation - All rights reserved      #
###############################################################################

# This script tests fileset cleanup of Episode filesets.  This script
# exercises the cleanup cases.

###############################################################################

# Usage:	mtestsub2

# Typically run via:    mtestsub2 >& mtestsub2.out

###############################################################################

# Test environment:
# This test requires full-blown DFS with exported Episode. DFS server $SERVER_1
# must export Episode aggregate $SERV1_AGGR1, and $SERVER_2 must export
# $SERV2_AGGR2. $SERVER_1 and $SERVER_2 can be the same machine.

# Privilege required:
# You must be in admin.fl, and in admin.ft on $SERVER_1 and $SERVER_2, in
# order to run the fts commands contained in this script. You must also be
# able to create mount points in $export_root.

# Highest error number is: 68.

###############################################################################

# VOL_RW	0x00001	/* R/W volume */
# VOL_READONLY	0x00002	/* ReadOnly Volume */
# VOL_BUSY	0x00004 /* Volume is Busy */
# VOL_OFFLINE	0x00008 /* Volume is offline */
# VOL_DELONSALVAGE	0x00010 /* Delete On Salvage */
# VOL_OUTOFSERVICE	0x00020 /* Out Of service */
# VOL_TYPEFIELD	0xf0000	/* what high-level type of volume this is */
# VOL_TYPE_RW	0x10000	/* read-write (ordinary) */
# VOL_TYPE_RO	0x20000
# VOL_TYPE_TEMP	0x40000	/* temporary use, for dumps and moves etc. */
# VOL_MOVE_TARGET	0x800000    /* this vol is a target for a move op */
# VOL_MOVE_SOURCE	0x1000000   /* this vol is a source for a move op */
# VOL_ZAPME	0x2000000   /* delete volume with extreme prejudice */
# VOL_CLONEINPROG 0x4000000   /* this vol is partially cloned */
# VOL_OPENDONE	0x10000000   /* back from VOL_OPEN procedure */

###############################################################################

d=`pwd`
p=`basename $0`
dn=`dirname $0`
rc=0
ty=mov

# Load the test context.
. $dn/statusCheck

# Sets testuser and testuid
getUserId
echo "TESTER is $testuser, TESTER ID is $testuid"

ft_1=Dogbreath.$$

dir_1=$test_root/Plague.$$

SHORT_SERVER_1=`echo $SERVER_1 | sed -e 's;/.*/\([^/]*\);\1;'`
SHORT_SERVER_2=`echo $SERVER_2 | sed -e 's;/.*/\([^/]*\);\1;'`
# Allow these defaults to be overridden to allow quicker test execution if
# a modified kernel is available.
: ${TOKEN_TIMEOUT=16200}
: ${TOKEN_TIMEOUT_STRING="4.5 hours"}

export ft_1 dir_1 SHORT_SERVER_1 SHORT_SERVER_2 TOKEN_TIMEOUT \
       TOKEN_TIMEOUT_STRING

###############################################################################

echo ""
echo "$ty/$p starting as PID $$ at `date` on $hn"
echo "   in cell $CELL_NAME."
echo "Using aggregates $SERV1_AGGR1 on $SERVER_1 and $SERV2_AGGR2 on $SERVER_2."

echo ""
echo "Will attempt moves between $SERVER_1 and $SERVER_2"
if test "$SERVER_1" = "$SERVER_2"
    then
	echo 'These are the same server!  ABORTING'
	exit 2
fi

if test "$CELL_NAME" = ""
   then echo "Can't find cellname in /opt/dcelocal/dce_cf.db - aborting."
	 exit 2
   fi

bombset=" "
for pel in $path /opt/dcelocal/bin /opt/dce*/bin . ; do
	if [ -x $pel/bomb ]
	then
		bombset="$pel/bomb set"
		echo "Using $pel/bomb as bomb-setter."
		break
	fi
done
if [ "$bombset" = " " ]
then
	echo "No bomb_set program to be found in any obvious place!  Aborting."
	exit 2
fi
export bombset

###############################################################################

# : ${CASES="10 17a 18a 18b 20a 17b 18c 20b"}
: ${CASES="10 17a 18a 18b"}
export CASES

echo ""; echo "Fileset moves"; echo "-------------"

########################################

echo ""; echo "Creating filesets with names starting with $ft_1 ...."
for ix in $CASES; do
    fts create $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $cav_arg; rf=$?
    if test $rf -ne 0
	then echo "- fts create failed (errno $rf) ($p: E$ix.61)"; rc=`expr $rc + 1`
	     echo "BAILING OUT of this part"; continue
	fi

    ftid=`fts lsfldb $ft_1.$ix $cav_arg | sed -n '/readWrite/s/.*readWrite.*ID \([^ ,]*\),,\([^ ]*\) .*/\1,,\2/p'`
    fthi=`echo $ftid | sed -n 's/\([^,]*\),,\([^,]*\)/\1/p'`
    ftlo=`echo $ftid | sed -n 's/\([^,]*\),,\([^,]*\)/\2/p'`
    if test "$fthi" -eq 0 -a "$ftlo" -eq 0
	then echo "- fileset ID is unreasonable ($ftid, $fthi, $ftlo) ($p: E$ix.62)"
	     rc=`expr $rc + 1`
	     echo "BAILING OUT of this part"; continue
	fi
    eval ftid_$ix=$ftid

    echo "Creating mount point at $dir_1.$ix for $ft_1.$ix ..."
    fts crmount $dir_1.$ix $ft_1.$ix $CELL_ARG; rf=$?
    if test $rf -ne 0
	then echo "- fts crmount failed (errno $rf) ($p: E$ix.63)"; rc=`expr $rc + 1`
	     echo "BAILING OUT of this part"; continue
	fi

    setFsetRootProt $dir_1.$ix $testuid "E$ix.64"
    rf=$?
    if test $rf -ne 0
    then
	     echo "BAILING OUT of this part"; continue
    fi        

done

########################################

echo ""; echo "Putting stuff in the new filesets..."
for ix in $CASES; do
    cd /tmp; cd $dir_1.$ix; rf=$?
    if test `pwd` != $dir_1.$ix -o $rf -ne 0
	then echo "- cd $dir_1.$ix failed (errno $rf, wd `pwd`) ($p: E$ix.64)"
	     echo "BAILING OUT of this part"; continue
	fi

    cat > f0 << ==END==

    We hold these truths to be self-evident, that all men are created equal,
    that they are endowed by their creator with certain unalienable rights,
    that among these are life, liberty, and the pursuit of happiness. That
    to secure these rights, governments are instituted among men, deriving
    their just powers from the consent of the goverened.

    That whenever any form of government becomes destructive of these ends,
    it is the right of the people to alter or abolish it, and to institute
    new government, laying its foundations on such principles and organizing
    its powers in such form, as to them shall seem most likely to effect
    their safety and happiness.

==END==
    echo "fset $ix here; Elvis has just left the building" > f1.$ix
    echo "She wants to sell my back monkey" > f2.$ix
    echo "Buy Sam a drink and get his fish one too" > f3.$ix
    echo "This is $dir_1/file_1.$ix." > file_1.$ix
    cat file_1.$ix file_1.$ix file_1.$ix file_1.$ix | sed 's/file_1/file_4.$ix/' > file_4.$ix
    cat file_4.$ix file_4.$ix file_4.$ix file_4.$ix | sed 's/file_4/file_16/' > file_16.$ix
    mkdir d1 d2...$ix d3
    cp f* d1
    cp file_4.$ix d2...$ix
    cp file_16.$ix d3
    fts lsmount $dir_1.$ix
    cm whereis .
done

cd /tmp

########################################

export SERVER_1 SERVER_2 SERV1_AGGR1 SERV2_AGGR2 cav_arg CELL_ARG

echo "Starting to fork move cases at `date`"
for ix in $CASES; do

########################################

# set up a sub-shell.
outfile=/tmp/$ty.$p.$$.$ix; rm -rf $outfile
resfile=/tmp/$ty.$p.$$.RES.$ix; rm -rf $resfile
export outfile resfile

(echo ""; echo "Case ${ix}:") > $outfile
echo 0 > $resfile
(
msg=""
case $ix in
	10) msg="Abort after first creating the target.";;
	17a) msg="Target recovery after TARGET set and exposed.";;
	17b) msg="Target recovery after TARGET and OUTOFSERVICE set.";;
	18a) msg="Source recovery after SOURCE set and exposed.";;
	18b) msg="Source recovery after SOURCE and OFFLINE set.";;
	18c) msg="Source recovery after SOURCE and OUTOFSERVICE set.";;
	20a) msg="Source recovery after SOURCE, OFFLINE, and OUTOFSERVICE set.";;
	20b) msg="Source recovery after SOURCE, OFFLINE, and OUTOFSERVICE timeout.";;
esac
if [ "$msg" = "" ]
    then
	msg="State $ix"
    fi
echo $msg

# Do the possibly-sabotaged move operation.

case $ix in
11)
# Abort after first creating the target.  First make the target and leave it busy, then time out busy.
$bombset 'copyclone#5:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.5)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

17a)
# Recovery from TARGET timeout.  Get there via state 21.
$bombset 'movevolume#48a:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.18)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

17b)
# Recovery from TARGET and OUTOFSERVICE timeout.  Get there via state 21 and 17a
$bombset 'movevolume#48a:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.19)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

18a)
# Recovery after SOURCE exposed.
$bombset 'movevolume#30:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.20)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

18b)
# SOURCE timeout after being exposed.
$bombset 'movevolume#30:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.21)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

18c)
# Timeout SOURCE+OUTOFSERVICE.
$bombset 'movevolume#30:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.22)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

20a)
# Timeout of SOURCE+OFFLINE.
$bombset 'movevolume#48a:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.23)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

20b)
# Timeout of SOURCE+OFFLINE+OUTOFSERVICE.
$bombset 'movevolume#48a:exit=1:count=1+0' -command fts move $ft_1.$ix $SERVER_1 $SERV1_AGGR1 $SERVER_2 $SERV2_AGGR2 $cav_arg; rf=$?
if test $rf -ne 1
   then echo "- bombed fts move failed--not 1 (errno $rf) ($p: E$ix.24)"; rc=`expr $rc + 1`
	echo 1 > $resfile
	echo "BAILING OUT of this part"; continue
   fi
;;

esac
echo "Case $ix is ready."

# Now end the sub-shell
) >> /tmp/$ty.$p.$$.$ix 2>&1 &

echo "Forked sub-shell for case $ix at `date`"

# Advance to the next case (setup phase)
done

echo "Finished forking move cases at `date`"

# Now wait until all the shells are done.
wait

echo "Move cases finished at `date`"

for ix in $CASES; do
    outfile=/tmp/$ty.$p.$$.$ix
    resfile=/tmp/$ty.$p.$$.RES.$ix
    res=`cat $resfile`; rm $resfile
    rc=`expr $rc + $res`
    cat $outfile; rm $outfile
done

# Complete the per-case setup for these exceptional cases.
# Compute an initial sleep.
maxsleeptime=0
for ix in $CASES; do
# Now for cases that care, sleep until BUSY is off everywhere, and look again.
thissleeptime=0
case $ix in
17a | 17b)
echo "Sleeping 11 minutes to wait for VOL_MOVE_TARGET to time out in case $ix."
	thissleeptime=660;;
10 | 18a)
echo "Sleeping 10 minutes to wait for VOL_BUSY to time out in case $ix."
	thissleeptime=600;;
18b | 18c)
echo "Sleeping 15 minutes to wait for VOL_BUSY and VOL_MOVE_SOURCE to time out in case $ix."
	thissleeptime=900;;
20a | 20b)
echo "Sleeping 5 minutes to wait for SOURCE+OFFLINE to time out in case $ix."
	thissleeptime=300;;
esac
if [ $thissleeptime -gt $maxsleeptime ]
    then
	maxsleeptime=$thissleeptime
    fi
done
if [ $maxsleeptime -ne 0 ]
    then
	date; sleep $maxsleeptime; date
    fi
# Now force the moveTimeout updating, if necessary
for ix in $CASES; do
case $ix in
18b | 18c | 20a | 20b)
	# HACK to get the vol_DoMoveTimeout() code to be executed on the source
	fts lshead $SERVER_1 $SERV1_AGGR1 $cav_arg > /tmp/junk.$$; rf=$?
	if test $rf -ne 0
	   then echo "- cannot lshead on source (errno $rf) ($p: E$ix.65)"; rc=`expr $rc + 1`
	   fi
	break;
;;
esac
done
for ix in $CASES; do
case $ix in
17a | 17b)
	# HACK to get the vol_DoMoveTimeout() code to be executed on the target
	fts lshead $SERVER_2 $SERV2_AGGR2 $cav_arg > /tmp/junk.$$; rf=$?
	if test $rf -ne 0
	   then echo "- cannot lshead on target (errno $rf) ($p: E$ix.66)"; rc=`expr $rc + 1`
	   fi
	break;
;;
esac
done
rm -f /tmp/junk.$$
# Another sleep interval, optionally.
maxsleeptime=0
for ix in $CASES; do
# Now for cases that care, sleep until BUSY is off everywhere, and look again.
thissleeptime=0
case $ix in
17b)
echo "Now sleeping $TOKEN_TIMEOUT_STRING + 35 minutes to wait for TARGET and OUTOFSERVICE to be cleared in case $ix."
	thissleeptime=`expr $TOKEN_TIMEOUT + 2100`;;
18c | 20b)
echo "Now sleeping $TOKEN_TIMEOUT_STRING + 35 minutes to wait for SOURCE and OUTOFSERVICE to be cleared in case $ix."
	thissleeptime=`expr $TOKEN_TIMEOUT + 2100`;;
esac
if [ $thissleeptime -gt $maxsleeptime ]
    then
	maxsleeptime=$thissleeptime
    fi
done
if [ $maxsleeptime -ne 0 ]
    then
	date; sleep $maxsleeptime; date
	# Again, force the moveTimeout updating, if necessary
	for ix in $CASES; do
	case $ix in
	18c | 20b)
		# HACK to get the vol_DoMoveTimeout() code to be executed on the source
		fts lshead $SERVER_1 $SERV1_AGGR1 $cav_arg > /tmp/junk.$$; rf=$?
		if test $rf -ne 0
		   then echo "- cannot lshead on source (errno $rf) ($p: E$ix.67)"; rc=`expr $rc + 1`
		   fi
		break;
	;;
	esac
	done
	for ix in $CASES; do
	case $ix in
	17b)
		# HACK to get the vol_DoMoveTimeout() code to be executed on the target
		fts lshead $SERVER_2 $SERV2_AGGR2 $cav_arg > /tmp/junk.$$; rf=$?
		if test $rf -ne 0
		   then echo "- cannot lshead on target (errno $rf) ($p: E$ix.68)"; rc=`expr $rc + 1`
		   fi
		break;
	;;
	esac
	done
	rm -f /tmp/junk.$$
    fi

########################################

# Read the presence/absence on the disks
fts lshead $SERVER_1 $SERV1_AGGR1 -long -verbose $cav_arg > /tmp/src-list.$$; rf=$?
if test $rf -ne 0
   then echo "- source fts lshead failed (errno $rf) ($p: E$ix.25)"; rc=`expr $rc + 1`
   fi
fts lshead $SERVER_2 $SERV2_AGGR2 -long -verbose $cav_arg > /tmp/dst-list.$$; rf=$?
if test $rf -ne 0
   then echo "- source fts lshead failed (errno $rf) ($p: E$ix.26)"; rc=`expr $rc + 1`
   fi


for ix in $CASES; do

########################################

echo ""; echo "Analysis for case ${ix}:"

# ----- INITIAL SOURCE STATUS CHECK -----
# ----- INITIAL SOURCE STATUS CHECK -----
# ----- INITIAL SOURCE STATUS CHECK -----
case $ix in
10 | 18a | 18b | 18c | 20a | 20b)
# Source should contain fileset, not busy.
grep -s "$ft_1.$ix " /tmp/src-list.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix not present on source (status $rf) ($p: E$ix.32)"; rc=`expr $rc + 1`
    fi
# Now, get the source's states field.
srcstatus=`grep "$ft_1.$ix " /tmp/src-list.$$ | awk '{if ($5=="states") print $6}'`
if test "$srcstatus" = ""
    then echo "- source status unreadable (status $rf) ($p: E$ix.52)"; rc=`expr $rc + 1`
    fi
	case $ix in
	# Case 18a is the same as 18b since by the time VOL_BUSY has timed out,
	# VOL_MOVE_SOURCE will have also timed out.
	18a)	goodsstatus="0x11010025";;
	18b)	goodsstatus="0x11010025";;
	10 | 18c)	goodsstatus="0x10010005";;
	20a)	goodsstatus="0x1101002d";;
	20b)	goodsstatus="0x1201002d";;
	esac
if [ "$srcstatus" != "$goodsstatus" ]
    then echo "- source status wrong (status $srcstatus, not $goodsstatus) ($p: E$ix.53)"; rc=`expr $rc + 1`
    fi
;;

# There is currently no way for the kernel to delete the useless source
# volume; instead, it sets VOL_ZAPME to give the administrator a clue.
#20b)
## Source should not contain the fileset.
#grep -s "$ft_1.$ix " /tmp/src-list.$$; rf=$?
#if test $rf -ne 1
#    then echo "- $ft_1.$ix is present on source (status $rf) ($p: E$ix.36)"; rc=`expr $rc + 1`
#    fi
#;;
esac

# ----- INITIAL TARGET STATUS CHECK -----
# ----- INITIAL TARGET STATUS CHECK -----
# ----- INITIAL TARGET STATUS CHECK -----
# When the target isn't busy, check that the fileset is NOT there.
case $ix in
10 | 17a | 17b)
# When the target isn't busy, check that the fileset is there.
grep -s "$ft_1.$ix " /tmp/dst-list.$$; rf=$?
if test $rf -ne 0
    then echo "- $ft_1.$ix not on target (status $rf) ($p: E$ix.41)"; rc=`expr $rc + 1`
    fi
tgtstatus=`grep "$ft_1.$ix " /tmp/dst-list.$$ | awk '{if ($5=="states") print $6}'`
if test "$tgtstatus" = ""
    then echo "- target status unreadable (status $rf) ($p: E$ix.59)"; rc=`expr $rc + 1`
    fi
	case $ix in
	10)	goodtstatus="0x10010015";;
	17a)	goodtstatus="0x10810025";;
	17b)	goodtstatus="0x10010005";;
	esac
if [ "$tgtstatus" != "$goodtstatus" ]
    then echo "- target status wrong (status $tgtstatus, not $goodtstatus) ($p: E$ix.60)"; rc=`expr $rc + 1`
    fi
;;
esac

# Clean up from one run

rm -f /tmp/src-list.$ix.$$ /tmp/src-list2.$ix.$$
rm -f /tmp/dst-list.$ix.$$ /tmp/dst-list2.$ix.$$
rm -f /tmp/fl-list.$ix.$$ /tmp/fl-list1.$ix.$$ /tmp/fl-list2.$ix.$$
rm -f /tmp/cm-list.$ix.$$

########################################

# Advance to the next case

done

# Clean up from all runs
rm -f /tmp/src-list.$$ /tmp/dst-list.$$

########################################

echo ""; echo "Done with move tests"

echo ""; echo "Cleaning up filesets with names starting with $ft_1 ...."
cd /tmp
for ix in $CASES; do
    fts delmount $dir_1.$ix $CELL_ARG
    fts unlock $ft_1.$ix $cav_arg
    fts delfldb $ft_1.$ix
    ctrname=`echo "\$ ftid_$ix" | tr -d ' '`
    fts zap `eval echo $ctrname` $SERVER_1 $SERV1_AGGR1 $cav_arg
    fts zap `eval echo $ctrname` $SERVER_2 $SERV2_AGGR2 $cav_arg
    cctrname=`echo "\$ ftid_clone_$ix" | tr -d ' '`
    if [ "`eval echo $cctrname`" != "" ]
	then fts zap `eval echo $cctrname` $SERVER_1 $SERV1_AGGR1 $cav_arg
    fi
done

###############################################################################

echo ""; echo "All done with cases ${CASES} at `date`."; echo ""
if test $rc -eq 0
   then echo "$p PASSED"
   else echo "$p FAILED ($rc errors)"
   fi
exit $rc

###############################################################################

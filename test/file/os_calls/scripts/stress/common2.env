*
* ID: $Id: 
*
* ORIGINS: Transarc Corp.
*
* (C) COPYRIGHT Transarc Corp. 1992
* All Rights Reserved
* Licensed Materials - Property of Transarc
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
*

*
* @OSF_COPYRIGHT
*
* HISTORY
* $Log$
* $EndLog$
*

* This script is used for setting up commonly used procedures, and constants
*  and can be called by any of the scripts (not those common scripts).

* Include common1.scr to set up common vars.
include common1.env

echo 
set thisScript common2.env
echo Run include file $thisScript
echo 

************************************************************************
*
* Define a procedure that could create a variable length of vector with 
* kind of pattern.
*

set getVector proc 3 pattern vector repeatTime int  outVector OUT  ENDP
set outVector vector @pattern
if ( @repeatTime != 0 && @repeatTime != 1 ) {
   do 
    set repeatTime (@repeatTime - 1 )
    set outVector vector (@outVector + @pattern)
  while ( @repeatTime != 1 )
}
ENDP

************************************************************************
*
* Define a procedure that could create a variable length of vector 
* in numerical order.
*

set getNumVector proc 3 lower vector upper vector  outNumVec OUT  ENDP
set count int @lower
set endCount int @upper
set outNumVec vector @lower
if ( @lower != @upper ) {
  do 
    set count (@count + 1 )
    set outNumVec vector (@outNumVec + @count)
  while ( @count < @endCount )
}
ENDP

*
* set string constants.
*

* Set a non zero buffer with 256 in length
set STRING256B string ("1234567890" * 25 )
set STRING256B string ($STRING256B+"123456")

set STRING128HB string ("1234567890" * 12 )
set STRING128HB string ($STRING128HB+"12345678")

set STRING128LB string ("9012345678" * 12 )
set STRING128LB string ($STRING128LB+"90123456")


*
* set vector constants.
*

* Set a non zero buffer with 256 in length
set VECTOR256B vector 0
exec getVector "0x01020304050607080900" 25 VECTOR256B 
set VECTOR256B ($VECTOR256B+"0x010203040506")

* Set a zero buffer with 256 in length
set NULL256B vector 0
exec getVector "0x00000000000000000000" 25 NULL256B
set NULL256B ($NULL256B+"0x000000000000")

* set non zero 128 byte string.
set NULL128B vector 0
exec getVector "0x00000000000000000000" 12 NULL128B
set NULL128B ($NULL128B+"0x0000000000000000")

* set non zero 128 byte string.
set VECTOR128B vector 0
exec getVector "0x01020304050607080900" 12 VECTOR128B
set VECTOR128B ($VECTOR128B+"0x0102030405060708")

* Set a half zero and half nonzero buffer with 256 in length
set HALFNULL256B ($NULL128B + $VECTOR128B)

* Set a half nonzero and half zero buffer with 256 in length
set NULLHALF256B ($VECTOR128B + $NULL128B)

*
* set numbered vector constants.
*
* Set a non zero buffer with the number (0-63) 256 in length
set NUMVEC256B vector 0
exec getNumVector 0 63 NUMVEC256B

* Set a non zero buffer with the number (0-255) 1024b in length
set NUMVEC1K vector 0
exec getNumVector 0 255 NUMVEC1K

* The following code is used to save time to create constant data (big ones).

* Create vector number 64k file.
verifyStatus false
access $file64k $accessFlagE
if ( $ITL_Status != 0 ) {
  echo Create an ordered vector of length 64k.
  set NUMVEC64K vector 0
  exec getNumVector 0 16383 NUMVEC64K
  open $file64k ($O_CREAT|$O_RDWR) 0777 f64
  write $f64 $NUMVEC64K
  close $f64
}
else {
  set NUMVEC64K vector 0
  open $file64k $O_RDONLY 0 f64
  read $f64 $CONST64K NUMVEC64K
  close $f64
}

* Create vector 64k file
access $vector64k $accessFlagE
if ( $ITL_Status != 0 ) {
  echo Create a vector data file.
  set baseSize 256
  set VECTOR64K vector $VECTOR256B
  do
    set VECTOR64K vector ($VECTOR64K + $VECTOR64K)
    set baseSize ( $baseSize + $baseSize )
  while ( $baseSize < $CONST64K )
  open $vector64k ($O_CREAT|$O_RDWR) 0777 f64
  write $f64 $VECTOR64K
  close $f64
}
else {
  set STRING64K string ""
  open $vector64k $O_RDONLY 0 f64
  read $f64 $CONST64K VECTOR64K
  close $f64
}

* Create 64k string data file
access $string64k $accessFlagE
if ( $ITL_Status != 0 ) {
  echo Create a string data file.
  set STRING64K string ($STRING256B * 256 )
  open $string64k ($O_CREAT|$O_RDWR) 0777 f64
  write $f64 $STRING64K
  close $f64
}
else {
  set STRING64K string ""
  open $string64k $O_RDONLY 0 f64
  read $f64 $CONST64K STRING64K
  close $f64
}
verifyStatus true

************************************************************************
*
* Define the procedure to create a file with fixed length of one mega 
* string file (one-mega 10240 bytes).
*
*
set createOneMegaString_Proc proc 1 arg1 string ENDP
verifyStatus false
access @arg1 $accessFlagE
if ( @ITL_Status != 0 ) {
  open @arg1 (@O_CREAT|@O_RDWR) 0777 binaryId
  loop x 1 1 15
    write @binaryId @STRING64K 
  endloop
  loop x 1 1 160
    write @binaryId @STRING256B
  endloop
  close @binaryId
  set commd ("cm flush -path "+@arg1)
  shellExec commd
}
verifyStatus true
ENDP

************************************************************************
*
* Define the procedure to create a file with fixed length of one mega 
* binary file (one-mega 10240 bytes).
*
*
set createOneMegaBinary_Proc proc 1 arg1 string ENDP
verifyStatus false
access @arg1 $accessFlagE
if ( @ITL_Status != 0 ) {
  open @arg1 (@O_CREAT|@O_RDWR) 0777 binaryId
  loop x 1 1 15
    write @binaryId @NUMVEC64K 
  endloop
  loop x 1 1 160
    write @binaryId @NUMVEC256B
  endloop
  close @binaryId
  set commd ("cm flush -path "+@arg1)
  shellExec commd
}
verifyStatus true
ENDP

* Prepare the one mega file.
exec createOneMegaBinary_Proc "onemegabin"

* Prepare the one mega file.
exec createOneMegaString_Proc "onemegastring"

echo
echo common2.env done
echo

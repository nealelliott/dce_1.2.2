*
* @OSF_COPYRIGHT@
* COPYRIGHT NOTICE
* Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
* ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
* src directory for the full copyright text.
* 
*
* ID: $Id: test1.scr,v 1.1.423.1 1996/10/17 18:28:45 damon Exp $
*
* COMPONENT_NAME: Encina Development Infrastructure
*
* ORIGINS: Transarc Corp.
*
* (C) COPYRIGHT Transarc Corp. 1991
* All Rights Reserved
* Licensed Materials - Property of Transarc
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
*
*
* HISTORY
* $Log: test1.scr,v $
* Revision 1.1.423.1  1996/10/17  18:28:45  damon
* 	Submitting on behalf of Transarc
* 	[1996/10/17  16:54:27  damon]
*
* Revision 1.1.418.1  1994/02/04  20:46:28  devsrc
* 	Merged from 1.0.3a to 1.1
* 	[1994/02/04  15:25:02  devsrc]
* 
* Revision 1.1.416.1  1993/12/07  17:45:32  jaffe
* 	1.0.3a update from Transarc
* 	[1993/12/03  19:34:05  jaffe]
* 
* Revision 1.1.2.5  1993/01/11  18:32:19  htf
* 	Embedded copyright notice
* 	[1993/01/11  17:13:14  htf]
* 
* Revision 1.1.2.4  1992/11/18  22:02:28  jaffe
* 	Transarc delta: fred-itl-ofer-fixes-10-30 1.1
* 	  Selected comments:
* 	    Incorporates Ofer's changes that permit procedures to have parameters
* 	    passed to them, and also includes the vector and valList data types.  The
* 	    vector data type is needed for DFS testing.  It allows us to manipulate
* 	    binary data.
* 	    Added additional tests for the procedure parameter stuff.
* 	[1992/11/18  16:35:21  jaffe]
* 
* Revision 1.1.2.3  1992/10/28  17:59:12  jaffe
* 	Transarc delta: fred-itl-add-sys-vars 1.2
* 	  Selected comments:
* 	    To add the ITL_SystemType variable.
* 	    Copied over Ofer's additional test for string in-equality.
* 	    Mistakenly removed some parenthesis'.
* 	Transarc delta: fred-itl-ofer-fixes-9-22-92 1.2
* 	  Selected comments:
* 	    Incorporate fixes made to the TP version of ITL.  Some of them are performance
* 	    related.  Others concerned the printing of error messages.  In most cases
* 	    messages are no longer printed by support functions.  The determination of
* 	    whether a message should be printed is now left to functions that call these
* 	    support functions.
* 	    Added additional test cases.
* 	    Fix (picky) compiler warnings
* 	Transarc delta: fred-itl-ofer-fixes-9-24-92 1.1
* 	  Selected comments:
* 	    Include some minor fixes made to the TP ITL.
* 	    Removed #'s from comments.
* 	[1992/10/28  12:54:15  jaffe]
* 
* 	$TALog: test1.scr,v $
* 	Revision 1.15  1994/11/01  22:31:02  cfe
* 	Bring over the changes that the OSF made in going from their DCE 1.0.3
* 	release to their DCE 1.1 release.
* 	[from r1.14 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
* 
* 	Revision 1.14  1993/03/08  13:52:12  fred
* 	To import fixes to ITL from Ofer.  Also, fixed some outstanding minor
* 	bugs we found -
* 	 - The spoke (distributed ITL) had a bug in it's sync point code.  It was
* 	   not removing a variable from the hash table, which caused confusion when
* 	   a sync point name was re-used in a tight loop.  Also, it was not
* 	   setting the timeout field correctly during sync point creation.
* 
* 	 - Remove the dependency of the ITL utilities library on the com_err
* 	   library.  I wrote our own error handling function that deals with both
* 	   dce and errno correctly.  Besides, the error_message() function in the
* 	   com_err library is not thread-safe.
* 
* 	Additional tests to verify changes to ITL, and that new features work.
* 	[from r1.13 by delta fred-db3202-import-encina-itl-fixes, r1.1]
* 
* Revision 1.13  1993/01/14  17:39:09  jaffe
* 	revdrop of latest OSF copyright changes to these files
* 	[from r1.12 by delta osf-revdrop-01-12-92, r1.1]
* 
* 	Revision 1.10  1992/11/10  19:49:43  jaffe
* 	Sync up with the OSF source as of Nov 9.  This delta fixes mostly test
* 	code problems related to missing OSF copyrights.
* 	[from revision 1.7 by delta osf-sync-with-nov-9-drop, r1.1]
* 
* Revision 1.8  1992/11/03  15:28:03  fred
* 	Incorporates Ofer's changes that permit procedures to have parameters
* 	passed to them, and also includes the vector and valList data types.  The
* 	vector data type is needed for DFS testing.  It allows us to manipulate
* 	binary data.
* 
* 	Added additional tests for the procedure parameter stuff.
* 	[from revision 1.7 by delta fred-itl-ofer-fixes-10-30, r1.1]
* 
* Revision 1.7  1992/10/12  18:59:39  mcinerny
* 	[merge of changes from 1.3 to 1.6 into 1.5]
* 
* Revision 1.6  1992/10/09  17:43:51  fred
* 	To add the ITL_SystemType variable.
* 
* 	Copied over Ofer's additional test for string in-equality.
* 	[from revision 1.3 by delta fred-itl-add-sys-vars, r1.1]
* 
* Revision 1.5  1992/10/05  18:20:27  jdp
* 	[merge of changes from 1.1 to 1.4 into 1.3]
* 
* Revision 1.3  1992/09/24  15:23:32  fred
* 	Include some minor fixes made to the TP ITL.
* 
* 	Removed #'s from comments.
* 	[from revision 1.2 by delta fred-itl-ofer-fixes-9-24-92, revision 1.1]
* 
* Revision 1.2  1992/09/23  15:53:54  fred
* 	Incorporate fixes made to the TP version of ITL.  Some of them are performance
* 	related.  Others concerned the printing of error messages.  In most cases
* 	messages are no longer printed by support functions.  The determination of
* 	whether a message should be printed is now left to functions that call these
* 	support functions.
* 
* 	Added additional test cases.
* 	[from revision 1.1 by delta fred-itl-ofer-fixes-9-22-92, revision 1.1]
* 
* Revision 1.1  1992/08/12  14:58:01  fred
* 	Fix initialization code in file_test.c.  Also fixed the itl_main.c code
* 	to reflect how other ITL based programs should initialize the ITL.
* 	Changed the makefile to export two test scripts, that are there for
* 	validating changes to ITL.
* 
* 	Helps test changes/ports of ITL.
* 	[added by delta fred-fix-itl-initialization, revision 1.1]
* 
* Revision 1.10  1992/04/28  16:45:55  oz
* 	Added an assertion to the test&Set test
* 	[from revision 1.9 by delta oz-2228-Add-tests-for-test-and-set, revision 1.2]
* 
* Revision 1.9  1992/04/28  15:22:44  oz
* 	Added a test to the script test1.scr to test the test&Set command
* 
* 	[from revision 1.8 by delta oz-2228-Add-tests-for-test-and-set, revision 1.1]
* 
* Revision 1.8  1992/03/27  21:16:07  oz
* 	Changes which were made before 1.0.1 and were not supposed to be
* 	incorporated in 1.0.1 and therefore were not readied and were
* 	not moved to CML with the rest of the file.
* 
* 	These changes add tranC support for ITL as well as handling
* 	transaction aborts (exceptions) in the lower level io modules.
* 
* 	See General Comment Above
* 	Was previously part of itl_io.c
* 	[from revision 1.7 by delta oz-2172-itl-support-tranc, revision 1.1]
* 
* Revision 1.5  1992/01/23  18:13:20  oz
* 	 - Added a test of nested braced if's
* 	[92/01/23  17:10:15  oz]
* 
* Revision 1.4  91/11/22  11:16:53  oz
* 	Added more expression tests
* 
* Revision 1.3  91/11/21  15:54:49  oz
* 	Added more expressions and more output
* 
* Revision 1.2  91/11/21  15:34:00  oz
* 	Initial Checkin
* 	[91/11/11  16:32:43  oz]
* 
* $EndLog$

!* Starting
!* assert (1 + 2 + 3 + 4 + 5 == 15)
assert (1 + 2 + 3 + 4 + 5 == 15)
!* assert (1 + 2 * 3 + 4 * 5 == 27)
assert (1 + 2 * 3 + 4 * 5 == 27)
!* assert (1<<2<<2 == 16)
assert (1<<2<<2 == 16)
set f 45
set g 33
!* f is $f and g is $g
!* assert ( @f < 50 && @g > 11 && @f > @g )
assert ( $f < 50 && $g > 11 && $f > $g )

!* assert (@f << 1 == @f * 2)
   assert ($f << 1 == $f * 2)

!* assert ((@f + @g) << 2 == 78*4)
   assert (($f + $g) << 2 == 78*4)

!* assert (@f + @g << 2 == 78*4)
   assert ($f + $g << 2 == 78*4)

!* assert (@f + @g << 2 == (78*4))
   assert ($f + $g << 2 == (78*4))

!* assert (@f + @g << 2 == (78*4) && 3 > 2)
   assert ($f + $g << 2 == (78*4) && 3 > 2)

!* assert (2 * 3 < 7 && 4 * 5 > 10 + 9)
   assert (2 * 3 < 7 && 4 * 5 > 10 + 9)

!* assert (2 * 3 < 3 + 4 && 4 + 5 < 4 * 5)
   assert (2 * 3 < 3 + 4 && 4 + 5 < 4 * 5)

!* assert ( 4 + 5 % 3 == 6)
   assert ( 4 + 5 % 3 == 6)

!* assert (160 / 4 / 4 == 10)
   assert (160 / 4 / 4 == 10)

!* assert ((16 * 32 + 16) % 32 / 4 == 4)
   assert ((16 * 32 + 16) % 32 / 4 == 4)

!* assert ((16 * 32 + 16) % (32 / 4) == 0)
   assert ((16 * 32 + 16) % (32 / 4) == 0)

!* assert ( 4 + 18 % 7 << 2 == ((4 + (18 % 7)) << 2))
   assert ( 4 + 18 % 7 << 2 == ((4 + (18 % 7)) << 2))

!* assert ( (0xabcdef & 0xfff) == 0xdef )
   assert ( (0xabcdef & 0xfff) == 0xdef )

!* assert ((0xabcdef & 0xfff << 4) == 0xcde0)
   assert ((0xabcdef & 0xfff << 4) == 0xcde0)

!* assert ((4 ? 3 : 4) == 3)
   assert ((4 ? 3 : 4) == 3)

!* assert ((4 < 5 ? 45 : 55) == 45)
   assert ((4 < 5 ? 45 : 55) == 45)

!* assert ((40 < 5 ? 45 : 55) == 55)
   assert ((40 < 5 ? 45 : 55) == 55)

!* assert ( "hello" == "hello" )
   assert ( "hello" == "hello" )

!* assert ( !("hello" != "hello"))
   assert ( !("hello" != "hello"))

!* assert ( "44hello" == "44hello" )
   assert ( "44hello" == "44hello" )

!* assert ( "44hello" != "45hello" )
   assert ( "44hello" != "45hello" )

!* assert ( "44hello" != "44Hello" )
   assert ( "44hello" != "44Hello" )

!* assert ( !("44hello" == "45hello"))
   assert ( !("44hello" == "45hello"))

!* assert ( !("44hello" != "44hello"))
   assert ( !("44hello" != "44hello"))

!* assert ("hello" > "hell")
   assert ("hello" > "hell")

!* assert ("hello" + 45 == "hello45")
   assert ("hello" + 45 == "hello45")

!* assert ("hello" + 4 * 5 == "hello20")
   assert ("hello" + 4 * 5 == "hello20")

!* assert ("hello" * 2 + 45 == "hellohello45")
   assert ("hello" * 2 + 45 == "hellohello45")

!* assert (("hello" + 5) * 2 == "hello5hello5")
   assert (("hello" + 5) * 2 == "hello5hello5")

!* assert ("abcdefghijkl" << 5 == "fghijklabcde")
   assert ("abcdefghijkl" << 5 == "fghijklabcde")

!* assert ("abcdefghijklm" >> 4 + 1 == "ijklmabcdefgh")
   assert ("abcdefghijklm" >> 4 + 1 == "ijklmabcdefgh")

!* assert (("abcdefg" >> 4) + 2 * 3 == "defgabc6")
   assert (("abcdefg" >> 4) + 2 * 3 == "defgabc6")

!* assert ("abcdef" % 3 == "abc")
   assert ("abcdef" % 3 == "abc")

!* assert ("abcdefghijklmno" % 40 == "abcdefghijklmno")
   assert ("abcdefghijklmno" % 40 == "abcdefghijklmno")

!* assert ("abcdefghij" % 5 % 3 == "abc")
   assert ("abcdefghij" % 5 % 3 == "abc")

!* assert (("abcdefg" << 4) % 3 + "abcdefg" % 4 == "efgabcd")
   assert (("abcdefg" << 4) % 3 + "abcdefg" % 4 == "efgabcd")

!* assert (("abcdefghijk" << 4) % 3 == "efg")
   assert (("abcdefghijk" << 4) % 3 == "efg")

!* assert ((1 + ("0x" + D * 3)) == 0xdde)
   assert ((1 + ("0x" + D * 3)) == 0xdde)

!* assert (0xff == 255)
   assert (0xff == 255)

!* assert (0xFfE == 0xffe && 0xFFe == 0xFFE)
   assert (0xFfE == 0xffe && 0xFFe == 0xFFE)

!* assert (0xA == 10 && 0xb < 15)
   assert (0xA == 10 && 0xb < 15)

!* assert ((0xA == 10) && 0xb < 15)
   assert ((0xA == 10) && 0xb < 15)

!* assert (0xb * 0xa == 110)
   assert (0xb * 0xa == 110)

!* assert ((0xb << 2 * 5 << 1 + 2) == (11*1024*8))
   assert ((0xb << 2 * 5 << 1 + 2) == (11*1024*8))

!* assert (0xb << 2 * 5 << 1 + 2 < 0xb << 2 * 5 << 1 + 3)
   assert (0xb << 2 * 5 << 1 + 2 < 0xb << 2 * 5 << 1 + 3)

!* assert ((0xb << 2 * 5 << 1 + 2 == 0xb << 2 * 5 << 1 * 3))
   assert ((0xb << 2 * 5 << 1 + 2 == 0xb << 2 * 5 << 1 * 3))

!* assert (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30 == 30*31/2)
   assert (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30 == 30*31/2)

!* Test nested if's
set ifTest proc DONE
  if (@X) {
    if (@Y) {
       set sum (@sum+1)
    } else {
       set sum (@sum+2)
    }
  } else {
    if (@Y) {
       set sum (@sum+4)
    } else {
       set sum (@sum+8)
    }
  }
DONE
set sum 0
loop X 0 1 1
   loop Y 0 1 1
      exec ifTest
   endLoop
endLoop
assert ($sum == 15)
!* Test coLoops inside procedures
set Sum global 0
set proc proc END
   coLoop X 1 1 10
      fetch&OP Sum + 1
   endLoop
   fetch&Op Sum + 0
   Assert (@Sum == 10)
END
exec proc
!* Test procedures inside coloops inside procedures
set Inc "fetch&Op Sum + 1"
set proc proc END
   coLoop X 1 1 10
      exec Inc
   endLoop
   fetch&Op Sum + 0
   Assert (@Sum == 20)
END
exec proc

!* Test the test&Set command
*  Start 20 threads, all incrementing the same global variable
*  Each time the global variable is incremented, as second variable
*  is incremented using fetch&Op.
*  Before Reading the variable count and updating it we yield the process
*  to give others a chance to get in to the critical section.
*
set Count global 0
fetch&Op FinalVal = 0
set Token global 0
coLoop X 1 1 20
   loop Y 1 1 20
      test&Set Token == 0 1
      if ($CommandResult) {
         set temp $Count
         yield
         fetch&Op FinalVal + 1
         yield
         set Count global ($temp + 1)
	 assert ($Token == 1)
         set Token global 0
	 sleep 100
      } else {
	sleep 50
	sleep 75
      }
   endLoop	
endLoop
fetch&Op FinalVal + 0
!* Count is now $Count - Expected $FinalVal
assert ($FinalVal == $Count)

!* Test procedures with parameters
set proc[1] proc 3 num int name string res Out END
  set res ((@name + @num) * @num)
END
exec proc[1] 3 Ab Res
!* assert (@Res == $(("Ab" + 3) * 3))
   assert ($Res == (("Ab" + 3) * 3))

!* Test nested procedures with parameters
set p1 proc 3 res OUT num int name string END
  set res (@name + @num)
END

set p2 proc 2 res OUT name string 1 X END
  exec p1 X 5 @name
  exec p1 res 4 @name
  set res (@X + @res)
END
exec p2 Res New
!* assert (@Res == "New5New4")
   assert ($Res == "New5New4")

!* Test recursive procedures with parameters
set add proc 2 num int res out 1 X END
   if (@num == 0) {
      set res 0
   } else {
      exec add (@num - 1) X
      set res (@X + @num)
   }
END
exec add 10 sum
!* assert (@sum == $(10 * 11 / 2))
   assert ($sum == (10 * 11 / 2))

!* Test coLoops inside procedures using procedures with locals
set Main proc 1 numT int 1 sum END_MAIN
  fetch&Op total = 0
  coLoop Y 1 1 @numT
    exec add @Y sum
    assert (@sum == (@Y * (@Y  + 1) / 2))
    fetch&Op total + @sum
  endLoop
  fetch&Op total + 0
END_MAIN

set nT 10
exec Main $nT
!* assert (@total == $($nT * ($nT + 1) * ($nT + 2) / 6))
   assert ($total ==  ($nT * ($nT + 1) * ($nT + 2) / 6))

set NUM_THREADS 14
set sum global 0
!* Including testincl2.itl in $NUM_THREADS threads
coLoop X 1 1 $NUM_THREADS
   include testincl2.itl
endLoop

fetch&Op sum + 0
assert ($sum == $NUM_THREADS * 5)

!* Including testincl2.itl in $NUM_THREADS threads inside a proc
set sum global 0
set foo proc END
   coLoop X 1 1 @NUM_THREADS
     include testincl2.itl
   endLoop

fetch&Op sum + 0
assert (@sum == @NUM_THREADS * 5)
END
exec foo

!* Test include inside an 'if' clause
set sum global 0
coLoop X 1 1 $NUM_THREADS
   if ($X % 2 == 0) {
      include testincl2.itl
   } else {
      include testincl2.itl
   }
endLoop

fetch&Op sum + 0
assert ($sum == $NUM_THREADS * 5)

!* Test global loop variables inside coLoops (Defect 6326)
set I global 3
set Sum global 0
coLoop J 1 1 5
   loop I 1 1 5
      yield
      if ($J == 1) {
	sleep 100
      }
      fetch&OP Sum + $I
      yield
   endLoop
endLoop
fetch&OP Sum + 0
!* assert (@Sum == $(15 * 5))
assert ($Sum == (15 * 5))

!* All Done
quit

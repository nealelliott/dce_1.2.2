/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 * 
 */
/*
 * HISTORY
 * $Log: nbase.for_h,v $
 * Revision 1.1.2.2  1996/03/09  20:45:27  marty
 * 	Add OSF copyright
 * 	[1996/03/09  20:24:57  marty]
 *
 * Revision 1.1.2.1  1995/12/13  19:06:08  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/13  19:05:58  root]
 * 
 * $EndLog$
 */

/* Generated by IDL compiler version DEC DCE T1.1.0-05 */
#ifndef nbase_v0_0_included
#define nbase_v0_0_included
#include <dce/idlbase.h>

#ifdef __cplusplus
    extern "C" {
#endif
  
#include <dce/nbase.for_h>
  typedef idl_for_usmall unsigned8;
  typedef idl_for_ushort unsigned16;
  typedef idl_for_ulong unsigned32;
  typedef idl_for_small signed8;
  typedef idl_for_short signed16;
  typedef idl_for_long signed32;
  typedef unsigned32 boolean32;
  typedef idl_for_ulong error_status_t;
#define error_status_ok (0)
  typedef struct  {
    unsigned32 time_low;
    unsigned16 time_mid;
    unsigned16 time_hi_and_version;
    unsigned8 clock_seq_hi_and_reserved;
    unsigned8 clock_seq_low;
    idl_for_byte node[6];
  } uuid_t;
  typedef uuid_t *uuid_p_t;
  typedef struct  {
    idl_for_ulong time_high;
    idl_for_ushort time_low;
    idl_for_ushort reserved;
    idl_for_byte family;
    idl_for_byte host[7];
  } uuid_old_t;
  typedef struct  {
    unsigned32 tower_length;
    idl_for_byte tower_octet_string[1];
  } twr_t;
  typedef twr_t *twr_p_t;
#define ndr_c_int_big_endian (0)
#define ndr_c_int_little_endian (1)
#define ndr_c_float_ieee (0)
#define ndr_c_float_vax (1)
#define ndr_c_float_cray (2)
#define ndr_c_float_ibm (3)
#define ndr_c_char_ascii (0)
#define ndr_c_char_ebcdic (1)
  typedef struct  {
    unsigned8 int_rep;
    unsigned8 char_rep;
    unsigned8 float_rep;
    idl_for_byte reserved;
  } ndr_format_t;
  typedef ndr_format_t *ndr_format_p_t;
  typedef struct ndr_context_handle {
    unsigned32 context_handle_attributes;
    uuid_t context_handle_uuid;
  } ndr_context_handle;
  typedef idl_for_byte ISO_LATIN_1;
  typedef struct  {
    idl_for_byte row;
    idl_for_byte column;
  } ISO_MULTI_LINGUAL;
  typedef struct  {
    idl_for_byte group;
    idl_for_byte plane;
    idl_for_byte row;
    idl_for_byte column;
  } ISO_UCS;
#define dce_c_rpc_authn_protocol_none (0)
#define dce_c_rpc_authn_protocol_krb5 (1)
#define dce_c_rpc_authn_protocol_dummy (2)
#define dce_c_rpc_authn_protocol_dssa (3)
  typedef unsigned8 dce_rpc_authn_protocol_id_t;
#define rpc_tx_dec_common_context_id (130001)
#define rpc_tx_dec_ddtm_context_id (130002)
#define rpc_tx_dec_es_context_id (131001)
#define rpc_tx_c_transaction_mandatory (1)
  typedef struct  {
    idl_for_usmall rpc_tx_rollback_indicator;
  } rpc_tx_xoctx_t;
#define rpc_tx_c_begin_branch (1)
#define rpc_tx_c_non_transactional (2)
#define rpc_tx_c_early_prepare (4)
#define rpc_tx_c_es_request (8)
#define rpc_tx_c_client_request (16)
#define rpc_tx_c_highest_flag rpc_tx_c_client_request
  typedef struct rpc_tx_dec_common_context_t {
    idl_for_ulong rpc_tx_flags;
    idl_for_long rpc_tx_xid_formatID;
    idl_for_long rpc_tx_xid_gtrid_length;
    idl_for_long rpc_tx_xid_bqual_length;
    idl_for_byte rpc_tx_xid_data[128];
  } rpc_tx_dec_common_context_t;
#define rpc_tx_c_dec_max_events (2)
#define rpc_tx_c_dec_max_server_handles (2)
  typedef struct rpc_tx_dec_es_context_t {
    rpc_tx_dec_common_context_t rpc_tx_common;
    idl_for_long rpc_tx_num_es_events;
    idl_uhyper_int rpc_tx_server_tx_branch_handle[2];
    idl_for_long rpc_tx_event[2];
    idl_for_long rpc_tx_notification[2];
    idl_for_long rpc_tx_event_data[2];
  } rpc_tx_dec_es_context_t;
  typedef struct  {
    idl_for_long rpc_tx_ctx;
    union  {
      /* case(s): 1 */
      rpc_tx_xoctx_t rpc_tx_xoctx;
      /* case(s): 131001 */
      rpc_tx_dec_es_context_t rpc_tx_dec_es_context;
      /* case(s): 130002, 130001 */
      rpc_tx_dec_common_context_t rpc_tx_dec_common_context;
    } rpc_tx_data;
  } rpc_tx_context_t;
  
#ifdef __cplusplus
      }

#endif
#endif

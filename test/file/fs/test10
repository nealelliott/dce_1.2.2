#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test10,v $
# Revision 1.1.10.1  1996/10/17  18:20:03  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:50:40  damon]
#
# Revision 1.1.4.4  1993/01/11  18:26:44  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:00:00  htf]
# 
# Revision 1.1.4.3  1992/10/28  16:13:03  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    No changes made.
# 	Transarc delta: jess-add-dumpkernel-in-fs-tests 1.3
# 	  Selected comments:
# 	    The icldump command and debug option for the tests have been added in the
# 	    fs test scripts. You can run fs/tests with -debug to dump kernel in case
# 	    of error. The delta also adds the icl_DumpKernel function in the C programm.
# 	    See above.
# 	    Put the debug option in test1.
# 	    When the debug is set the dumpfile is always created eventhough
# 	    there is no error.
# 	Transarc delta: jess-fs-path-for-icldump 1.1
# 	  Selected comments:
# 	    This delta adds the path for icldump command. The command has been
# 	    installed at "util" dir in test tree by Fred's delta.
# 	    Add the path for icldump.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/27  18:13:42  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:11:46  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Remove references to sys command by using fsSetSysName
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    See above.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    Added error test err2 to the Makefile
# 	[1992/08/28  12:17:52  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  22:58:13  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/28  22:18:48  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:40:03  jaffe
# 	Transarc delta: fred-2980-and-2981-fix-sys 1.1
# 	  Files modified:
# 	    fs: Makefile, err1, err2, half_meg, test1, test10, test2
# 	    fs: test2b, test2s, test3, test4, test5, test6, test7, test8
# 	    fs: test9
# 	  Selected comments:
# 	    To fix reported defects indicating files could not be found.  Added two
# 	    shell scripts, one to issue the correct command to get the system type
# 	    (either AFS or DFS), and a second to generate a file from a string.
# 	    Change variable sys to dfs_fsSysName and use fsSetSysName shell script.
# 	Transarc delta: fred-merge-tests 1.1
# 	   Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Files modified:
# 	    Makefile; cm: runtests, test0, test3, test4, test6
# 	    fs: Makefile, err1, err2, rtest1, test10, test2, test2b
# 	    fs: test2s, test3, test4, test5, test6, test7, test8, test9
# 	    low: progErrMap.c, rprogErrMapQuota.c, rtest1, rtest2
# 	    low: rtestErrMapQuota, test1, test10, test11, test12, test13
# 	    low: test14, test2, test3, test4, test5, test6, test7, test8
# 	    low: test9, testErrMap
# 	    util: Makefile, fs_GenerateFile, fs_SetSysName
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test10,v $
# 	Revision 4.24  1994/11/01  22:23:04  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.23 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  19:02:34  jaffe]
# 
# $EndLog$
#
###############################################################################
#       Copyright (C) 1991, 1992 Transarc Corporation - All rights reserved   #
###############################################################################

# This script verifies that two supposedly eqivalent pathnames to a directory
# are indeed equivalent. It does operations in one directory, and checks in
# the other.

# Usage: test10 [-np #-processes] [-nt #-times] [-dir1 directory-name]
#               [-dir2 directory-name] [-debug]

# Note:  default is test10 -np 1 1 -dir1 . -dir2 .

# Highest error number is: 11.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName does operations in 2 equivalent directories"
    echo "Usage: $programName [-np #-procs] [-nt #-times] [-dir1 dirname] [-dir2 dirname]"
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}

if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/fs
fi

. $UTIL_DIR/fs_FunctionsScript
. $UTIL_DIR/fs_SetSysVar
createFileCmd="$UTIL_DIR/fs_GenerateFile"

trap '
    cd $currentDir
    rm -rf $dir1/$programName.$$.[0-9]* $dir2/$programName.$$.[0-9]*
    echo "$programName killed; returning $scriptErrorExit" | tee -a $logFile
    exit $scriptErrorExit
     ' 2 3 15
#
# Initialise setup variables
#

fs_InitSetup fs

#
# Default option argument values
#

dir1=`pwd`
dir2=`pwd`
processCount=1
iterationCount=1

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage
                    exit $successExit
                    ;;

        dir1|-dir1) CheckOptionValue "dir1" $testSuiteType $programName $*
                    dir1=$2
                    shift
                    shift
                    ;;

        dir2|-dir2) CheckOptionValue "dir2" $testSuiteType $programName $*
                    dir2=$2
                    shift
                    shift
                    ;;

        np|-np)     CheckOptionValue "np" $testSuiteType $programName $*
                    processCount=$2
                    shift
                    shift
                    ;;

        nt|-nt)     CheckOptionValue "nt" $testSuiteType $programName $*
                    iterationCount=$2
                    shift
                    shift
                    ;;
        debug|-debug)
                    dumpkernel="true"
                    shift
                    ;;

        *)          echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile
                    exit $scriptErrExit
                    ;;
    esac
done

#
# Validate arguments
#

if [ ! -d $dir1 ]
then 
    echo "$programName: cannot find directory $dir1" | tee -a $logFile
    exit $scriptErrorExit
elif [ ! -d $dir2 ]
then 
    echo "$programName: cannot find directory $dir2" | tee -a $logFile
    exit $scriptErrorExit
elif [ $processCount -lt 1 ]
then 
    echo "$programName: number of processes must be >= 1" | tee -a $logFile
    exit $scriptErrorExit
elif [ $iterationCount -lt 0 ]
then 
    echo "$programName: number of times must be >= 0" | tee -a $logFile
    exit $scriptErrorExit
fi

#
# Start test
#

(
    echo ""
    echo "$programName (equiv dirs) starting in $currentDir"
    echo "Host `hostname` ($dfs_fsSysName)"
    date
) | tee -a $logFile

echo "$processCount processes $iterationCount times; parent process number $$" | tee -a $logFile
echo "Dir1 is <$dir1>; dir2 is <$dir2>." | tee -a $logFile

echo "" | tee -a $logFile

cd $dir1
(
    echo "Details of directory #1 - $dir1"
    echo "-------------------------------"
) | tee -a $logFile
fs_DetermineFSType

cd $dir2
(
    echo "Details of directory #2 - $dir2"
    echo "-------------------------------"
) | tee -a $logFile
fs_DetermineFSType

processNum=1
while [ $processNum -le $processCount ]
do
    (
        echo ""
        echo "$programName starting process number $processNum"
    ) | tee -a $logFile
    (

        dir1=$dir1/$programName.$$.$processNum
        dir2=$dir2/$programName.$$.$processNum
        rm -rf $dir1
        if [ -d $dir2 ]
        then 
            echo "- $programName: dir2 isn't the same as dir1 (E1)" | tee -a $logFile
            touch $currentDir/error.$$
            if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
            fi
            errorCount=`expr $errorCount + 1`
        fi
        
        mkdir $dir1
        if [ ! -d $dir2 ]
        then 
            echo "- $programName: dir2 isn't the same as dir1 (E2)" | tee -a $logFile
            touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
            errorCount=`expr $errorCount + 1`
        fi
        
        iterationNum=1
        while [ \( $iterationNum -le $iterationCount -o $iterationCount -eq 0 \) -a $errorCount -eq 0 ]
        do
            echo "   $programName starting iteration $iterationNum, process number $processNum" | tee -a $logFile
            
            cd $dir1
            
            # This is from memory; my apologies to Thomas Jefferson . . .
            cat > file1 << ==END==
We hold these truths to be self evident: that all men are created equal,
that they are endowed by their creator with certain inalienable rights,
that among these are life, liberty, and the pursuit of happiness; that
to secure these ends, governments are instituted among men, deriving
their just powers from the consent of the governed; that when a government
becomes destructive of these ends, it is the right of the people to alter
or abolish it . . .
==END==
            mkdir dir1
            cp file1 dir1
            
            cd $dir2
            for f in file1 dir1/file1
            do
                if [ ! -f $f ]
                then 
                    echo "- $programName process $processNum: $f is missing (E3)" | tee -a $logFile
                    touch $currentDir/error.$$
                    if [ $dumpkernel = "true" ]
                    then
                   	$UTIL_DIR/icldump >> $logFile
                    fi
                    errorCount=`expr $errorCount + 1`
                else
                    diff $f $dir1/$f > /dev/null 2> /dev/null
                    if [ $? -ne 0 ]
                    then 
                        echo "- $programName process $processNum: $f diff failed (E4)" | tee -a $logFile
                        touch $currentDir/error.$$
			    if [ $dumpkernel = "true" ]
			    then
				$UTIL_DIR/icldump >> $logFile
			    fi
                        errorCount=`expr $errorCount + 1`
                    fi
                fi
            done
        
            diff -r $dir1 $dir2 > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName process $processNum: diff -r failed (E5)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            rm file1 dir1/file1
            rmdir dir1
            cd $dir1
            if [ -f file1 ]
            then 
                echo "- $programName process $processNum: file1 still exists (E6)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
            if [ -d dir1 ]
            then 
                echo "- $programName process $processNum: dir1 still exists (E7)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            diff -r $dir1 $dir2 > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName process $processNum: diff -r failed (E8)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            touch file2
            mkdir dir2
            touch dir2/file2
            d1=`ls -C | sed 's/ /_/g'`
            cd $dir2
            d2=`ls -C | sed 's/ /_/g'`
            if [ "$d1" != "$d2" ]
            then 
                echo "- $programName process $processNum: ls's do not match (E9)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            diff -r $dir1 $dir2 > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName process $processNum: diff -r failed (E10)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            rm file2 dir2/file2
            rmdir dir2
            diff -r $dir1 $dir2 > /dev/null 2> /dev/null
            if [ $? -ne 0 ]
            then 
                echo "- $programName process $processNum: diff -r failed (E11)" | tee -a $logFile
                touch $currentDir/error.$$
                if [ $dumpkernel = "true" ]
                then
                   $UTIL_DIR/icldump >> $logFile
                fi
                errorCount=`expr $errorCount + 1`
            fi
        
            echo "   $programName iteration $iterationNum, process number $processNum, done" | tee -a $logFile
            iterationNum=`expr $iterationNum + 1`
        done
        
        (
            echo "$programName process number $processNum done"
            echo ""
        ) | tee -a $logFile
        
    ) &
    processNum=`expr $processNum + 1`
done
        
wait
        
cd $currentDir
if [ -f error.$$ ]
then 
    errorCount=`expr $errorCount + 1`
    rm -rf error.$$
fi
    
###############################################################################
        
cd $currentDir
rm -rf $dir1/$programName.$$.[0-9]* $dir2/$programName.$$.[0-9]*

(
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"
    date
) | tee -a $logFile
        
exit $errorCount
        
##############################################################################


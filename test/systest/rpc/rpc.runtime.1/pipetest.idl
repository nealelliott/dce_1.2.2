/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: pipetest.idl,v $
 * Revision 1.1.9.2  1996/03/11  02:46:17  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  20:08:17  marty]
 *
 * Revision 1.1.9.1  1995/12/11  22:43:31  root
 * 	Submit OSF/DCE 1.2.1
 * 
 * 	HP revision /main/HPDCE02/1  1994/07/01  14:05 UTC  bissen
 * 	Merge hpdce02 (DCE 1.1 beta) and HPDCE01 into HPDCE02
 * 
 * 	HP revision /main/HPDCE01/1  1994/02/01  18:17  giza
 * 	merge kk & hpdce01
 * 	[1995/12/11  22:20:23  root]
 * 
 * Revision 1.1.4.2  1993/08/24  19:00:29  giza
 * 	Added new function defs.
 * 	[1993/08/24  19:00:03  giza]
 * 
 * 	Embedded copyright notice
 * 	[1993/02/04  22:10:52  cjd]
 * 
 * Revision 1.1.1.5  1993/05/04  22:21:55  mgm
 * 	    Loading drop DCE1_0_2FNL
 * 
 * Revision 1.1.2.3  1993/02/05  15:21:54  cjd
 * 	Embedded copyright notice
 * 	[1993/02/05  14:42:25  cjd]
 * 
 * Revision 1.1.2.2  1992/09/25  19:17:01  eperkins
 * 	Initial Version
 * 	[1992/09/25  19:16:40  eperkins]
 * 
 * $EndLog$
 */

[uuid(492790a6-4000-0000-0d00-00feda000000), version(0),
 endpoint("ncadg_ip_udp:[35002]", "ncacn_ip_tcp:[36002]")]
interface pipetest
{
    typedef [handle] long my_handle;


    typedef struct {
	long    pt_1_long;
	long    pt_2_long;
	long    pt_3_long;
	long    pt_4_long;
	long    pt_5_long;
	long    pt_6_long;
	long    pt_7_long;
	long    pt_8_long;
        long    pt_long;
        double  pt_double;
    } pt_struct;

    typedef pipe pt_struct pipe_of_struct;

    void my_oper2(
                  [in,out] pipe_of_struct *iop_struct,
                  [out] boolean *correct_to_server,
		  [out] error_status_t *s
                 );
/*
 * C R E A T E _ R E C O R D
 *
 * This function creates a record at the server, storing the name of
 * the client, as well as it's IP address.
 *
 * To avoid having to send this information each time a  field is updated,
 * the server returns a UUID that the client can use to identify the record
 * it's interested in.
 *
 */

void create_record(
        [in]                    handle_t        h,
        [in, size_is(name_len)] byte            host_name[],
        [in]                    signed32        name_len,
        [in]                    unsigned32      net_addr,
        [out]                   uuid_t          *db_handle,
        [out]                   unsigned32      *st
);


/*
 * R E P O R T _ C P U _ U S A G E
 *
 * This routine allows a client to modify the CPU usage field of a record
 * stored on the server.
 *
 * The load is reported as a number from 1 to 100.
 */

[idempotent]
void reportTestStatus(
        [in]    handle_t                         h,
        [in]    uuid_t                           *db_handle,
        [in]    unsigned32                       pass,
        [in]    unsigned32                       fail,
        [in,    size_is(file_len)] byte          logfile[],
        [in]    signed32                         file_len,
        [out]   unsigned32                       *st
);

[idempotent]
void dumpDB(
        [in]    handle_t                         h,
        [in]    unsigned32                       s_only,
        [out]   unsigned32                       *st
);

}




#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
#
# Copyright (C) 1995, 1993 Transarc Corporation
# Licensed Materials - Property of Transarc
# All rights reserved.
# HISTORY
# $Log: rep_trace.et,v $
# Revision 1.1.156.1  1996/10/02  18:14:57  damon
# 	Newest DFS from Transarc
# 	[1996/10/01  18:46:11  damon]
#
# Revision 1.1.151.2  1994/06/09  14:18:17  annie
# 	fixed copyright in src/file
# 	[1994/06/09  13:30:20  annie]
# 
# Revision 1.1.151.1  1994/02/04  20:28:03  devsrc
# 	Merged from 1.0.3a to 1.1
# 	[1994/02/04  15:17:09  devsrc]
# 
# Revision 1.1.149.1  1993/12/07  17:32:20  jaffe
# 	New File from Transarc 1.0.3a
# 	[1993/12/02  21:42:04  jaffe]
# 
# $EndLog$

error_table 2 zrp
	ec	REP_TRACE_RCSID,
		"$Header: /u0/rcs_trees/dce/rcs/file/rep/rep_trace.et,v 1.1.156.1 1996/10/02 18:14:57 damon Exp $"
	ec	REP_TEST,
		"in %d"
	ec	REP_TRACE_UNINIT_MUTEX, 
		"Global mutex is initialized and locked"
	ec 	REP_TRACE_DFS_REG_BEGIN,
		"%s: %s about to call rpc_register_dfs_server(tkn)"  
	ec	REP_TRACE_DFS_REG_END, 	
		"%s: %s returned from rpc_register_dfs_server(tkn)"
	ec 	REP_TRACE_REP_REG_BEGIN, 
		"%s: %s about to call rpc_register_dfs_server(rep)"
	ec 	REP_TRACE_REP_REG_END, 
		"%s: %s returned from rpc_register_dfs_server(rep)"
	ec	REP_TRACE_MUTEX_REL, 
		"Releasing the global mutex to allow background processing"
	ec	REP_TRACE_DELAY,
		"[%lu,,%lu: delay %lu secs: %s]"
	ec	REP_TRACE_RENEW,
		"[%lu,,%lu: renew %lu secs: %s]"
	ec	REP_TRACE_GETLV_AGOPEN, 
		"GetLVStatus  calling AGOPEN"
	ec 	REP_TRACE_GETLV_GETSTAT,
		"GetLVStatus calling GETSTATUS"
	ec 	REP_TRACE_GETLV_CLOSE,
		"GetLVStatus calling CLOSE"
	ec	REP_TRACE_MSG_MSG,
		"%s: %s"
	ec 	REP_TRACE_VLDB_ENTRY, 
		"Interpreted vldb entry for %s %d reps, mySite=%d"
	ec 	REP_TRACE_NSVOL_VV,
		"NeedSetVol figuring VV"
	ec 	REP_TRACE_NSVOL_NO_LVP,
		"NeedSetVol TRUE: no lvp"
	ec 	REP_TRACE_NSVOL_LVP, 
		 "NeedSetVol TRUE: lvp ID %lu,,%lu not %lu,,%lu"
	ec	REP_TRACE_NSVOL_NOSTATE, 
		"NeedSetVol TRUE: don't have lv states"
	ec	REP_TRACE_NSVOL_SETBITS, 
		"NeedSetVol TRUE: need set bits %#lx -> %#lx"
	ec	REP_TRACE_NSVOL_TKNEXP, 
		"NeedSetVol TRUE: new tknExp time %lu.%06lu -> %lu.%06lu"
	ec 	REP_TRACE_NSVOL_NEW_CURTIME,
		"NeedSetVol TRUE: new Curr time %lu.%06lu -> %lu.%06lu"
	ec 	REP_TRACE_NSVOL_NEW_PINGCUR,
		"NeedSetVol TRUE: new PingCurr time %lu.%06lu -> %lu.%06lu"	
	ec 	REP_TRACE_NSVOL_NOCHANGE, 
		"NeedSetVol: no change needed"
	ec	REP_TRACE_SETOPENVOL_SETVV,
		"SetOpenVol calling SETVV"
	ec	REP_TRACE_SETOPENVOL_SYNC,
		"SetOpenVol calling SYNC"
	ec	REP_SETOPENVOL_SETVV_INFO,
		"SetOpenVol: Set VV for %lu,,%lu: %s"
	ec	REP_TRACE_SETOPENVOL_GETSTAT,
		"SetOpenVol calling GETSTATUS"
	ec	REP_TRACE_ULOCAL_SOPENVOL, 
		"UpdateLocal: calling SetOpenVol"
	ec	REP_TRACE_ULOCAL_CLOSE,
		"UpdateLocal: calling CLOSE"
	ec	REP_TRACE_SETOPENVOL_RET,
		"SetOpenVol returning %lu"
	ec	REP_CSETOPEN_SETOPENVOL,
		"CheckSetOpenVol: calling SetOpenVol"
	ec	REP_CSETOPEN_RET,
		"CheckSetOpenVol: returning %lu"
	ec	REP_TRACE_ULOCAL_AGOPEN,
		"UpdateLocal calling AGOPEN"
	ec	REP_TRACE_ULOCAL_RET, 
		"UpdateLocal: returning %lu"
	ec	REP_TRACE_SLVSTAT_AGOPEN, 
		"SetLVStatus calling AGOPEN"
	ec	REP_TRACE_SLVSTAT_SETSTAT, 
		"SetLVStatus calling SETSTATUS to %#lx"
	ec	REP_TRACE_SLVSTAT_CHECK_SETOPENVOL,
		"SetLVStatus calling CheckSetOpenVol"
	ec	REP_TRACE_SLVSTAT_SYNC,
		"SetLVStatus calling SYNC"
	ec 	REP_TRACE_SLVSTAT_SET_STATES, 
		"SetLVStatus: Set states for LV %lu,,%lu: %#lx"
	ec	REP_TRACE_SLVSTAT_RET, 
		"SetLVStatus returning %d"
	ec	REP_DESTROY_VOL_BEG, 
		"Destroying volume %lu,,%lu...."
	ec 	REP_DESTROY_VOL_GETSTAT, 
		"Destroyvolume calling GETSTATUS"
	ec 	REP_DESTROY_VOL_SETSTAT, 
		"DestroyVolume calling SETSTATUS"
	ec 	REP_DESTROY_VOL_LOOP,
		"DestroyVolume about to loop"
	ec	REP_DESTROY_VOL_CLOSE,
		"DestroyVolume calling CLOSE"
	ec	REP_DESTROY_VOL_RET,
		"DestroyVolume returning %lu"
	ec	REP_LOSEWVT_ACTNOW,
		"LoseWVT signals actNowCond"
	ec	REP_STKN_PROBE, 
		"%s: STKN_Probe() called"
	ec	REP_INIT_TOKEN, 
		"%s: STKN_InitTokenState() called"
	ec	REP_INIT_TOKEN_GLOCK, 
		"%s: STKN_InitTokenState about to get global lock"
	ec	REP_INIT_TOKEN_GOT_GLOCK, 
		"%s: STKN_InitTokenState got global lock"
	ec	REP_INIT_TOKEN_REL_GLOCK, 
		"%s: STKN_InitTokenState released global lock and returns"
	ec	REP_TOKEN_REVOKE,
		"%s: STKN_TokenRevoke() called with %ld revocations"
	ec	REP_TOKEN_REVOKE_LOSEWVT,
		"STKN_TokenRevoke: calling LoseWVT, fid %s"
	ec	REP_GET_CELLNAME_CALL,
		"%s: STKN_GetCellName() called"
	ec	REP_GET_CELLNAME_RET,
		"%s: STKN_GetCellName() returning %s"
	ec	REP_GET_CELLNAME_RET_NONAME, 
		"%s: STKN_GetCellName() returning no-name"
	ec	REP_GET_LOCK, 
		"%s: STKN_GetLock() called"
	ec	REP_GET_CE,
		"%s: STKN_GetCE() called"
	ec	REP_BINDING_PRINT,
		"%s"
	ec	REP_GET_TOKEN,
		"GetToken result: %ld"
	ec	REP_CLONEVOL_CALL, 
		"CloneAVolume called"
	ec	REP_CLONEVOL_CREATE, 
		"AG_VOLCREATE returns %ld, errno %d"
	ec	REP_CLONEVOL_AGOPEN, 
		"CloneAVolume calling AGOPEN(%d)"
	ec	REP_CLONEVOL_SETSTAT,
		"CloneAVolume calling SETSTATUS"
	ec	REP_CLONEVOL_PUSHSTAT, 
		"CloneAVolume calling PUSHSTATUS"
	ec	REP_CLONEVOL_VCLONE, 
		"CloneAVolume calling VolClone"
	ec	REP_CLONEVOL_SYNC, 
		"CloneAVolume calling SYNC(1)"
	ec	REP_CLONEVOL_CLOSE, 
		"CloneAVolume calling CLOSE(1)"
	ec	REP_CLONEVOL_SYNC_2, 
		"CloneAVolume calling SYNC(2)"
	ec	REP_CLONEVOL_CLOSE_2, 
		"CloneAVolume calling CLOSE(2)"
	ec	REP_INCRDUMP_CALL, 
		"Getting dump for vol %lu,,%lu"
	ec	REP_INCRDUMP_CALL_2, 
		"Incremental from version %lu,,%lu"
	ec 	REP_COMPNEWVOL_GETSTAT, 
		"CompleteNewVol calling GETSTATUS"
	ec 	REP_COMPNEWVOL_SETSTAT, 
		"CompleteNewVol calling SETSTATUS"
	ec 	REP_COMPNEWVOL_CSETOPENVOL, 
		"CompleteNewVol calling CheckSetOpenVol"
	ec 	REP_COMPNEWVOL_SYNC, 
		"CompleteNewVol calling SYNC"
	ec 	REP_COMPNEWVOL_CLOSE, 
		"CompleteNewVol calling CLOSE"
	ec 	REP_CBAKID_SETSTAT,
		"ClearBackingID calling SETSTATUS"
	ec 	REP_CBAKID_SYNC, 
		"ClearBackingID calling SYNC"
	ec 	REP_CBAKID_CLOSE, 
		"ClearBackingID calling CLOSE"
	ec	REP_EJVOL_AGOPEN,
		"EliminateJunkVolume calling AGOPEN(2)"
	ec	REP_EJVOL_UNCLONE,
		"EliminateJunkVolume calling VolUnClone"
	ec	REP_EJVOL_SYNC,
		"EliminateJunkVolume calling SYNC(1)"
	ec	REP_EJVOL_CLOSE,
		"EliminateJunkVolume calling CLOSE(1)"
	ec	REP_EJVOL_VDEST,
		"EliminateJunkVolume calling VolDestroy"
	ec	REP_EJVOL_CLOSE_2,
		"EliminateJunkVolume calling CLOSE(2)"
	ec	REP_EJVOL_CLOSE_RET,
		"EliminateJunkVolume returned from CLOSE(2)"
	ec 	REP_CSWITCH_AGOPEN, 
		"CompleteAndSwitch calling AGOPEN(2)"
	ec 	REP_CSWITCH_SOPENVOL, 
		"CompleteAndSwitch calling SetOpenVol"
	ec 	REP_CSWITCH_SWAPVOLIDS, 
		"CompleteAndSwitch calling SWAPVOLIDS"
	ec 	REP_CSWITCH_GETSTATUS, 
		"CompleteAndSwitch calling GETSTATUS"
	ec 	REP_CSWITCH_SYNC, 
		"CompleteAndSwitch calling SYNC(1)"
	ec 	REP_CSWITCH_SYNC_2, 
		"CompleteAndSwitch calling SYNC(2)"
	ec 	REP_CSWITCH_CLOSE, 
		"CompleteAndSwitch calling CLOSE(1)"
	ec 	REP_CSWITCH_CLOSE_2, 
		"CompleteAndSwitch calling CLOSE(2)"
	ec 	REP_CSWITCH_STATES, 
		"CompleteAndSwitch: Got states for LV %lu,,%lu: %#lx"
	ec	REP_CHECKVLDB_ACTNOW, 
		"CheckWithVLDB signals actNowCond"
	ec	REP_INCOMP_VOL, 
		"Found incomplete volume %lu,,%lu"
	ec	REP_PRBUNDLE_ATTN,
		"ProcessBundle() handles %d Attns."
	ec	REP_BFETCH_VV, 
		"BulkFetchVV result: %ld"
	ec 	REP_STIMPORT_ATTN, 
		"StartImporting(): %d replicas want attention"
	ec	REP_RFRSH_LASTCALL,
		"[%lu,,%lu] Refreshing primary's last-call time"
	ec	REP_GETTIME,
		"GetTime result: %ld"
	ec	REP_CVLDBREL_ACTNOW, 
		"CheckVLDBRelationship signals actNowCond"
	ec	REP_SREP_PROBE,
		"%s: REP_Probe called"
	ec	REP_CHECK_REP, 	
		"%s: REP_CheckReplicationConfig called"
	ec	REP_ALLCHECK_REP, 	
		"%s: REP_AllCheckReplicationConfig called"
	ec	REP_GETSERVER_INT, 
		"%s: REP_GetServerInterfaces called"
	ec	REP_BKEEP_ALIVE,
		"BundleKeepAlives: %d on this pass"
	ec	REP_BKEEP_ALIVE_CALL,
		"BundleKeepAlives(%lu,,%lu): calling %s: %ld fexs, %ld executing"
	ec	REP_BKEEP_ALIVE_RET,
		"BundleKeepAlives: retval %ld"
	ec	REP_PRUNE_AND_CHECK_KALIVE,
		"PruneAndCheckKA(%lu,,%lu): from %lu to %lu used"
	ec	REP_FKEEP_ALIVE_CALL,
		"%s: ForceKeepAlive() called"
	ec	REP_FREE_VOL_CHANGED,
		"[%lu,,%lu] Freeing volChanged %lu,,%lu -> %lu,,%lu, %ld fids"
	ec	REP_BKGD_THREAD_INITMUTEX,
		"Background thread spawned: checking initialization mutex"
	ec	REP_BKGD_THREAD_INITMUTEX_LOOP,
		"Background thread passed check on initialization mutex.  Looping"
	ec	REP_RENEW_TKNS_SLEEP, 
		"bkg: RenewTokens sleeps %ld secs"
	ec	REP_START_IMPORT_SLEEP, 
		"bkg: StartImporting sleeps %ld secs"
	ec	REP_FKEEP_ALIVE_SLEEP, 
		"bkg: ForceKeepAlives sleeps %ld secs"
	ec	REP_DOWILL_CALLS_SLEEP, 
		"bkg: DoWillCalls sleeps %ld secs"
	ec	REP_EXPVOL_CHANGES_SLEEP, 
		"bkg: ExpireVolChanges sleeps %ld secs"
	ec	REP_SLEEP_ACTNOW,
		"Sleeping for %lu seconds (on actNowCond)"
	ec	REP_TR_BKG,
		"bkg: now %lu, tgt %lu, %s: %s"
	ec	REP_KEEP_FALIVE_CALL, 
		"%s: REP_KeepFilesAlive called"
	ec	REP_KEEP_FALIVE_RET,
		"REP_KeepFilesAlive: got %lu fids, flags %lu"
	ec	REP_TR_KA_INFO,
		"Num/MaxKAs for %lu,,%lu: %lu, %lu (old max %lu)"
	ec	REP_TR_NOVOL,	
		"[%lu,,%lu] No vol for vsn %lu,,%lu"
	ec	REP_TR_MAKE_VCHANGE,
		"[%lu,,%lu] Making a volChanged object from %lu,,%lu to %lu,,%lu"
	ec	REP_GETREPSTAT_CALL,
		"%s: REP_GetRepStatus(%lu) called."
	ec	REP_GETVOLCHG_AGOPEN,
		"getVolChanged calling AGOPEN"
	ec 	REP_GETVOLCHG_SCAN,
		"getVolChanged calling SCAN"
	ec 	REP_GETVOLCHG_CLOSE,
		"getVolChanged calling CLOSE"
	ec 	REP_GETVOLCHG_CLOSE_FIN,
		"getVolChanged after CLOSE"
	ec	REP_GETVOLCHG_FILES, 
		"%s: REP_GetVolChangedFiles called."
	ec	REP_GETONE_REPSTAT_CALL,
		"%s: REP_GetOneRepStatus called"
	ec	REP_GETREP_SERVSTAT_CALL,
		"%s: REP_GetRepServerStatus called"
	ec	REP_DOUPDL_ACTNOW, 
		"rep_doUpdate signals actNowCond"
	ec	REP_UPDSELF_CALL,
		"%s: REP_UpdateSelf called"
	ec	REP_SPARE_1_CALL,
		"%s: REP_Spare1 called"
	ec	REP_SPARE_2_CALL,
		"%s: REP_Spare2 called"
	ec	REP_SPARE_3_CALL,
		"%s: REP_Spare3 called"
	ec	REP_LOGPRINT_MSG,
		"%s"
	ec	REP_FLDB_CONN_GET,
		"Got an FLDB connection object"
	ec	REP_CANT_DEPLETE_LVOL,
		"can't deplete incomplete local vol %lu,,%lu: %s"
	ec	REP_VLDB_ENT_FOUND, 
		"Found VLDB entry: %lu,,%lu"
	ec	REP_ALREADY_HANDLING,
		"...but we were already handling that one"
	ec	REP_CANT_OPEN_LVOL, 
		"can't open local vol %lu,,%lu: %s"
	ec	REP_CANT_GETSTAT_LVOL, 
		"can't get status for local vol %lu,,%lu: %s"
	ec	REP_CANT_CLOSE_LVOL, 
		"can't close local vol %lu,,%lu: %s"
	ec	REP_CANT_DESTROY_LVOL, 
		"can't destroy incomplete local vol %lu,,%lu: %s"
	ec	REP_GOT_STATES,
		"Got states for LV %lu,,%lu: %#lx"	
	ec	REP_CANT_CLOSEDEST_LVOL,
		"can't close local vol %lu,,%lu after destroying it: %s"
	ec	REP_LVOL_DESTROYED,
		"LV %lu,,%lu is destroyed"
	ec	REP_SCAN_AGGR,
		"%s: %d aggregates to scan"
	ec	REP_SKIP_NONLFS,
		"%s: skipping non-Episode aggregate %s, ID %ld, type %ld"
	ec	REP_SCAN_LFS,
		"%s: scanning aggregate %s, ID %ld, type %ld"
	ec	REP_GOT_LVOL_MANG,
		"%s: got a local volume to manage: id %lu,,%lu, name %s, states %#lx"
	ec	REP_SCAN_LVOL_FIN,
		"%s: done with scanning for local volumes.  Rationalizing..."
	ec	REP_RATNL_LVOL_FIN,
		"%s: done rationalizing local volumes"
	ec	REP_TR_ADD,
		"%s: adding %lu,,%lu due to discovered JUNK."
	ec	REP_TR_ATTACH,
		"%s: attaching junk %lu,,%lu to rep %lu,,%lu"
	ec	REP_ADD_DISC_VOL,
		"%s: adding %lu,,%lu (%lu,,%lu) due to a discovered volume."
	ec	REP_TR_2ADDR,
		"This machine has %d net address(es)."
	ec	REP_TR_MSG,
		"%s"
	ec 	REP_DOCALLS_CONNECT,
		"DoWillCalls: connecting to %s"
	ec	REP_DOCALLS_CONN_FAIL,
		"DoWillCalls: cannot connect to %s; errno=%d"
	ec	REP_DOCALLS_EXCEPTION,
		"DoWillCalls, flags %d: exception %s"
	ec	REP_DOCALLS_FAIL, 
		"DoWillCalls: %s (%s) failed: %s"
	ec	REP_TR_LISTEN_CALLS,
		"Listening for net calls (calling rpc_server_listen)"
	ec	REP_TR_LISTEN_THR_CREATE,
		"Starting the token-revocation listener thread"
	ec	REP_TR_REVOKE_SOCKET,
		"Revocation socket is: inet/%s/%d"
	ec	REP_ALLBINDING_PRINT,
		"%s: %d binding(s)"
	ec	REP_LOGPRINT_VOLMSG,
		"%lu,,%lu: %s"
	ec	REP_TRACE_NO_RW_ID,
		"%s: No R/W site for fileset %s"
	ec	REP_TRACE_NO_RO_PRIMARY_RELEASE,
		"Release-style replicated fileset %s, rw=%lu,,%lu, ro=%lu,,%lu, with no R/O on primary!"
	ec 	REP_TRACE_VLDB_ENTRY_DONE,
		"Interpreted vldb entry for %lu,,%lu (%s): %d reps, mySite=%d"
	ec	REP_TOKEN_REVOKE_LOSEWVT_CALL,
		"STKN_TokenRevoke: calling LoseWVT, fid %lu/%lu/%lu/%lu, id %lu,,%lu, type %#lx"

	ec	REP_TRACE_REPQ_INIT,
		"repq_Init(%#x)"
	ec	REP_TRACE_REPQ_ENTER,
		"repq_Enter(%#x, %#x, %lu)"
	ec	REP_TRACE_LEAVE_REPQ_ENTER,
		"repq_Enter returning %#x"
	ec	REP_TRACE_REPQ_DELETE,
		"repq_Delete(%#x, %#x)"
	ec	REP_TRACE_REPQ_DEFERRED_DELETE,
		"repq_Delete: item is in use--deferring the delete"
	ec	REP_TRACE_LEAVE_REPQ_DELETE,
		"repq_Delete returning"
	ec	REP_TRACE_REPQ_GET,
		"repq_Get(%#x)"
	ec	REP_TRACE_REPQ_GET_WAIT_FOREVER,
		"repq_Get: queue is empty--waiting indefinitely"
	ec	REP_TRACE_REPQ_GET_WAIT_FOR_DEADLINE,
		"repq_Get: waiting until %lu"
	ec	REP_TRACE_LEAVE_REPQ_GET,
		"repq_Get returning %#x, *outCookieP=%#x"
	ec	REP_TRACE_REPQ_PUT,
		"repq_Put(%#x, %#x, %lu)"
	ec	REP_TRACE_REPQ_DELETE_ON_PUT,
		"repq_Delete: performing deferred delete"
	ec	REP_TRACE_REPQ_PUT_SET_DEADLINE,
		"repq_Put: setting deadline to %lu"
	ec	REP_TRACE_LEAVE_REPQ_PUT,
		"repq_Delete returning"
	ec	REP_TRACE_REPQ_RESET_DEADLINE,
		"repq_ResetDeadline(%#x, %#x, %lu)"
	ec	REP_TRACE_REPQ_DEFERRED_RESET,
		"repq_ResetDeadline: item is in use"
	ec	REP_TRACE_LEAVE_REPQ_RESET_DEADLINE,
		"repq_ResetDeadline returning"
	ec	REP_TRACE_REPQ_WAKEUP_WAITERS,
		"repq: waking up waiters"
	ec	REP_TRACE_REPH_GET_HOST,
		"reph_GetHost(%s, %lu, %s)"
	ec	REP_TRACE_LEAVE_REPH_GET_HOST,
		"reph_GetHost returning %#x"
	ec	REP_TRACE_REPH_PUT_HOST,
		"reph_PutHost(%#x [%s])"
	ec	REP_TRACE_REPH_GET_CONN,
		"reph_GetConn(%#x [%s], %lu)"
	ec	REP_TRACE_LEAVE_REPH_GET_CONN,
		"reph_GetConn returning %lu, *outConnPP=%#x"
	ec	REP_TRACE_REPH_RESET_CONN,
		"reph_ResetConn(%#x [%s], %#x, %lu)"
	ec	REP_TRACE_REPH_REFRESH_AUTH_FAILED,
		"reph_ResetConn: failed to refresh auth context, code=%ld"
	ec	REP_TRACE_REPH_RESET_CONN_FAILED,
		"reph_ResetConn: reset failed, code=%ld"
	ec	REP_TRACE_LEAVE_REPH_RESET_CONN,
		"reph_ResetConn returning %lu, *callersConnPP=%#x"
	ec	REP_TRACE_REPH_PUT_CONN,
		"reph_PutConn(%#x)"
	ec	REP_TRACE_REPH_PUT_CONN_INTO_GRAVE,
		"reph_PutConn: losing last reference--destroying connection"
	ec	REP_TRACE_REPH_MERGE_SUCCESS,
		"reph_MergeSuccess: last success at %lu"
	ec	REP_TRACE_REPH_SET_NEW_CONN,
		"SetNewConn(%#x [%s], %#x, %lu)"
	ec	REP_TRACE_REPH_AWAITING_SET_CONTEXT,
		"SetNewConn: Waiting for racing set context"
	ec	REP_TRACE_LEAVE_REPH_SET_NEW_CONN,
		"SetNewConn returning %lu, *connPP=%#x"
	ec	REP_TRACE_REPH_TRY_ANOTHER_ADDRESS,
		"SetNewConn: Trying another address (#%lu), reason=%lu"
	ec	REP_TRACE_REPH_SET_CONTEXT,
		"SetContext(%#x [%s], %#x)"
	ec	REP_TRACE_LEAVE_REPH_SET_CONTEXT,
		"SetContext returning %lu"
	ec	REP_KEEP_FALIVE_HUNK,
		"REP_KeepFilesAlive: cell %lu,,%lu, vol %lu,,%lu, [%d..%d)"
	ec	REP_KEEP_FALIVE_HUNKRP,
		"REP_KeepFilesAlive: matched replica %#lx"
	ec	REP_BKEEP_ADDING,
		"BundleKeepAlives: adding %x.%x.%x.%x with dally %d, exec %d"
	ec	REP_BKEEP_SENTTRACK,
		"BundleKeepAlives: %d,,%d (%x, %x) sent, flags now %#lx"
	ec	REP_BKEEP_RECALL,
		"BundleKeepAlives: %d,,%d (%x, %x) reduces next-call time to %d;"
	ec	REP_BKEEP_RECALL_2,
		"....got req at %d, dally %d secs, last sent at %d"
	ec	REP_STARTIMPORT_BEG,
		"StartImporting rp=%#lx look=%lu flags=%#lx"
	ec	REP_WANTSADV_BEG,
		"WantsAdvance look=%lu now=%lu"
	ec	REP_WANTSADV_KNOWVLDB,
		"WantsAdvance know VLDB"
	ec	REP_WANTSADV_JDZ,
		"WantsAdvance junked, deleted or zapped done"
	ec	REP_WANTSADV_ELIMJUNK,
		"WantsAdvance eliminated junk"
	ec	REP_WANTSADV_A,
		"WantsAdvance (A) P=%#lx"
	ec	REP_WANTSADV_B,
		"WantsAdvance (B) B=%#lx"
	ec	REP_WANTSADV_FM,
		"WantsAdvance (F) (M) P=%lx"
	ec	REP_WANTSADV_IJ,
		"WantsAdvance (I) (J) WVTLeft=%#lx,%#lx now=%lu look=%lu"
	ec	REP_WANTSADV_HAVE_WVT_OK_START,
		"WantsAdvance have WVT, ok start P=%#lx B=%#lx"
	ec	REP_WANTSADV_G,
		"WantsAdvance (G) next=%lu"
	ec	REP_WANTSADV_MAYBE_NO_WVT,
		"WantsAdvance maybe no WVT look=%lu next=%lu"
	ec	REP_WANTSADV_BOTTOM,
		"WantsAdvance bottom next=%lu"
	ec	REP_TRACE_CLONELOCAL_RWOPENED,
		"CloneLocalReplica: opened R/W %lu,,%lu as %d: getting status"
	ec	REP_TRACE_CLONELOCAL_RWGOTSTAT,
		"CloneLocalReplica: got R/W %lu,,%lu status; problem states = %#lx"
	ec	REP_TRACE_CLONELOCAL_GOING,
		"CloneLocalReplica: R/W %lu,,%lu, Pub=%#lx; cloning/recloning."
	ec	REP_TRACE_CLONELOCAL_GONE,
		"CloneLocalReplica: R/W %lu,,%lu; clone/reclone done; getting stat of R/O %lu,,%lu"
	ec	REP_TRACE_CLONELOCAL_FIXED,
		"CloneLocalReplica: fixing states of R/O %lu,,%lu, from %#lx to %#lx"
	ec	REP_TRACE_RECORDCALLER_FAIL,
		"recordCaller(SREP_%s): inq_auth_caller failed with %d"
	ec	REP_TRACE_RECORDCALLER_OK,
		"recordCaller(SREP_%s): called us %s, with svc %d, level %d"
	ec	REP_TRACE_PRINC_FROMPRIM,
		"getPrincName(%x): got %s (from primary for %s)."
	ec	REP_TRACE_PRINC_VLERR,
		"getPrincName(%x): err %d from VL_GetSiteInfo."
	ec	REP_TRACE_PRINC_FROMFLDB,
		"getPrincName(%x): got %s from FLDB."
	ec	REP_DOCALLS_PRINC_FAIL,
		"DoWillCalls: cannot connect to %s; cannot get correct principal"
	ec	REP_DOCALLS_AUTH_FAIL,
		"DoWillCalls: cannot connect to %s with princ '%s'; auth code %d"
	ec	REP_TRACE_PRINC_DUPLICATE,
		"getPrincName(%x): re-validates old entry '%s'."
end

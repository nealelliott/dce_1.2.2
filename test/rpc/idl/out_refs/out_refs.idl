/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: out_refs.idl,v $
 * Revision 1.1.4.2  1996/03/11  02:16:05  marty
 * 	Update OSF copyright years
 * 	[1996/03/10  19:54:15  marty]
 *
 * Revision 1.1.4.1  1995/12/11  19:26:34  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/11  19:14:22  root]
 * 
 * Revision 1.1.2.2  1993/01/07  20:36:35  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/06  13:37:33  bbelch]
 * 
 * Revision 1.1  1992/01/19  03:25:50  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/*
*/
/*	
** This interface tests all possible kinds of out types by ref
** (that I can think of anyway).  
*/
[uuid(19dab200-2baa-11c9-b790-08002b13d56d)] interface out_refs
{
    /* Constant values to be returned by the operations */
    const boolean boolean_return_val = TRUE; 
    const char char_return_val = 'N'; 
    const unsigned small byte_return_val = 0xC1;
    const long float_return_val = 177;
    const long double_return_val = 399;
    const small small_return_val = 127;
    const short short_return_val = 32767;
    const long long_return_val = 0XFF1234FF;
    const unsigned long hyper_low_return_val = 0x01ABCDEF;
    const unsigned long hyper_high_return_val =0x2345789A;
    const unsigned  small usmall_return_val = 0xFA;
    const unsigned  short ushort_return_val = 0xFACD;
    const unsigned  long  ulong_return_val = 0xFACE0ff1;
    const unsigned  long uhyper_low_return_val = 0xDEC12DEC;
    const unsigned  long uhyper_high_return_val = 0x1ABC2ABD;


    /* context handle for use below */
    typedef [context_handle] void *context_handle_t;


    /* Various types to be returned as the function value */
    const   long    fixed_array_size = 3;
    typedef long    fixed_array_t[fixed_array_size];
    const   long    varying_array_size = 2;
    typedef long    varying_array_t[fixed_array_size];
    const   long    conformant_array_size = 8;
    typedef long    conformant_array_t[];
    typedef long    varying_conformant_array_t[];

    

    typedef struct {
	long	size;
	fixed_array_t	arr;
	} fixed_struct_t;

    typedef struct {
	long	size;
	[last_is(size)] varying_array_t	arr;
	} varying_struct_t;

    typedef struct {
	long	size;
	[max_is(size)] conformant_array_t	arr;
	} conf_struct_t;

    typedef struct {
	long	size;
	long	used;
	[max_is(size),last_is(used)] varying_conformant_array_t	arr;
	} var_conf_struct_t;


    /* operations returning the various base types */
    void comm_status_t_op     ([out] error_status_t       *a);
    void context_handle_op    ([out] context_handle_t     *a);
    void boolean_op           ([out] boolean              *a);
    void char_op([out] char                        *a);
    void byte_op([out] byte                        *a);           
    void float_op([out] float                       *a);          
    void double_op([out] double                      *a);                   
    void small_op([out] small                       *a);                    
    void short_op([out] short                       *a);                    
    void long_op([out] long                        *a);                     
    void hyper_op([out] hyper                       *a);                    
    void usmall_op([out] small unsigned           *a);           
    void ushort_op([out] short unsigned           *a);           
    void ulong_op([out] long  unsigned            *a);            
    void uhyper_op([out] hyper unsigned           *a);           


    /* operations returning complicated results */
    void fixed_array_t_op([out] fixed_array_t *a);
    void fixed_struct_t_op([out] fixed_struct_t *a);
    void varying_struct_t_op([out] varying_struct_t *a);
    void conformant_struct_t_op([in,out] conf_struct_t *a);
    void varying_conformant_struct_t_op([in,out] var_conf_struct_t *a);

/*
		enum
		bitset
		pointer to context handle
		pointer to boolean
		pointer to char
		pointer to byte
		pointer to float
		pointer to double
		pointer to small
		pointer to short
		pointer to long
		pointer to hyper	
		pointer to unsigned small
		pointer to unsigned short
		pointer to unsigned long
		pointer to unsigned hyper	
		pointer to array
		pointer to union
		pointer to struct
		pointer to conformant struct
		pointer to varying struct
		pointer to conformant, varying struct

*/


}

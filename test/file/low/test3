#!/bin/sh

#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test3,v $
# Revision 1.1.10.1  1996/10/17  18:30:27  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:55:18  damon]
#
# Revision 1.1.4.5  1993/01/11  18:36:00  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:19:00  htf]
# 
# Revision 1.1.4.4  1992/10/28  18:15:03  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    Use testhome when referencing C executables.
# 	Transarc delta: jess-add-dumpkernel-in-low-tests 1.5
# 	  Selected comments:
# 	    Add function call (icl_DumpKernel) in the test suite. In case of running
# 	    error of C programmes in the test suite the "icl_DumpKernel" function
# 	    will be called in errex() to do the kernel trace. The dump file is located
# 	    in "/tmp/prog#.kernel.dump.pid". You have to have the debug flag set to
# 	    have the dump file.
# 	    See above.
# 	    Process another C file and add "low" as dump file header.
# 	    Turn on the prog3 debug flags.
# 	    It should not create the zero length dumpfile when there is nothing wrong.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/28  14:54:29  jaffe]
# 
# Revision 1.1.4.3  1992/09/25  17:31:28  jaffe
# 	Transarc delta: jess-ot5196-low-test-err-redirection 1.1
# 	  Selected comments:
# 	    Redirect stderr to stdout from running programs of low/tests
# 	    Put 2>&1 at end of cprog calling line.
# 	[1992/09/24  12:51:28  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:17:47  jaffe
# 	Transarc delta: jaffe-ot4902-dont-cat-the-world-in-low-test3 1.1
# 	  Selected comments:
# 	    don't bother to flush the buffer cache if we are doing normal tests.
# 	    provide a -flush option to test3 which will do the full flush.
# 	    add a -flush flag to flush the buffer cache before the second read in test3b.
# 	Transarc delta: mcinerny-fix-merge-makefile-refs-wrong-files 1.5
# 	  Selected comments:
# 	    (see below)
# 	    Couple of typos
# 	    Fixed one typo & one real error.  Thanks Bruce.
# 	    Couple of minor changes to get tests running more smoothly.
# 	Transarc delta: rajesh-clean-low-tests 1.5
# 	  Selected comments:
# 	    To remove make and clean options from the low test suite. To change
# 	    the scripts to use common shell functions. To create a file
# 	    fs_functionsScript with the common shell functions in the util
# 	    directory.
# 	    To remove make and clean options. To change the scripts to use common
# 	    shell functions from util/fs_functionsScript instead of inline code.
# 	    Modify scripts to follow coding standards, simplify the code, increase
# 	    readability etc.
# 	    No changes yet
# 	    More of above.
# 	    Modify the tests to give them a simpler logical structure, modularity,
# 	    readability ( one command per line) and to change then to use the
# 	    common function created earlier.
# 	    See above.
# 	    Modification of rtest1 and rtest2 to use the utility functions
# 	    correctly.
# 	[1992/08/28  12:35:30  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  23:00:30  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/29  13:06:10  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:50:48  jaffe
# 	Transarc delta: fred-merge-tests 1.1
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test3,v $
# 	Revision 4.25  1994/11/01  22:32:27  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.24 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  20:57:34  jaffe]
# 
# $EndLog$
#
###############################################################################
#    Copyright (C) 1990, 1992 Transarc Corporation - All rights reserved      #
###############################################################################

# This script runs a C program which makes read() and write() calls under a
# variety of conditions - I/O blocksize is varied, and file offsets are varied
# in order to test operations that span more than one physical or logical
# block. Various truncate() calls are also tested.

# In case of error the C program will dump the kernel data into
# a file "/tmp/prog#.kernel.dump.pid" if the debug flag is on.

# Usage is:  test3 [-processCount #-procs] [-nt #-times] [-s filesize] 
# Default is test3 -processCount 1 -nt 1 -s 104
# Note that the filesize is in units of kilobytes (1024 bytes per kilobyte);
# the argument must be a multiple of 8.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName tests C I/O calls"
    echo "$programName times read/write/truncate calls"
    echo "Usage: $programName [-np #-procs] [-nt #-times] [-s filesize] [-flush]"
    echo "       -flush indicates flushing a buffer cache in test3b (Read)."
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}
if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/low
fi

. $UTIL_DIR/fs_FunctionsScript

trap '
    cd $currentDir; 
    rm -rf $programName.*.out $programName.$$.*
    echo "$programName killed; returning 2" | tee -a $logFile; 
    exit 2
     ' 2 3 15

fs_InitSetup low

#
# Default values for the command line options
#

processCount=1; 
iterationCount=1; 
fileSize=104; 
flush_flag=0;

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage;
                    exit $successExit;
                    ;;

        np|-np)     CheckOptionValue "np" $testSuiteType $programName $*;
                    processCount=$2;
                    shift; 
                    shift;
                    ;;

        nt|-nt)     CheckOptionValue "nt" $testSuiteType $programName $*;
                    iterationCount=$2;
                    shift; 
                    shift;
                    ;;

        s|-s)       CheckOptionValue "s" $testSuiteType $programName $*;
                    fileSize=$2;
                    shift;
                    shift;
                    ;;

	flush|-flush) flush_flag=1;
		    shift;
		    ;;

        *)      echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile; 
                    exit $scriptErrExit
                    ;;
    esac
done
            
#
# Validate arguments
#

if [ $processCount -lt 0 ]
then 
    echo "$programName: number of processes must be >= 0" | tee -a $logFile; 
    exit $scriptErrorExit
elif [ $iterationCount -lt 1 ]
then 
    echo "$programName: number of times must be >= 1" | tee -a $logFile; 
    exit $scriptErrorExit
elif [ $fileSize -lt 0 ]
then 
    echo "$programName: filesize cannot be negative" | tee -a $logFile; 
    exit $scriptErrorExit
fi

###############################################################################

fs_CheckBinaryExistence $testhome/${cProgramName}a
fs_CheckBinaryExistence $testhome/${cProgramName}b
fs_CheckBinaryExistence $testhome/${cProgramName}c

###############################################################################

#
# Start test
#

(
    echo "$programName (rd/wr) starting in $currentDir"; 
    echo "Host `hostname` ($fs_sysName)"; 
    date
) |    tee -a $logFile

echo "Filesize $fileSize 1024-byte blocks" | tee -a $logFile
echo "$processCount processes, parent process number $$, $iterationCount times" | tee -a $logFile
fs_DetermineFSType
processNum=1

while [ $processNum -le $processCount ]
do
    echo "$programName starting process number $processNum" | tee -a $logFile
    (
        mkdir $programName.$$.$processNum; 
        cd $programName.$$.$processNum
        iterationNum=1
        while [ $iterationNum -le $iterationCount ]
        do
            echo "Process $processNum iteration $iterationNum running ${cProgramName}a" | tee -a $logFile
            $testhome/${cProgramName}a $fileSize >> $currentDir/$programName.$processNum.out 2>&1; 
            result=$?
            if [ $result -ne 0 ]
            then 
                echo "- ERROR: process $processNum iter $iterationNum ${cProgramName}a returned $result" >> $currentDir/$programName.$processNum.out
                errorCount=1
            elif [ ! -f tfile.3 ]
            then 
                echo "- ERROR: process $processNum iter $iterationNum cannot read file" >> $currentDir/$programName.$processNum.out
                 errorCount=1
            else
                echo "Process $processNum iteration $iterationNum running ${cProgramName}b" | tee -a $logFile
                if [ $processCount -gt 1 -o $flush_flag -eq 0 ]    
                then 
                    fflag=""; 
                else 
                    fflag="-flush"; 
                fi
                $testhome/${cProgramName}b $fflag >> $currentDir/$programName.$processNum.out 2>&1; 
                result=$?
                if [ $result -ne 0 ]
                then 
                    echo "- ERROR: process $processNum iter $iterationNum ${cProgramName}b returned $result" >> $currentDir/$programName.$processNum.out
                    errorCount=1
                else
                    echo "Process $processNum iteration $iterationNum running ${cProgramName}c" | tee -a $logFile
                    $testhome/${cProgramName}c >> $currentDir/$programName.$processNum.out 2>&1; 
                    result=$?
                    if [ $result -ne 0 ]
                    then 
                        echo "- ERROR: process $processNum iter $iterationNum ${cProgramName}c returned $result" >> $currentDir/$programName.$processNum.out
                        errorCount=1
                    fi
                fi
            fi
            if [ $errorCount -eq 0 ]
            then 
                rm -f tfile.3 wcfile; 
            else 
                iterationNum=100;
            fi
            iterationNum=`expr $iterationNum + 1`
        done
    ) &
   processNum=`expr $processNum + 1`
done

###############################################################################

wait

processNum=1
while [ $processNum -le $processCount ]
do
   (echo ""; cat $currentDir/$programName.$processNum.out; echo "") | tee -a $logFile
   grep -s 'ERROR' $programName.$processNum.out 2> /dev/null
   if [ $? -ne 1 ]
   then
        echo "$programName process $processNum failed" | tee -a $logFile; 
        errorCount=1
   else 
        echo "$programName process $processNum results OK" | tee -a $logFile
   fi
   processNum=`expr $processNum + 1`
done

###############################################################################


#
# Remove temporary file created by the test. (Previously done in -clean option)
#

(
    echo "$programName cleaning up" ; 
    date 
) | tee -a $logFile

rm -rf $programName.*.out $programName.$$.* $programName.[0-9]*.[0-9]*

(
    echo ""; 
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"; 
    date
) | tee -a $logFile

exit $errorCount

###############################################################################

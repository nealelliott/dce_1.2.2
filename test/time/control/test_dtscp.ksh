#!/bin/ksh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: test_dtscp.ksh,v $
# Revision 1.1.10.2  1996/03/11  02:50:30  marty
# 	Update OSF copyright years
# 	[1996/03/10  20:11:02  marty]
#
# Revision 1.1.10.1  1995/12/11  23:05:55  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/5  1995/09/18  18:01 UTC  pare
# 	Merge changes back to HPDCE02
# 
# 	HP revision /main/HPDCE02/pare_MOTHRA/1  1995/09/18  15:12 UTC  pare
# 	Add sleep 10 after change epoch command -- cell timing issue
# 
# 	HP revision /main/HPDCE02/4  1995/05/26  17:27 UTC  pare
# 	Merge changes
# 
# 	HP revision /main/HPDCE02/pare_mothra/1  1995/05/26  17:21 UTC  pare
# 	Add change epoch command
# 
# 	HP revision /main/HPDCE02/3  1994/11/01  19:08 UTC  pare
# 	Place expected and actual file in /tmp.
# 
# 	HP revision /main/HPDCE02/2  1994/11/01  15:48 UTC  pare
# 	Merge in hpdce02_05 changes
# 
# 	HP revision /main/HPDCE02/1  1994/06/30  18:50 UTC  pare
# 	Merge hpdce02 (DCE 1.1 beta) and HPDCE01 into HPDCE02
# 	[1995/12/11  22:43:48  root]
# 
# Revision 1.1.7.2  1994/06/10  20:51:26  devsrc
# 	cr10872 - fixed copyright
# 	[1994/06/10  17:20:12  devsrc]
# 
# Revision 1.1.7.1  1994/04/21  22:04:48  cbrooks
# 	CR 3231 - remote interface
# 	[1994/04/21  20:10:51  cbrooks]
# 
# 	HP revision /main/HPDCE01/1  1994/02/01  14:46  pare
# 	merge kk and hpdce01
# 
# Revision 1.1.4.2  1993/07/09  17:22:36  root
# 	Initial King Kong branch
# 	[1993/07/09  17:22:11  root]
# 
# Revision 1.1.2.4  1993/05/26  15:23:20  truitt
# 	Added a check for the synchronizing/on problem for dts clerks.
# 	If the only difference between the actual and expected output
# 	files are synchronizing/on state differences, then the test
# 	will still pass.  This is a quickie hack, and a better solution
# 	is in progress.
# 	[1993/05/26  15:22:58  truitt]
# 
# Revision 1.1.2.3  1993/04/16  17:39:07  truitt
# 	Put under TET.
# 	[1993/04/16  17:38:46  truitt]
# 
# Revision 1.1.2.2  1993/04/15  19:02:46  truitt
# 	Initial revision.
# 	[1993/04/15  19:01:50  truitt]
# 
# $EndLog$
#
# This test fully tests the command syntax interface of the dtscp
# time control program, and tests the internal functionality which
# can be tested without upsetting a running system.
#
# This script calls the dtscp.ksh script, and redirects the output
# into an output file.  The data in that file is then
# compared with the data in an expected output file to check for
# any differences.
#
# If there are no differences, a few more quick dtscp commands are
# sent to the screen to verify some things that cannot be done using
# an expected output file.  If the actual-to-expected files were no
# different, and no errors were generated by the rest of the dtscp
#commands, then the test has passed.
#
# NOTE
#
# THE ENVIRONMENT THAT THIS TEST IS RUN IN IS VERY IMPORTANT.  IT IS
# CURRENTLY DESIGNED TO RUN IN A TWO NODE CELL, WHERE ONE NODE IS A
# DTS LOCAL SERVER, AND THE OTHER IS A DTS CLERK.  THERE ARE TWO
# EXPECTED OUTPUT FILES, ONE IF THE TEST IS RUN ON A SERVER, AND THE
# OTHER IF IT IS RUN ON A CLERK.
#
# FAILURE TO RUN IN THIS CONFIGURATION WILL RESULT IN SPURIOUS ERRORS
# AND FALSE NEGATIVES.
tet_startup="startup"
tet_cleanup="cleanup"
iclist="ic1"
ic1="test_dtscp"

startup()
{
   tet_infoline "START DCE time functional test: ${TET_PNAME}; DATE: `date`"
   return
}

test_dtscp()
{
   typeset thehost=""
   dts_command="dtscp "
   case $# in 
      1) thehost=$1 
	 dts_command="dtscp -h $thehost"
      ;;
   esac
   WHOAMI=`whoami`
   if [[ $WHOAMI != "root" ]]; then
      tet_infoline "You must be root to run this test"
      print "FAILED, Test 1 "TEST_DTSCP" : test ran unsuccessfully"
      tet_result FAIL
      return
#      echo "You must be root to run this test"
#      echo "FAILED, Test 1 "TEST_DTSCP" : test ran unsuccessfully"
#      return 1
       :  
   fi

   if [[ $NODE_TYPE != "server" && $NODE_TYPE != "clerk" ]]; then
      tet_infoline "You must specify whether test is run on a 'server' or 'clerk'"
      print "FAILED, Test 1 "TEST_DTSCP" : test ran unsuccessfully"
      tet_result FAIL
      return
   fi

   tet_infoline "The value of NODE_TYPE is $NODE_TYPE"

   FAIL=0
      if [[ "$thehost" != "" ]] ; then
         HOSTNAME="$thehost"
         DCMD="dtscp -h $HOSTNAME"
      else
         HOSTNAME=`uname -n`
	 DCMD="dtscp"
      fi

      if [[ "X${machinetype}" = "X" ]] ; then
         MACHINE=`uname`
      else
         MACHINE=${machinetype}
      fi

      case $MACHINE in
         AIX)      ADJ_RATE=10000000 ;;
	 OSF1)     ADJ_RATE=10000000 ;;
	 HP-UX)    ADJ_RATE=40000000 ;;
	 *)        ADJ_RATE=10000000 ;;
      esac

   tet_infoline "Testing $NODE_TYPE functionality on $HOSTNAME running $MACHINE"

   #
   # this is non-optimal
   #
   ${dts_command} change epoch 1 > /dev/null 2>&1
   sleep 10
   ${dts_command} change epoch 0 > /dev/null 2>&1
   sleep 10
   NEXT_TDF=`${dts_command} show next tdf change | awk '{printf $5}'`
   LOCAL_TDF=`${dts_command} show Local Time Differential Factor | awk '{printf $6}'`
   export DIF_NAME="/tmp/test_dtscp.diff"
   export ACT_NAME="/tmp/test_dtscp.act"
   if [[ $NODE_TYPE = "server" ]]; then
      export EXP_NAME="/tmp/test_dtscp_server.exp"
      sed -e s/__SERVERNAME__/$HOSTNAME/g \
	  -e s/__ADJUSTRATE__/$ADJ_RATE/g \
	  -e s/__NEXTTDFCHANGE__/$NEXT_TDF/g \
	  -e s/__LOCALTDFCHANGE__/$LOCAL_TDF/g \
	  -e "s/^dtscp/$DCMD/g" \
	  test_dtscp_server.templ > $EXP_NAME
   else
      export EXP_NAME="/tmp/test_dtscp_clerk.exp"
      sed -e s/__ADJUSTRATE__/$ADJ_RATE/g \
          -e s/__NEXTTDFCHANGE__/$NEXT_TDF/g \
	  -e s/__LOCALTDFCHANGE__/$LOCAL_TDF/g \
	  -e "s/^dtscp/$DCMD/g" \
	  test_dtscp_clerk.templ > $EXP_NAME
   fi

   if [[ ! -s $EXP_NAME ]] ; then
      echo "$EXP_NAME not created!" >&2
      exit 1
   fi

   tet_infoline "Begin test of dtscp command structure (`date`)"
   if [[ $NODE_TYPE = "server" ]]; then
      tet_infoline "You are running this test on a dts local server (right?)"
   else
      tet_infoline "You are running this test on a dts clerk (right?)"
   fi
   tet_infoline "Actual output is in file $ACT_NAME"
   tet_infoline "Expected output is in file $EXP_NAME"
   tet_infoline "Differences between the two are in file $DIF_NAME"

   ./dtscp.ksh $NODE_TYPE > ${thehosts} > $ACT_NAME 2>&1

   tet_infoline "Compare actual output to expected output"
   diff $ACT_NAME $EXP_NAME > $DIF_NAME 2>&1
   if [[ $? = 0 ]]; then
      FAIL=0
      tet_infoline "Actual output matches expected output"
   else
      FAIL=1
      tet_infoline "ERROR: Actual output does not match expected output"
   fi

   tet_infoline "Execute variable commands"

   ${dts_command} show creation time > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show creation time failed"
   fi
   ${dts_command} SHO CRE TIM > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO CRE TIM failed"
   fi

   ${dts_command} show too few servers detected > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show too few servers failed"
   fi
   ${dts_command} SHO TOO FEW SER DET > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO TOO FEW SER DET failed"
   fi

   ${dts_command} show last synchronization > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show last synchronization failed"
   fi
   ${dts_command} SHO LAS SYN > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO LAS SYN failed"
   fi

   if [[ $NODE_TYPE = "clerk" ]]; then
      ${dts_command} show synchronizations completed > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp show synchronizations completed failed"
      fi
      ${dts_command} SHO SYN COM > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp SHO SYN COM failed"
      fi

      ${dts_command} show local server > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp show local server failed"
      fi
      ${dts_command} SHO LOC SER > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp SHO LOC SER failed"
      fi
   fi

   ${dts_command} show current time > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show current time failed"
   fi
   ${dts_command} SHO CUR TIM > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO CUR TIM failed"
   fi

   if [[ $NODE_TYPE = "server" ]]; then
      ${dts_command} show uid > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp show uid failed"
      fi
      ${dts_command} SHO UID > /dev/null 2>&1
      if [[ $? != 0 ]]; then
         FAIL=1
         tet_infoline "ERROR: Command dtscp SHO UID failed"
      fi
   fi

   ${dts_command} show all counters > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show all counters failed"
   fi
   ${dts_command} SHO ALL COU > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO ALL COU failed"
   fi

   ${dts_command} show all status > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp show all status failed"
   fi
   ${dts_command} SHO ALL STA > /dev/null 2>&1
   if [[ $? != 0 ]]; then
      FAIL=1
      tet_infoline "ERROR: Command dtscp SHO ALL STA failed"
   fi

   if [[ $FAIL = 0 ]]; then
      print "PASSED, Test 1 "TEST_DTSCP" : test ran successfully"
      tet_result PASS
   else
      print "FAILED, Test 1 "TEST_DTSCP" : test ran unsuccessfully"
      tet_result FAIL
   fi

   tet_infoline "Test completed (`date`)"
}

cleanup()
{
   tet_infoline "END DCE time functional test: ${TET_PNAME}; DATE: `date`"
}

usage_error()
{
   echo "Usage: ${progname} {server|clerk} [remote_hostname ] [machine type]" >&2
   exit 1 
}

. ${TET_ROOT:?}/lib/ksh/tcm.ksh
progname="$(basename $0)"
roletype=
remhost=
machinetype=
case $# in 
3)
   roletype=$1
   remhost=$2
   machinetype=$3
   ;;
2)  
   roletype=$1 
   remhost=$2
   ;;
1)
  case $1 in 
    server|clerk)
	roletype=$1
        ;;
    *) 
	usage_error
       ;;
  esac 			# 1 args 
  ;;
*) 
  usage_error
  ;;
esac	# all args 

NODE_TYPE=${roletype}

if [ "X${remhost}" != "X" ]		# there is a hostname 
then
  getip "${remhost}" >/dev/null 2>&1	# does it exist?
  case $? in 
     0)			# looks like it 
  	;;
     *)
 	echo "Unknown host: $remhost" >&2 
        exit 1 
        ;;
  esac
fi
test_dtscp $remhost 




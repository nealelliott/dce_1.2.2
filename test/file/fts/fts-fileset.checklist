AGGRINFO

- Get aggrinfo for all aggregates on a server
- Get aggrinfo for a particular aggregate on a server
- Get aggrinfo for a server with less than FTSERVER_MAXAGGR (30) aggrs
- Get aggrinfo for a server with exactly FTSERVER_MAXAGGR aggrs
- Get aggrinfo for a server with exactly (FTSERVER_MAXAGGR * 1.5) + 5 aggrs
- Get aggrinfo for a server with more than (FTSERVER_MAXAGGR * 1.5) + 5 aggrs

CLONE

- Try clone of non-LFS fileset (fail)
- Clone when a backup fileset does not already exist
- Clone when a backup fileset does already exist
- Try clone where the addition of ".backup" to the fileset name will cause
  the name to overflow the maximum fileset name (fail)
- Cause conflicts with the read token that is held in CloneVolume()
- Clone a replicated fileset

CLONESYS

- Do a clonesys by specifying a server name
- Do a clonesys by specifying a server name and an aggregate name
- Do a clonesys by without specifying a server or aggregate name
- Do a clonesys by specifying a prefix
- Do a clonesys by specifying a prefix whose length is equal to 
  FTSERVER_MAXFSNAME
- Do a clonesys by specifying a prefix whose length is greater than
  FTSERVER_MAXFSNAME
- Do a clonesys that involves more than MAXBULKLEN (25) filesets
- Do a clonesys while having other threads create and delete filesets at
  full speed
- Do a clonesys while moving, dumping, restoring and/or cloning individual
  filesets
- Do a clonesys where a fileset has more than one read/write site on the
  same server (?)
- Do a clonesys where a fileset does not have a valid read/write site
- Do a clonesys involving non-LFS filesets exist

CREATE

- Try to create a fileset with a name ending in ".readonly" (fail)
- Try to create a fileset with a name ending in ".backup" (fail)
- Try to create a fileset whose name is equal to FTSERVER_MAXFSNAME - 9 (fail)
- Try to create a fileset whose name is greater than FTSERVER_MAXFSNAME - 9
  (fail)
- Try to create a fileset with name of "42ft" (?)
- Try to create a fileset with name of "42" (fail)
- Try to create a fileset with name of "42,,42" (fail)
- Try to create a fileset with name of "4294967290" (fail)
- Try to create a fileset with name of "4294967295" (fail)
- Try to create a fileset with name of "4294967296" (fail)
- Try to create a fileset with name of "4294967300" (fail)
- Try to create a fileset with a name that matches an existing FLDB entry
  (fail)
- Try to create a fileset on a non-LFS aggregate (fail)
- Try to create a fileset where the name is unique within the FLDB but not
  on the target aggregate

DELETE

- Try to delete a non-LFS fileset (fail)
- Try to delete a fileset whose FLDB entry is locked (fail)
- Delete a backup fileset
- Delete a backup fileset where the FLDB indicates that it exists
  without it actually being on the aggregate (fail)
- Try to delete a fileset that has a locally-mounted backup fileset

*** Find some way to exercise vldb_RemoveVolume()

- Delete a read-only fileset
- Try to delete a read-only replica (fail)
- Try to delete a locally-mounted read-only fileset (fail)
- Delete a read-only fileset where the FLDB indicates that it exists
  without it actually being on the aggregate (fail)
- Delete a read/write fileset
- Delete a read/write fileset whose FLDB entry indicates that it exists
  without it actually being on the aggregate (fail)
- Delete a fileset that has a backup fileset
- Delete a fileset that has a read-only copy
- Delete a fileset that is locally-mounted (fail)
- Delete a fileset whose backup is locally-mounted (fail)
- Attempt to delete a fileset where some other principal is holding 
  a non-revocable token that conflicts with TKN_UPDATE

DUMP

- Dump a readonly fileset
- Dump a backup fileset
- Try to dump a backup fileset that doesn't exist (but whose RW fileset does
  exist (fail)
- Dump without specifying a server
- Dump with a server specified
- Dump to a file
- Dump to standard output
- Cause conflicts with the read token that is held in VC_DumpVolume().
- Cause an exception while FTSERVER_Dump is executing (fail)
- Cause failure to write dump file (run out of space?) (fail)

LSAGGR

- Use numeric "dot-notation" for server argument
- Use numeric "dot-notation" for server argument specifying a "family"
- Use numeric "dot-notation" for server argument specifying an invalid
  "family" (fail)
- Use server name for server argument
- List aggrs for all aggregates on a server
- List aggrs for a particular aggregate on a server
- List aggrs for a server with less than FTSERVER_MAXAGGR (30) aggrs
- List aggrs for a server with exactly FTSERVER_MAXAGGR aggrs
- List aggrs for a server with exactly (FTSERVER_MAXAGGR * 1.5) + 5 aggrs
- List aggrs for a server with more than (FTSERVER_MAXAGGR * 1.5) + 5 aggrs

LSHEADER

- Do an lsheader without specifying an aggregate.
- Do an lsheader with an aggregate specified.
- Do an lsheader on an aggregate that contains less than
  FTSERVER_MAXSTATENTRIES (10) filesets
- Do an lsheader on an aggregate that contains exactly
  FTSERVER_MAXSTATENTRIES (10) filesets
- Do an lsheader on an aggregate that contains more than
  FTSERVER_MAXSTATENTRIES (10) filesets but less than 12 + 3 *
  FTSERVER_MAXSTATENTRIES (10)
- Do an lsheader on an aggregate that contains exactly 12 + 3 *
  FTSERVER_MAXSTATENTRIES (10) filesets
- Do an lsheader on an aggregate that contains more than 12 + 3 *
  FTSERVER_MAXSTATENTRIES (10) filesets

LSQQUOTA

- Do an lsquota without specifying any arguments
- Do an lsquota and specify a pathname
- Do an lsquota and specify a fileset name
- Do an lsquota and specify more than one pathname (with some not existing)
- Do an lsquota and specify a fileset name (with some not existing)
- Do an lsquota on a non-existent file
- Do an lsquota on a file outside of DFS
- Do an lsquota on a fileset that is over 90% full
- Do an lsquota on a fileset that is in an aggregate that is over 90%
  full
- Do an lsquota on a fileset that is over 90% full and that is in an
  aggregate that is also over 90% full

MOVE

- Move within the same aggregate
- Move within the same server but with different aggregates
- Move between servers
- Move between servers with different architecture/OS
- Try move where source aggr is non-LFS (fail)
- Try move where dest aggr is non-LFS (fail)
- Overflow creation quota on destination site
- Attempt move when another operation is in progress (fail, on the FLDB lock)
- Move with a backup present (both intra- and inter- server)
- Attempt move when RW fileset is missing (fail)
- Have fts finish a previous, partially-successful move, where the fileset
  has actually been moved to the destination, but the FLDB hasn't been updated.
- Try above scenario: once with the backup fileset and once with the RW
  fileset still mounted (locally) at the source location (fail)
- For a cross-server move, attempt once with RW fileset and once with
  backup fileset mounted locally (fail)
- Cause conflicts with the read token that is held in CloneVolume()

*** Investigate moves of replicated filesets.  In particular, check out
*** the code that sets `dumpCloneBits' before the call to CopyCloneVolume()
*** and figure out how to excercise the cases
  
- Ensure that failed moves cleanup both the temporary clone and the 
  destination fileset (no cleanup is done at present)
- Investigate (and excersize) surrogate ZLC tokens
- Exploit the fact that the target fileset is not held open throughout
  the entire operation by causing races with other fileset operations

RENAME

- Try to rename a fileset to a name ending in ".readonly" (fail)
- Try to rename a fileset to a name ending in ".backup" (fail)
- Try to rename a fileset to a name whose length is equal to
  FTSERVER_MAXFSNAME - 9 (fail) 
- Try to rename a fileset to a name whose length is greater than
  FTSERVER_MAXFSNAME - 9   (fail)
- Try to rename a fileset that is on a non-LFS aggregate
- Rename a fileset that has a backup fileset
- Rename a fileset that has a read-only fileset
- Rename a fileset that is replicated

RESTORE

- Try to restore from a non-existent dump file (fail)
- Restore both full and incremental dumps
- Restore a disjoint dump
- Restore without specifying a volId
- Try to restore while specifying a volId that matches a different fileset
 (fail)
- Restore while specifying a volId
- Try to restore to an existing fileset without specifying "-overwrite" (fail)
- Restore to an existing fileset (specify "-overwrite")
- Restore, creating a new fileset
- Restore from a file without permission to read it (fail)
- Try to restore from stdin when stdin is not valid (fail)
- Cause conflicts with the update token that is held accross the restore
- Restore a fileset that is replicated

RELEASE

- Try to release a fileset without setting replication info (fail)
- Try to release a fileset that is using scheduled replication (fail)
- Try to release a non-LFS fileset (fail)
- Try to release a fileset that is not a RW fileset (fail)
- Try to release a fileset with no read-only staging area on the local
  server (fail) 
- Do a release where the staging fileset is a clone on the same aggregate
- Do a release where the staging fileset was a clone on the same
  aggregate that doesn't exist anymore
- Do a release where the staging fileset is not a clone on the same aggregate
- Do a release where the staging fileset does not exist anymore and
  was not a clone on the same aggregate

SETQUOTA

- Try to set quota to a value that will not fit in a long (fail)
- Try to set quota on a fileset that is in a non-LFS aggregate (fail)

ZAP

- Try to zap a fileset that is in a non-LFS aggregate (fail)
- Try to zap a fileset that is locally-mounted

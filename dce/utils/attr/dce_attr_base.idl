/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 * 
 */
/*
 * HISTORY
 * $Log: dce_attr_base.idl,v $
 * Revision 1.1.4.2  1996/03/09  23:10:47  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:28:29  marty]
 *
 * Revision 1.1.4.1  1995/12/08  21:35:52  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  18:07:41  root]
 * 
 * Revision 1.1.2.1  1994/07/22  21:39:42  pwang
 * 	Initial implementation
 * 	[1994/07/22  20:34:19  pwang]
 * 
 * $EndLog$
 */

[
    uuid(9c050982-9e6f-11cd-b3d6-0000c010df56),
    version(1.0)
]
interface dce_attr_base {
    import "dce/sec_attr_base.idl";

	
    /* 
    ** d c e _ a t t r _ c o m p o n e n t _ n a m e _ t
    ** 
    ** A string for disambiguating operations on objects.  The
    ** component name further specifies the entity to which the
    ** attribute is attached.  This is analogous to a
    ** sec_acl_component_name_t in the acl interface.
    */
    typedef sec_attr_component_name_t	dce_attr_component_name_t;

    /* 
    ** d c e _ a t t r _ s c h e m a _ e n t r y _ t;
    **
    ** Schema catalog entry
    **
    **  Attribute Type Definitions are:
    **	Name <key>, Attribute UUID <key>,
    **	attribute encoding, acl manager type,
    **	query permset, update permset,
    **	test_permset, delete permset,
    **	schema entry flags,
    **	intercell_action flag, trigger types flagset
    **	trigger binding, scope, comment
    **
    **  Each attribute is named by both a string name and an
    **  attribute uuid - either can be used as a retrieval key and
    **  both must be unique.  The name should only be used for
    **  interactive access to the attribute.  The attribute uuid
    **  should be used for programmatic access.
    **
    **  The attribute uuid is used to identify the semantics of
    **  the attribute type.
    **
    **  Fields:
    **    attr_encoding	Defines the legal encodings for the
    **	  		attribute. If a concrete encoding is 
    **			specified, the attribute may only
    **			exist with that encoding.  If the "any" 
    **			encoding is specified, each instance of
    **			the attribute may take on any concrete
    **			encoding.
    **
    **    acl_mgr_set	Specifies the acl_managers that support
    **			the object type(s) on which attributes
    **			of this type can be created.  For each
    **			acl_manager, the permission bits 
    **			required for the query, update, test,
    **			and delete operations are specified.
    **
    **    schema_entry_flags	Contains a bitset for the following
    **			flags: unique, multi-instanced, reserved,
    **			and use_defaults.
    **
    **    intercell_action    Specifies the action to be taken when
    **			evaluating attributes created by 
    **			foreign cells: "accept" to accept 
    **			foreign attributes, "reject" to discard
    **			foreign attributes of this type, or
    **			"evaluate" to invoke a trigger to a
    **			server that will decide whether the
    **			attribute should be kept, rejected, or
    **			mapped to another value.
    **
    **    trig_types	Specifies on which type of attribute
    **			operation a trigger is executed:
    **			Flag set may contain:
    **			`query' for trigger on lookups,
    **			`update' for trigger on writes.
    **
    **    trig_binding	Specifies the principal id, auth and
    **			binding information for the trigger
    **			server. This field is only evaluated
    **			if trig_types specifies a trigger or if
    **			intercell_action is set to "evaluate."
    **
    **    comment	A string for information about this
    **			schema entry.
    */
    typedef sec_attr_schema_entry_t	dce_attr_schema_entry_t;

    /* 
    ** d c e _ a t t r _ s c h e m a _ e n t r y _ p a r t s _ t
    **    
    **    These flags identify which schema entry fields
    **    should be modified on a schema_entry_update operation.
    **    Not all fields that possess a flag are supported 
    **    in an update operation.
    */
    typedef sec_attr_schema_entry_parts_t dce_attr_schema_entry_parts_t;

    /* 
    ** d c e _ a t t r _ c u r s o r _ t;
    **
    ** Schema and Attribute scan cursor for interative
    ** database operations. This cursor must minimally
    ** represent the object indicated by "schema_name"
    ** in the schema interfaces, or "component_name" in
    ** the attribute interfaces.  The cursor may additionally
    ** represent an entry within that schema or an 
    ** attribute instance on that component.
    */
    typedef sec_attr_cursor_t	dce_attr_cursor_t;


    /* 
    ** d c e _ a t t r _ b i n d _ a u t h _ i n f o _ t
    **
    ** Authentication and authorization information required
    ** for authenticated RPC binding setup.
    */
    typedef sec_attr_bind_auth_info_t	dce_attr_bind_auth_info_t;


}

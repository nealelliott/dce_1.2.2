*
* ID: $Id: 
*
* ORIGINS: Transarc Corp.
*
* (C) COPYRIGHT Transarc Corp. 1992
* All Rights Reserved
* Licensed Materials - Property of Transarc
*
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with Transarc Corp
*

*
* @OSF_COPYRIGHT
*
* HISTORY
* $Log$
* $EndLog$
*

* 
* USAGE: ./file_test -l /.:/dfs_test/a    (for hub)
*        ./file_test -c /.:/dfs_test/a    (for two spokes)
*

*
* truncate.dist.scr.
*    This script implements the followings.
*

*
* Test growing a file using ftruncate; make sure new bytes are all
* zero.  Test growing past end of next chunk.
*
* Test shrinking a file with ftruncate.  Shrink to multiple of 64K, to
* submultiple (e.g. 8K), to 200 bytes, and finally to 0 bytes long.
*
* Do tests while having other test processes on the same client
* writing data to the beginning of the file.  Also, try tests with other
* processes on the same test client writing to the beginning of the
* chunk, but not in the area being truncated.  Try same operations while
* utimes'ing the file from the test client.  Try generating same
* conflicts, only via revokes using write and utimes syscalls executed
* by a stress process.
*

!* Include config file.
include config

set loopTimes 10

* 
* The procedure will write, utimes a file while other truncates the file.
*
set test_Proc proc END_PROC

  echo
  echo Test process (update file data).

  set dataFile vector64k
  set vectorData vector 0x0
  open @dataFile @O_RDONLY 0777 dataFid
  read @dataFid 256 vectorData
  close @dataFid

  getwd workDir
  chdir $testDir

  set zeroData vector 0x0
  open zerofile @O_RDONLY  0777 tempId
  read @tempId 256 zeroData
  close @tempId

  sync_join "write_begin_file" $timeout

  open $testFile @O_RDWR 0777 fileId
  loop x 1 1 $loopTimes
    write @fileId @vectorData
    if ( @CommandResult != 256 ) {
      echo FAILED: write request 256 but return 
      echo @CommandResult.
    }
  endloop
  close @fileId

  sync_join "write_begin_file_done" $timeout

  open $testFile @O_RDWR 0777 fileId
  set junk vector 0x0
  read @fileId 256 junk
  if ( @junk != @vectorData ) {
    echo FAILED: read the begin of the file.
  }
  lseek @fileId @SEEK_END -256
  read @fileId 256 junk
  if ( @junk != @zeroData ) {
    echo FAILED: read zero region failed.
  }
  stat $testFile var
  if ( @var.st_size != (8*$CONST64K+32768) ) {
    echo FAILED: File size is wrong ing write while growing file by truncating.
  } 
  
  sync_join "write_begin_chunk" $timeout

  lseek @fileId @SEEK_SET $CONST64K
  write @fileId @vectorData

  close @fileId
  sync_join "write_begin_chunk_done" $timeout

  open $testFile @O_RDWR 0777 fileId
  lseek @fileId @SEEK_SET $CONST64K
  read  @fileId 256 junk
  if ( @junk != @vectorData ) {
    echo FAILED: read the begin of the second chunk.
  }
  lseek @fileId @SEEK_SET (2*$CONST64K-256)
  read @fileId 256 junk
  if ( @junk != @zeroData ) {
    echo FAILED: read zero region failed.
  }
  stat $testFile var
  if ( @var.st_size != (2*$CONST64K+32768) ) {
    echo FAILED: The file size is wrong after shrinking the file.
  } 

  sync_join "utimes_grow" $timeout

  loop x 1 1 $loopTimes
   if ( $ITL_SystemType == solaris ) {
    utimes $testFile "" "" 0 "" "" 0 
   }
   else {
    utimes $testFile "" "" -1 "" "" -1
   }
  endloop

  sync_join "utimes_grow_done" $timeout
  stat $testFile var
  if ( @var.st_size != (8*$CONST64K+32768) ) {
    echo FAILED: File size is wrong after growing the file by truncating.
  } 

  sync_join "utimes_shrink" $timeout

  loop x 1 1 $loopTimes
   if ( $ITL_SystemType == solaris ) {
    utimes $testFile "" "" 0 "" "" 0 
   }
   else {
    utimes $testFile "" "" -1 "" "" -1
   }
  endloop

  sync_join "utimes_shrink_done" $timeout
  stat $testFile var
  if ( @var.st_size != (2*$CONST64K+32768) ) {
    echo FAILED: The file size is wrong afetr shriking the file by truncating.
  } 

  sync_join "shrink_to_zero" $timeout

  sync_join "finish_sync" $timeout

  stat $testFile var
  if ( @var.st_size != 0 ) {
    echo FAILED: The file size is not zero.
  } 
  

  close @fileId
  chdir @workDir

  echo End test test.
  echo

END_PROC

* 
* The process will truncate a file while the test update it.
*
set stress_Proc proc END_PROC

  echo
  echo Stress process (truncate file).

  set dataFile vector64k
  set vectorData vector 0x0
  open @dataFile @O_RDONLY 0777 dataFid
  read @dataFid 256 vectorData
  close @dataFid

  getwd workDir
  chdir $testDir

  set zeroData vector 0x0
  open zerofile @O_RDONLY  0777 tempId
  read @tempId 256 zeroData
  close @tempId

  set offset[1] $CONST64K
  set offset[2] (2*$CONST64K)
  set offset[3] (2*$CONST64K+32768)
  set offset[4] (3*$CONST64K+32768)
  set offset[5] (4*$CONST64K+32768)
  set offset[6] (5*$CONST64K+32768)
  set offset[7] (6*$CONST64K+32768)
  set offset[8] (7*$CONST64K+32768)
  set offset[9] (8*$CONST64K+32768)

  sync_join "write_begin_file" $timeout

* While some process write the begin of the file this process truncate 
* the file in growing maner.

  loop x 1 1 $loopTimes
    if ( @x <= 9 ) {
      set offset @offset[@x]
    }
    else {
      set offset @offset[9]
    }
    truncate $testFile @offset
  endloop

  sync_join "write_begin_file_done" $timeout

  set junk vector 0x0
  open $testFile @O_RDONLY 0777 fileId
  loop x 1 1 $loopTimes
    read @fileId 256 junk
    if ( @junk != @vectorData ) {
      echo FAILED: write data has not been seen after truncating.
    }
  endloop
  close @fileId

  sync_join "write_begin_chunk" $timeout

* While some process write the begin of the chunk this process truncate 
* the file in shrinking maner.

  loop x 3 1 $loopTimes
    if ( @x <= 9 ) {
      set offset @offset[(9-@x+3)]
    }
    else {
      set offset @offset[3]
    }
    truncate $testFile @offset
  endloop

  sync_join "write_begin_chunk_done" $timeout

  open $testFile @O_RDONLY 0777 fileId
  lseek @fileId @SEEK_SET $CONST64K
  read  @fileId 256 junk
  if ( @junk != @vectorData ) {
    echo FAILED: read the begin of the second chunk.
  }
  lseek @fileId @SEEK_SET (2*$CONST64K-256)
  read @fileId 256 junk
  if ( @junk != @zeroData ) {
    echo FAILED: read zero region failed while truncating.
  }
  close @fileId

  sync_join "utimes_grow" $timeout

* While some process utime the file this process truncates 
* the file in growing maner.

  loop x 1 1 $loopTimes
    if ( @x <= 9 ) {
      set offset @offset[@x]
    }
    else {
      set offset @offset[9]
    }
    truncate $testFile @offset
  endloop

  sync_join "utimes_grow_done" $timeout

  sync_join "utimes_shrink" $timeout

  loop x 3 1 $loopTimes
    if ( @x <= 9 ) {
      set offset @offset[(9-@x+1)]
    }
    else {
      set offset @offset[3]
    }
    truncate $testFile @offset
  endloop

  sync_join "utimes_shrink_done" $timeout

  sync_join "shrink_to_zero" $timeout
  truncate $testFile 0

  sync_join "finish_sync" $timeout
  chdir @workDir

  echo End stress test.
  echo

END_PROC


***********************************************************************
echo
* Check if there are enogh spokes.
if ( $ITL_nspokes < 2 ) {
  echo To run the test you have to have at least two spokes.
}

chdir $testDir

* Prepare a file contains 256 zeros
open zerofile ($O_CREAT|$O_RDWR) 0777 fid
write $fid $NULL256B 
close $fid

*
!* Test truncation under different conditions (write and utimes).
*

* Here we want to provide a zero len file first and a big file in next loop.
set flag true

loop z 1 1 $loopTimes

if ( $flag == true ) {
  open $testFile ($O_CREAT|$O_RDWR) 0777 fileId
  close $fileId
  set flag false
}
else {
  open $testFile ($O_CREAT|$O_RDWR) 0777 fileId
  loop x 1 1 $loopTimes
    write $fileId $NUMVEC64K
    if ( $CommandResult != $CONST64K ) {
      echo FAILED: write failed in write vector procedure.
    }
  endloop
  set flag true
}



* How about let several stresses truncate the file ??

rexec_async $ITL_spoke[0] stress_Proc result[0] fsyncId[0]
loop x 1 1 ($ITL_nspokes-1)
  rexec_async $ITL_spoke[$x] test_Proc result[$x] fsyncId[$x]
endloop

sync_create "write_begin_file" $ITL_nspokes  $timeout
sync_release "write_begin_file"

sync_create "write_begin_file_done" $ITL_nspokes  $timeout
sync_release "write_begin_file_done"

sync_create "write_begin_chunk" $ITL_nspokes  $timeout
sync_release "write_begin_chunk"

sync_create "write_begin_chunk_done" $ITL_nspokes  $timeout
sync_release "write_begin_chunk_done"

sync_create "utimes_grow" $ITL_nspokes  $timeout
sync_release "utimes_grow"

sync_create "utimes_grow_done" $ITL_nspokes  $timeout
sync_release "utimes_grow_done"

sync_create "utimes_shrink" $ITL_nspokes  $timeout
sync_release "utimes_shrink"

sync_create "utimes_shrink_done" $ITL_nspokes  $timeout
sync_release "utimes_shrink_done"

sync_create "shrink_to_zero" $ITL_nspokes  $timeout
sync_release "shrink_to_zero"

sync_create "finish_sync" $ITL_nspokes  $timeout
sync_release "finish_sync"

loop x 0 1 ($ITL_nspokes-1)
  async_join $fsyncId[$x] $timeout
endloop

loop x 0 1 ($ITL_nspokes-1)
  if ( $result[$x] != 0 ) {
    echo Spoke $x has a failure.
  }
endloop

remove $testFile
echo

endloop

chdir $currentDir
exec clearDir_Proc $testDir


echo

echo Hub done.

#!/bin/sh

# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#

###############################################################################
#    Copyright (C) 1996, 1991 Transarc Corporation - All rights reserved      #
###############################################################################

# This test is applicable to DFS exporting Episode (not exported UFS, and
# not local Episode). The script performs operations like release
# and update; the intention is that another process (say,
# fs/test2) should be run in the fileset while this is going on, in order
# to test fileset availability during these operations.
#
# The variable $secs_per_op determines how many seconds to spend on each
# fts operation, and $iter is the number of iterations of each command to
# run before checking the time. The setting of $iter (to 5) is probably OK,
# but as the stability of DFS improves, you may want to set $secs_per_op
# higher.

###############################################################################

# Usage:  test4 [-noupdate] [-norelease] [-releaseonly] [-updateonly] [-nt <iterations>]

# Typically run via:    rtest4 >& rtest4.out or via runtests

###############################################################################

# Test environment:
# This test requires full-blown DFS with exported Episode. DFS server $SERVER_1
# must export Episode aggregate $EPI_AGGRNAME_1, and $SERVER_2 must export
# $EPI_AGGRNAME_2. $SERVER_1 and $SERVER_2 can be the same machine. A mount
# point will be created in $testdir.

# Privilege required:
# You must be in admin.fl, and in admin.ft on $SERVER_1 and $SERVER_2, in
# order to run the fts commands contained in this script. You must also
# be able to create, modify, and delete $testdir.

# Highest error number is: 53.

###############################################################################

d=`pwd`
p=`basename $0`
dn=`dirname $0`
rc=0
ty=rep

ft=Slime.$p.$$
iter=1
secs_per_op=60

# Load the test context.
. $dn/statusCheck

# Sets testuser and testuid
getUserId
echo "TESTER is $testuser, TESTER ID is $testuid"
testdir=$test_root/tdir.$$

if [ "$dfs_FileSysType" = "$DFS_WORKS_ON_LFS" ]
then
   iter_flag=FALSE
   do_release=TRUE
   do_update=TRUE
else
   iter_flag=FALSE
   do_release=FALSE
   do_update=FALSE
fi
alldone=0

# For now, we don't execute this test on exported UFS, because of all the
# LFS specific operations it does. We might be able to get this to work on
# UFS later on.
if [ "$dfs_FileSysType" = "$DFS_WORKS_ON_UFS" ]
then
  echo ""; echo "$p not applicable to DFS exporting UFS"; echo ""
  echo ""; echo "All done at `date`."; echo ""
  if test $rc -eq 0
     then 
	echo "$p PASSED"
     else 
	echo "$p FAILED ($rc errors)"
     fi
  exit $rc
  fi
 
###############################################################################

cleanup()
{

sync; sync; sleep 2
echo ""; date; echo "Part 3: cleanup"

echo ""; echo "Running cm lsstores..."
cm lsstores; rf=$?
if test $rf -ne 0
   then echo "- cm lsstores failed (errno $rf) ($p: E46)"; rc=`expr $rc + 1`
   fi

echo ""
echo "==============================================================================="

echo ""
fts lsft -fileset $ft $cav_arg; rf=$?
if test $alldone -ne 1 -a $rf -ne 0
   then echo "- fts lsft failed (errno $rf) ($p: E47)"; rc=`expr $rc + 1`
   fi

cm whereis $testdir; rf=$?
if test $alldone -ne 1 -a $rf -ne 0
   then echo "- cm whereis failed (errno $rf) ($p: E48)"; rc=`expr $rc + 1`
   fi

sync; sync

echo ""; echo "Removing mount points and filesets..."

fts delmount -dir $testdir/$ft; rf=$?
if test $alldone -ne 1 -a $rf -ne 0
   then echo "- fts delmount failed (errno $rf) ($p: E49)"; rc=`expr $rc + 1`
   fi

if test $SERVER_1 != $SERVER_2
    then
    if test $do_release = TRUE; then for confidence in dfs; do
    fts rmsite $ft $SERVER_2 $EPI_AGGRNAME_2 $cav_arg; rf=$?
    if test $alldone -ne 1 -a $rf -ne 0
       then echo "- fts rmsite failed (errno $rf) ($p: E50)"; rc=`expr $rc + 1`
       fi
    done
    fi
fi

fts rmsite $ft $SERVER_1 $EPI_AGGRNAME_1 $cav_arg; rf=$?
if test $alldone -ne 1 -a $rf -ne 0
   then echo "- fts rmsite failed (errno $rf) ($p: E53)"; rc=`expr $rc + 1`
    fi

fts delete $ft $SERVER_1 $EPI_AGGRNAME_1 $cav_arg; rf=$?
if test $alldone -ne 1 -a $rf -ne 0
   then echo "- fts delete failed (errno $rf) ($p: E51)"; rc=`expr $rc + 1`
   fi

rm -rf $testdir
echo ""; echo "Done with cleanup."

sync; sync; sleep 2

echo ""; echo "All done at `date`."; echo ""
if test $rc -eq 0
   then echo "$p PASSED"
   else echo "$p FAILED ($rc errors)"
   fi
exit $rc

}

###############################################################################

for a
    do
    if test $iter_flag = TRUE; then iter=$a; iter_flag=FALSE
    elif test $a = -nt; then iter_flag=TRUE
    elif test $a = -noupdate; then do_update=FALSE
    elif test $a = -norelease; then do_release=FALSE
    elif test $a = -updateonly
       then do_release=FALSE
    elif test $a = -releaseonly
       then do_update=FALSE

    else echo "Argument '$a' is unknown"; exit 2
    fi
    done

###############################################################################

echo ""
echo "$ty/$p starting at `date` on $hn"
echo "   in cell $CELL_NAME."
echo "Export root is $export_root, mount point $testdir."
echo "Aggregates are $EPI_AGGRNAME_1 on $SERVER_1 and $EPI_AGGRNAME_2 on $SERVER_2."
echo ""
echo "Will spend at least $secs_per_op seconds on each fts operation."

if test "$CELL_NAME" = ""
   then echo "Can't find cellname in /opt/dcelocal/dce_cf.db - aborting."
        exit 2
   fi

###############################################################################

sync; sync; sleep 2
echo ""; date; echo "Part 0: preliminaries"; echo "====================="

echo ""; echo "Creating test directory..."

rm -rf $testdir; rf=$?
if test $rf -ne 0
   then echo "- rm -rf failed; $p ABORTING ($p: E1)"; rc=`expr $rc + 1`; cleanup
   fi

mkdir $testdir; rf=$?
if test $rf -ne 0
   then echo "- mkdir failed; $p ABORTING ($p: E2)"; rc=`expr $rc + 1`; cleanup
   fi

cd /tmp; cd $testdir; rf=$?
if test $rf -ne 0 -o `pwd` != $testdir
   then echo "- cd failed; $p ABORTING ($p: E3)"; rc=`expr $rc + 1`; cleanup
   fi

echo ""; echo "Creating fileset $ft..."; echo ""
fts create $ft $SERVER_1 $EPI_AGGRNAME_1 $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts create failed (errno $rf); $p ABORTING ($p: E4)"
        rc=`expr $rc + 1`; cleanup
   fi

ftid=`fts lsfldb $ft $cav_arg | sed -n '/readWrite/s/[^,]*,,\([^ ]*\) .*/\1/p'`
echo "Fileset $ft ID is $ftid."
if test $ftid -le 0
   then echo "- fileset ID is unreasonable ($ftid); $p ABORTING ($p: E5)"
        rc=`expr $rc + 1`; cleanup
   fi

echo ""; echo "Creating mount point $testdir for $ft..."

fts crmount $testdir/$ft $ft $CELL_ARG; rf=$?
if test $rf -ne 0
   then echo "- fts crmount failed (errno $rf); $p ABORTING ($p: E6)"
        rc=`expr $rc + 1`; cleanup
   fi

setFsetRootProt2 $testdir/$ft $testuid "E6.1"

cd /tmp; cd $testdir/$ft; rf=$?
if test $rf -ne 0 -o `pwd` != $testdir/$ft
   then echo "- cd failed; $p ABORTING ($p: E7)"; rc=`expr $rc + 1`; cleanup
   fi

echo ""; echo "Putting stuff in $testdir/$ft..."

echo "This is a test of the emergency broadcast system. This is only a test." > f.71; rf=$?
if test $rf -ne 0
   then echo "- echo failed (errno $rf); $p ABORTING ($p: E8)"
        rc=`expr $rc + 1`; cleanup
   fi

cat f.71 f.71 f.71 f.71 f.71 f.71 > f.1420; rf=$?
if test $rf -ne 0
   then echo "- cat failed (errno $rf); $p ABORTING ($p: E9)"
        rc=`expr $rc + 1`; cleanup
   fi

cat f.1420 f.1420 f.1420 f.1420 f.1420 f.1420 f.1420 f.1420 > f.11360; rf=$?
# cat f.1420 > f.11360; rf=$?
if test $rf -ne 0
   then echo "- cat failed (errno $rf); $p ABORTING ($p: E10)"
        rc=`expr $rc + 1`; cleanup
   fi

cat f.11360 f.11360 f.11360 f.11360 f.11360 f.11360 f.11360 f.11360 > f.90880; rf=$?
# cat f.11360 > f.90880; rf=$?
if test $rf -ne 0
   then echo "- cat failed (errno $rf); $p ABORTING ($p: E11)"
        rc=`expr $rc + 1`; cleanup
   fi

cat f.90880 f.90880 f.90880 f.90880 f.90880 f.90880 f.90880 f.90880 > f.727040; rf=$?
# cat f.90880 > f.727040; rf=$?
if test $rf -ne 0
   then echo "- cat failed (errno $rf); $p ABORTING ($p: E12)"
        rc=`expr $rc + 1`; cleanup
   fi

mkdir d1 d2; rf=$?
if test $rf -ne 0
   then echo "- mkdir failed (errno $rf); $p ABORTING ($p: E13)"
        rc=`expr $rc + 1`; cleanup
   fi

cp f.* d1; rf=$?
if test $rf -ne 0
   then echo "- cp failed (errno $rf); $p ABORTING ($p: E14)"
        rc=`expr $rc + 1`; cleanup
   fi

cp f.* d2; rf=$?
if test $rf -ne 0
   then echo "- cp failed (errno $rf); $p ABORTING ($p: E15)"
        rc=`expr $rc + 1`; cleanup
   fi

echo ""
echo "==============================================================================="

echo ""

fts lsft -fileset $ft $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts lsft failed (errno $rf) ($p: E16)"; rc=`expr $rc + 1`
   fi

ls -lAR $testdir; rf=$?
if test $rf -ne 0
   then echo "- ls failed (errno $rf) ($p: E52)"; rc=`expr $rc + 1`
   fi

cm whereis $testdir; rf=$?
if test $rf -ne 0
   then echo "- cm whereis failed (errno $rf) ($p: E17)"; rc=`expr $rc + 1`
   fi

echo ""
echo "Will start fts operations in $secs_per_op seconds."
echo "Start some other filesystem exerciser in fileset $ft (id $ftid) now."
echo "You can run the other test in $testdir."
echo ""

echo ""
echo "==============================================================================="

echo ""; echo "Done with part 0."
sleep $secs_per_op

###############################################################################

if test $do_release = TRUE; then for confidence in dfs; do
sync; sync; sleep 2
echo ""; date; echo "Part 1: release"; echo "==============="

echo ""; echo "Running cm lsstores..."
cm lsstores; rf=$?
if test $rf -ne 0
   then echo "- cm lsstores failed (errno $rf) ($p: E25)"; rc=`expr $rc + 1`
   fi

echo ""; echo "Setting up release replication..."

fts setrepinfo $ft -release -maxage 5:00 -failage 6:00 -reclaim 2:00:00 -minrep 0:30 -defaultsiteage 1:00 $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts setrepinfo failed (errno $rf) ($p: E26)"; rc=`expr $rc + 1`
   fi

fts addsite $ft $SERVER_1 $EPI_AGGRNAME_1 $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts addsite failed (errno $rf) ($p: E27)"; rc=`expr $rc + 1`
   fi

if test $SERVER_1 != $SERVER_2
   then
   fts addsite $ft $SERVER_2 $EPI_AGGRNAME_2 $cav_arg; rf=$?
   if test $rf -ne 0
      then echo "- fts addsite failed (errno $rf) ($p: E28)"; rc=`expr $rc + 1`
      fi
   fi

fts lsfldb -fileset $ft $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts lsfldb failed (errno $rf) ($p: E29)"; rc=`expr $rc + 1`
   fi

echo ""; echo "Sleeping..."; echo ""; sleep $secs_per_op

d1=`date`; t=1

while

   d2=`date`
   h1=`echo "$d1" | sed 's/^... ... .. \(..\).*/\1/'`
   m1=`echo "$d1" | sed 's/^... ... .. ..:\(..\).*/\1/'`
   s1=`echo "$d1" | sed 's/^... ... .. ..:..:\(..\).*/\1/'`
   h2=`echo "$d2" | sed 's/^... ... .. \(..\).*/\1/'`
   m2=`echo "$d2" | sed 's/^... ... .. ..:\(..\).*/\1/'`
   s2=`echo "$d2" | sed 's/^... ... .. ..:..:\(..\).*/\1/'`
   if test $s2 -lt $s1; then s2=`expr $s2 + 60`; m2=`expr $m2 - 1`; fi
   if test $m2 -lt $m1; then m2=`expr $m2 + 60`; h2=`expr $h2 - 1`; fi
   if test $h2 -lt 0; then h2=$h1; fi
   es=`expr $s2 - $s1`; em=`expr $m2 - $m1`; et=`expr $es + $em \* 60`
   test $et -lt $secs_per_op
   
   do
      echo ""; echo $d2
      i=1; until test $i -gt $iter; do

         echo "Iteration $t.$i of release..."

         fts release $ft $cav_arg; rf=$?
         if test $rf -ne 0
            then echo "- fts release failed (errno $rf) ($p: E30)"
                 rc=`expr $rc + 1`
            fi

	if test $SERVER_1 != $SERVER_2
	then
	    echo ""; echo "Getting the version of the R/W..."
	    date
	    vsn=""
	    for tries in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
	    do
		sleep 30
		vsn=`fts lsft -fileset $ft -server $SERVER_1 | grep llBack | awk '{print $6}'`
		if test "$vsn" != ""
		    then break
		fi
		echo "...still sleeping at `date` for $ft on $SERVER_1"
	    done
	    date
	    echo ""; echo "Waiting for the readonly to be updated..."
	    date
	    for tries in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
	    do
		sleep 30
		xxx=`fts lsft -fileset $ft.readonly -server $SERVER_2 | grep llBack | awk '{print $6}'`
		if test "$xxx" != ""
		    then if test $xxx = $vsn
			then break
			fi
		fi
		echo "...still sleeping at `date` for $ft.readonly on $SERVER_2"
	    done
	    date
	fi

         i=`expr $i + 1`
      done
      t=`expr $t + 1`
   done

echo ""; echo "Done with part 1."; done
else echo ""; echo ">>> Skipping part 1 (release) <<<"
fi

###############################################################################

if test $do_update = TRUE; then for confidence in dfs; do
sync; sync; sleep 2
echo ""; date; echo "Part 2: update"; echo "=============="

echo ""; echo "Running cm lsstores..."
cm lsstores; rf=$?
if test $rf -ne 0
   then echo "- cm lsstores failed (errno $rf) ($p: E31)"; rc=`expr $rc + 1`
   fi

echo ""; echo "Setting up scheduled replication..."

fts setrepinfo $ft -scheduled -change -defaultsiteage 1:30 $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts setrepinfo failed (errno $rf) ($p: E32)"; rc=`expr $rc + 1`
   fi

fts lsfldb $ft $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts lsfldb failed (errno $rf) ($p: E33)"; rc=`expr $rc + 1`
   fi

echo ""; echo "Sleeping..."; echo ""; sleep $secs_per_op

d1=`date`; t=1

while

   d2=`date`
   h1=`echo "$d1" | sed 's/^... ... .. \(..\).*/\1/'`
   m1=`echo "$d1" | sed 's/^... ... .. ..:\(..\).*/\1/'`
   s1=`echo "$d1" | sed 's/^... ... .. ..:..:\(..\).*/\1/'`
   h2=`echo "$d2" | sed 's/^... ... .. \(..\).*/\1/'`
   m2=`echo "$d2" | sed 's/^... ... .. ..:\(..\).*/\1/'`
   s2=`echo "$d2" | sed 's/^... ... .. ..:..:\(..\).*/\1/'`
   if test $s2 -lt $s1; then s2=`expr $s2 + 60`; m2=`expr $m2 - 1`; fi
   if test $m2 -lt $m1; then m2=`expr $m2 + 60`; h2=`expr $h2 - 1`; fi
   if test $h2 -lt 0; then h2=$h1; fi
   es=`expr $s2 - $s1`; em=`expr $m2 - $m1`; et=`expr $es + $em \* 60`
   test $et -lt $secs_per_op
   
   do
      echo ""; echo $d2
      i=1; until test $i -gt $iter; do

         echo "Iteration $t.$i of update..."

         fts update $ft -all $cav_arg; rf=$?
         if test $rf -ne 0
            then echo "- fts update failed (errno $rf) ($p: E34)"
                 rc=`expr $rc + 1`
            fi

         i=`expr $i + 1`
      done
      t=`expr $t + 1`
   done

echo ""; echo "Setting scheduled replication parameters very tight..."
fts setrepinfo $ft -maxage 2:00 -failage 3:00 -minrepdelay 1s -reclaim 1:30:00 -defaultsiteage 0:15 -clear $cav_arg; rf=$?
if test $rf -ne 0
   then echo "- fts setrepinfo failed (errno $rf) ($p: E35)"; rc=`expr $rc + 1`
   fi

echo ""; echo "Sleeping..."; echo ""; sleep $secs_per_op

echo ""; echo "Done with part 2."; done
else echo ""; echo ">>> Skipping part 2 (update) <<<"
fi

###############################################################################

cd /tmp
alldone=1
cleanup
exit $rc

###############################################################################

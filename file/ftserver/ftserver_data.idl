/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: ftserver_data.idl,v $
 * $EndLog$
 */
/*
*/
/*
 * (C) Copyright 1996, 1991 Transarc Corporation
 * All Rights Reserved.
 */

/* $Header: /afs/tr/project/fs/dev/dfs-dev/src/file/ftserver/RCS/ftserver_data.idl,v 4.38 1996/10/16 16:49:57 gait Exp $ */

interface ftserver_data {

    import "dcedfs/common_data.idl";

    const long FTSERVER_MAXPRINNAME = 256;

    typedef struct ftserver_dest {
	afsNetAddr	address;
	unsigned32	destSSID;
	unsigned32	spare1;
	unsigned32	spare2;
	unsigned32	spare3;
	byte		prinName[FTSERVER_MAXPRINNAME];
    } ftserver_dest;

    typedef struct ftserver_Date {
	unsigned32	mask;
	/* 0=none, 1=fromDate with dirs, */
	/*   2=fromVersion with dirs, 3=fromDate, 4=fromVersion */
	afsTimeval	fromDate;
	afsHyper		fromVersion;
	afsHyper		spare1;
	afsHyper		spare2;
	afsHyper		spare3;
    } ftserver_Date;

    const long FTSERVER_MAXFSNAME = 112;

    /*Definitions for the ``flags'' parameter in FTSERVER_Restore() */
    const unsigned32 FTSERVER_RESTORE_FORCE_PRESERVE = 0x1;
    const unsigned32 FTSERVER_RESTORE_DISJOINT_OK = 0x4;
    
    /* 
     * Structure used to describe a volume's status 
     */
    typedef struct ftserver_status_static {
	afsHyper		volId;
	afsHyper		parentId;
	afsTimeval	cloneTime;
	afsTimeval	vvCurrentTime;
	afsTimeval	vvPingCurrentTime;
	unsigned32 	type;	
	unsigned32	accStatus;
	unsigned32	accError;
	unsigned32	states;
	unsigned32	reclaimDally;
	unsigned32	tokenTimeout;
	unsigned32	activeVnops;
	unsigned32	volMoveTimeout;
	unsigned32	static_spare4;
	unsigned32	static_spare5;
	unsigned32	static_spare6;
	unsigned32	static_spare7;
	unsigned32	static_spare8;
	unsigned32	static_spare9;
	byte		volName[FTSERVER_MAXFSNAME];
	byte		concurrency;
	byte		static_cspares[15];
    } ftserver_status_static;
    
    typedef struct ftserver_status_dynamic {
	afsTimeval	creationDate;
	afsTimeval	updateDate;
	afsTimeval	accessDate;
	afsTimeval	backupDate;
	afsTimeval	copyDate;
	afsHyper		volversion;	
	afsHyper		backupId;
	afsHyper		cloneId;
	afsHyper		llBackId;	/* low-level backing ID */
	afsHyper		llFwdId;	/* low-level forward ID */
	afsHyper		allocLimit;
	afsHyper		allocUsage;
	afsHyper		visQuotaLimit;
	afsHyper		visQuotaUsage;
	unsigned32	fileCount;
	unsigned32	minQuota;
	unsigned32	owner;
	unsigned32	unique;
	unsigned32	index;
	unsigned32	rwindex;
	unsigned32	backupIndex;
	unsigned32	parentIndex;
	unsigned32	cloneIndex;
	unsigned32	nodeMax;
	unsigned32	dynamic_spare1;
	unsigned32	dynamic_spare2;
	unsigned32	dynamic_spare3;
	unsigned32	dynamic_spare4;
	unsigned32	dynamic_spare5;
	unsigned32	dynamic_spare6;
	codesetTag	tag;
	unsigned32	msgLen;
	byte		statusMsg[128];
	byte		dynamic_cspares[16];
    } ftserver_status_dynamic;

    typedef struct ftserver_status {
	ftserver_status_static vss;
	ftserver_status_dynamic vsd;
    } ftserver_status;

    /* 
     * Structure used to describe a volume server transaction's status 
     */
    typedef struct ftserver_transStatus {
	unsigned32	transId;		/* transaction id */
	unsigned32	aggrId;	    	/* open volume's aggregate */
	afsHyper		volId;		/* open volume's Id */
	unsigned32	vDesc;		/* volume's desc to VOP_* calls */
	unsigned32	lastTime;		/* time trans was last active  */
	afsTimeval	creationTime;	/* time transaction started */
	unsigned32	returnCode;	/* transaction error code */
	unsigned32	states;		/* transaction's status bits */
	unsigned32	refCount;		/* transaction structure's ref count */
	unsigned32	accStatus;		/* accStatus from the caller */
	unsigned32	accError;		/* accError from the caller */
	afsHyper		baseType;		/* type of the underlying aggregate */
	afsNetAddr	callerAddr;	/* where request came from */
	unsigned32	flags;		/* transaction flags */
	unsigned32	spare0;
	unsigned32	spare1;
	unsigned32	spare2;
	unsigned32	spare3;
	unsigned32	spare4;
	unsigned32	spare5;
    } ftserver_transStatus;


    /*
     * Structure holding the Ids/types of all the attached aggregates on a
     * server.  Identical to ``struct aggrList'' from ag_init.h.
     */
    typedef struct ftserver_aggrList {
	byte		name[32];		/* aggregate name */
	byte		dvname[32];		/* aggregate device name */
	unsigned32	Id;			/* aggregate Id */
	unsigned32	type;			/* aggregate type */
	unsigned32	spare1;
	unsigned32	spare2;
	unsigned32	spare3;
	unsigned32	spare4;
    } ftserver_aggrList;


    /* 
     * structure used to describe some aggregate's status.
     *  Identical to ``struct aggrInfo'' from ag_init.h.
     */
    typedef struct ftserver_aggrInfo {
	byte		name[32];		/* Mounted partition name */
	byte		devName[32];		/* raw partition name */
	unsigned32	type;			/* Type (UFS, PFS, etc) */
	unsigned32	totalUsable;		/* usable 1024-byte blocks */
	unsigned32 	curFree;
	unsigned32	minFree;
	unsigned32	spare1;
	unsigned32	spare2;
	unsigned32	spare3;
	unsigned32	spare4;
	unsigned32	spare5;
	unsigned32	spare6;
	byte		cspare[64];
    } ftserver_aggrInfo;

    const long FTSERVER_MAXNAMELEN = 255;
    
    typedef [string] byte volNamep_string[FTSERVER_MAXNAMELEN];
    
    const long FTSERVER_MAXSTATENTRIES = 10;
    const long FTSERVER_MAXTRANSENTRIES = 30;
    const long FTSERVER_MAXAGGR = 30;
    
    typedef struct ftserver_statEntries {
	unsigned32 ftserver_status_len;
	[length_is(ftserver_status_len)] ftserver_status
	    ftserver_status_val [FTSERVER_MAXSTATENTRIES];
    } ftserver_statEntries;

    typedef struct ftserver_transEntries {
	unsigned32 ftserver_tranStatus_len;
	[length_is(ftserver_tranStatus_len)] ftserver_transStatus
	    ftserver_transStatus_val[FTSERVER_MAXTRANSENTRIES];
    } ftserver_transEntries;
    /* typedef ftserver_transStatus ftserver_transEntries_val[MAXENTRIES]; */

    typedef struct ftserver_aggrEntries {
	unsigned32 ftserver_aggrList_len;
	[length_is(ftserver_aggrList_len)]
	    ftserver_aggrList ftserver_aggrEntries_val[FTSERVER_MAXAGGR];
    } ftserver_aggrEntries;

    /* typedef ftserver_aggrList ftserver_aggrEntries[FTSERVER_MAXAGGR]; */
    
    typedef struct ftserver_iterator {
	unsigned32   index;
	afsUUID         uuid;
    } ftserver_iterator;

#if !defined(OSF_NO_SOCKET_DUMP)
    /*
     * Definitions for addresses used to establish socket connections.
     */

    const long FTSERVER_UNSPEC = 0;
    const long FTSERVER_UNIX = 1;
    const long FTSERVER_TCP  = 2;

    typedef union switch(long protocol) address {
	case FTSERVER_UNIX:
	    [string] char unix_addr[FTSERVER_MAXNAMELEN];
	case FTSERVER_TCP:
	    struct {
		unsigned16 tcpPort;
		unsigned32 inetAddr;
	    } tcp_addr;
	case FTSERVER_UNSPEC:
	default: ; /* empty arm */
    } ftserver_addr_t;
#endif /* OSF_NO_SOCKET_DUMP */
}

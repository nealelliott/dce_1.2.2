# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
#!/bin/ksh
# 
# HISTORY
# $Log: slv,v $
# Revision 1.1.2.2  1996/03/09  20:52:10  marty
# 	Add OSF copyright
# 	[1996/03/09  20:29:47  marty]
#
# Revision 1.1.2.1  1995/12/11  22:47:30  root
# 	Submit OSF/DCE 1.2.1
# 
# 	HP revision /main/HPDCE02/jrr_1.2_mothra/1  1995/11/30  19:09 UTC  bell_d
# 	Debugged version
# 
# 	HP revision /main/HPDCE02/1  1994/08/03  20:04 UTC  bissen
# 	 merge from HPDCE01
# 
# 	HP revision /main/HPDCE01/1  1994/05/02  19:54 UTC  gordon_l
# 	Fixes for change_master/become_master
# 
# 	HP revision /main/gordon_branch/1  1994/05/02  19:37 UTC  gordon_l
# 	Fixes for change_master/becom
# 	e_master
# 	[1995/12/11  22:22:31  root]
# 
# Revision 1.1.2.4  1993/08/11  13:24:41  sekhar
# 	Rewrote slv_wait_config ; and minor cleanup.
# 	[1993/08/11  13:22:23  sekhar]
# 
# Revision 1.1.2.3  1993/08/03  21:01:56  sekhar
# 	Modified slv_x_config to pass the replica name
# 	to be used while configuring the slave.
# 	[1993/08/03  20:57:22  sekhar]
# 
# Revision 1.1.2.2  1993/08/02  17:41:03  sekhar
# 	Replication system test. Initial version
# 	[1993/08/02  17:31:13  sekhar]
# 
# $EndLog$
#

#   History of changes
#
#   The following functions have been deleted. The equivalent
#   functions/vars listed should be used instead.
#       slv_wait_prop_complete .. use sa_wait_prop_complete().
#       slv_initrep ............. use sa_initrep() and sa_v_initrep().
#       slv_change_key .......... use sa_change_key() .
#       slv_change_key_all ...... use sa_change_key() .
#       slv_getcnt .............. use REPDB_SLVCNT
#       slv_getlist ............. use REPDB_SLV_NAMES and REPDB_SLV_HOSTNAMES
#       slv_del ................. use sa_del() .
#
#   The following functions have been modfied as indicated:    
#       slv_config  - use sa_wait_prop_complete() instead of slv_wait_prop_complete
#       slv_restore - remove slv_wait_prop_complete() and sa_bind_master_wait()
#                     These are redundant since these are already done in
#                     secd_start_master .
#       slv_config  - remove call to secd_wait_bindexport() . Not really
#                     required since a wait is done until the updates are
#                     propagated to all the slaves.
#       slv_config  - remove comments regarding addition of slaves to database
#                     before calling slv_wait_prop_complete. This is no longer
#                     required since sa_wait_prop_complete has been completely
#                     rewritten.
#
#       slv_init    - handle the case when there is no master in the cell.
#       
if [ -z "${SLV_DEFINED}" ] ; then

SLV_DEFINED=1

. $PHOME/profile
. $PHOME/replog
. $PHOME/sa
. $PHOME/replist
. $PHOME/repdb
. $PHOME/secd
. $PHOME/rgy

#-----------------------------------------------------------------------
#  slv_v_del - Verifies that a slave has really been deleted. 
#              The verification done depends upon how the slave 
#              was deleted (forcibly or normally).
#
#  IN  : arg1 - Host where the replica was deleted.
#        arg2 - Name of the replica deleted.
#        arg3 (OPTIONAL) - $DELREP_FORCE - if the replica was deleted forcibly.
#                        - not passed in for normal deletion of replica
#-----------------------------------------------------------------------

slv_v_del()
{
    typeset st1 st2 rnm rh flag

    rh=$1 ; rnm=$2 ; flag=$3 ; 

    replog_msg "Verifying if replica $rnm on $rh has been deleted"

    #   delrep removes the replica from all replica lists
    #   (whether being deleted forcibly or not).
    #   But the registry is deleted and secd stopped only
    #   if the replica is deleted gracefully (i.e. without -force
    #   option).

    let IL=IL+1 

    #   First wait for the slave to be deleted from the master's
    #   replica list.

    replist_wait_slvdel $MASTER_NAME $rnm ; st1=$?
    if [ $st1 -ne 0 ] ; then
        replog_abort "slv_v_del" "replist_wait_slvdel"
        return $st1
    fi

    sa_wait_prop_complete "${SLV_NAMES[*]}" ; st1=$?
    if [ $st1 -ne 0 ] ; then
        replog_abort "slv_v_del" "sa_wait_prop_complete"
        return $st1
    fi

    #   Verify that the slave has been deleted from the replica lists
    #   of all the slaves. Note that $rnm is not on the list of $SLV_NAMES
    #   since this would have been removed in sa_delete().

    replist_tst_mbr "${REP_NAMES[*]}" $rnm $REP_NOTEXIST ; st1=$? 

    if [ -z "${flag}" ] ; then
        slv_v_replica $1 $REP_NOTEXIST ; st2=$?
    else
        slv_v_replica $1 $REP_EXISTS ; st2=$?
    fi
    let IL=IL-1

    if [[ $st1 -eq 0 && $st2 -eq 0 ]] ; then
        replog_msg "Verified replica $rnm deleted (delrep $flag)"
        st1=0
    else
        replog_error "Failed to verify if replica $rnm deleted (delrep $flag)"
        st1=1
    fi
    repdb_config_print
    return $st1
}

#-----------------------------------------------------------------------
#  slv_backup - Backs up the master registry
#
#-----------------------------------------------------------------------

slv_backup()
{
    typeset st1 st2 st
  
    replog_msg "Going to backup master security server"
    let IL=IL+1
#   
#   set the master to maintenance mode to prevent udpates.
#   to the registry database while it is being backed up.

    sa_set_state maintenance ; st=$?
    if [ $st -ne 0 ] ; then
        replog_abort "slv_backup" "sa_set_state"
        let IL=IL-1
        return $st
    fi

    rm -rf $BACKUP_DIR ; mkdir $BACKUP_DIR ; chmod 0777 $BACKUP_DIR

    replog_msg "Going to copy registry files"
    
    let IL=IL+1
    replog_msg "$RSH_COMM $MASTER_HOSTNAME $DCELOCAL/var/security/rgy_data $BACKUP_DIR"
    replog_msg "                     $DCELOCAL/var/security/.mkey    $BACKUP_DIR"
    let IL=IL-1

    #   rsh is required to do the following even though the $DCELOCAL directory
    #   is accessible via $NET/$MASTER_HOSTNAME/$DCELOCAL . This is because cp 
    #   won't work (generates  a permission violation)

    $RSH_COMM $MASTER_HOSTNAME "cp -r $DCELOCAL/var/security/rgy_data $BACKUP_DIR ;  \
                          cp    $DCELOCAL/var/security/.mkey    $BACKUP_DIR ;  \
                          chmod 0777 $BACKUP_DIR/rgy_data "
  
    sa_set_state service ; st=$?
    if [ $st -ne 0 ] ; then
        replog_error "sa_set_state() -service returned error"
    fi
    let IL=IL-1
    if [[ $st1 -eq 0 && $st2 -eq 0 && $st -eq 0 ]] ; then
        replog_msg "Successfully backed up master registry"
    else
        replog_error "Backup of master registry failed"
    fi
    return $st
}

#-----------------------------------------------------------------------
#  slv_restore - Restores the master registry
#
#-----------------------------------------------------------------------

slv_restore()
{
    typeset st st1

    replog_msg "Going to restore master registry"

    let IL=IL+1
    secd_stop $MASTER_HOSTNAME $MASTER_NAME ; st=$?
    if [ $st -eq 0 ] ; then
        replog_msg "Deleting the master registry data files"
        #   rsh required ; rm -rf through $NET/$MASTER_HOSTNAME won't work
        #   (generated a permission violation).

        $RSH_COMM $MASTER_HOSTNAME "rm -rf $DCELOCAL/var/security/rgy_data ;  \
                              rm     $DCELOCAL/var/security/.mkey    ;"

        replog_msg "Restoring the master registry files from "
        replog_msg "    $BACKUP_DIR"
        $RSH_COMM $MASTER_HOSTNAME "cp -r  $BACKUP_DIR/rgy_data $DCELOCAL/var/security ;  \
                              cp $BACKUP_DIR/.mkey    $DCELOCAL/var/security/.mkey ;"
   
        secd_start $MASTER_HOSTNAME $MASTER_NAME "-restore_master" ; st1=$?
        sa_set_state service ; st=$?
        if [ $st -eq 0 ] ; then
            st=$st1
        fi
        sa_wait_prop_complete "${SLV_NAMES[*]}" ; st=$?
    fi
 
    let IL=IL-1
    if [ $st -ne 0 ] ; then
        replog_error "Failed to restore master registry"
    else
        replog_msg   "Successfully restored master registry"
    fi
    return $st
}

#-----------------------------------------------------------------------
#   slv_x_config : Starts configuration of a security slave on a host 
#                  (if not already configured. The host is assumed to 
#                  already configured  as client only machine. 
#   IN  : arg1 ..... hostname where the slave is to be configured
#         arg2 ..... repilca name (unused on hp-ux)
#
#   RETURNS : 0 if host not already configured as a slave
#             1 if host already configured as a slave
#-----------------------------------------------------------------------
slv_x_config()
{
    typeset found i st logf

    replog_blank
    logf=$LOGS_DIR/$1/config_start_log
    repdb_get_rep_byhostname $2 ; found=$?
    if [ $found -eq 0 ] ; then
        replog_msg "$1 already configured as a security replica"
        st=1
    else
        rm -f $logf
        replog_msg "Starting dce_config of security replica on $1 (replica name = $2) "
        $RSH_COMM $1 -n "export PHOME=$PHOME ; export TET_ROOT=$TET_ROOT; export LOGS_DIR=$LOGS_DIR; $PHOME/xconfig $2 > $logf 2>&1 &"
        replog_dumpfile $logf 
        st=0
    fi
    return $st
}

#-----------------------------------------------------------------------
#   slv_wait_config : 
#       Waits until all the hosts have been configured as security replicas.
#       In addition all those slaves whose configuration completes are
#       added to the repdb database.
#
#   IN  : arg1 ...... array of hostnames of the slaves being configured.
#         arg2 ...... array of replica names of the slaves.
#-----------------------------------------------------------------------

slv_wait_config()
{ 
    typeset st i j slvhosts slvnms slvst

    set -A slvhosts $1
    set -A slvnms   $2
    replog_blank

    replog_msg "Waiting until dce_config of security slaves on $1 completes"
    i=1 ; st=1 ; let IL=IL+1

    #  Init slvst to 0 to indicate that no slave is configured
    j=0
    while [ $j -lt ${#slvhosts[*]} ]
    do
        slvst[j]=0
        j=`expr $j + 1`
    done
 
    i=0
    while [ $i -le $SLV_CONFIG_LOOP_CNT ]
    do
        replog_msg "Waiting $SLV_CONFIG_LOOP_INT secs for dce_config to complete"
        sleep $SLV_CONFIG_LOOP_INT
        sleep_flag=0
        j=0
        while [ $j -lt ${#slvhosts[*]} ] 
        do
            if [ -f $LOGS_DIR/${slvhosts[j]}/dce_config_stat ] ; then
                slvst[j]=1
            else
                sleep_flag=1 
                break
            fi  
            j=`expr $j + 1`
        done
        if [ $sleep_flag -eq 0 ] ; then
            st=0 
            break
        fi
        i=`expr $i + 1`
    done
    replog_blank
    let IL=IL-1
    #  Add all the slaves successfully configured to the database
    j=0
    while [ $j -lt ${#slvhosts[*]} ]
    do
        if [ ${slvst[j]} -eq 1 ] ; then
            replog_msg "dce_config of security slave on ${slvhosts[j]} completed."
            repdb_add_slv ${slvhosts[j]} $SUBSYSDIR/$SECURITYDIR/${slvnms[j]}
        else
            replog_error "dce_config of security slave on ${slvhosts[j]} failed. "
        fi
        j=`expr $j + 1`
    done
 
    return $st
}

#-----------------------------------------------------------------------
#  slv_config : Configures security replicas on a list of hosts with 
#               the corresponding replica names.
#
#  IN  : arg1 .. array of hostnames to be configured.
#        arg2 .. array of replica names to be used. (WITHOUT subsys/dce/sec/ )
#
#  RETURNS : 0 on sucess ; 1 on failure
#-----------------------------------------------------------------------

slv_config()
{
    typeset hostlist nmlist slvhosts slvnms num i j st retst slv_cdsnms

    set -A hostlist $1
    set -A nmlist   $2
    st=0
# 
#   Startup the configuration on each host
#
    num=${#hostlist[*]}
    
    i=0 ; j=0
    while [ $i -lt $num ] 
    do 
        slv_x_config ${hostlist[i]} ${nmlist[i]} ; st=$?
#
#       If a slave is already configured i.e. st != 0 
#       then don't attempt to configure it again.
#
        if [ $st -eq 0 ] ; then   # Slave not configured
            slvhosts[j]=${hostlist[i]}  
            slvnms[j]=${nmlist[i]} 
            j=`expr $j + 1`
        fi
        
        i=`expr $i + 1`
    done
    if [ ${#slvhosts[*]} -eq 0 ] ; then
        #   There are no slaves which have to be configured
        #   Return because we are done.

        return 0 # Success 
    fi

    #   There is at least which is being configured
    #   as a slave. So wait until the configuration 
    #   is complete.

    #   save the status in $retst
    #   
    slv_wait_config "${slvhosts[*]}" "${slvnms[*]}" ; st=$?
    if [ $st -ne 0 ] ; then
        return $st
    fi

    #
    #   Verify that secd is running on each of the slaves configured.
    #   
    secd_tst_wait "${slvhosts[*]}" $SECD_EXISTS ; st=$?
    if [ $st -eq 1 ] ; then
        replog_error "secd not running on $1"
        return $st
    fi

#   Wait and make sure that the newly configured slaves are initialized.
#   This also gurantees that the slave has finished initialized compeletely
#   and so it is safe to shut the master down.

    # generate cds names i.e. subsys/dce/sec/color etc from slvnms i.e."color large"

    set -A slv_cdsnms \
           `echo "${slvnms[*]}" | awk '{ for (i = 1 ; i <= NF ; i++)
                                             print sysdir "/" secdir "/" $i
                                       }' sysdir="$SUBSYSDIR" secdir="$SECURITYDIR"
           `

    sa_wait_prop_complete "${slv_cdsnms[*]}" ; st=$?
    if [ $st -ne 0 ] ; then
        replog_error "updates failed to propagate to slaves"
        return 1
    fi
    return $st
}

#-----------------------------------------------------------------------
#  slv_v_replica  : checks a host to see if a replica is still 
#                   running (=> secd is running and rgy database exists)
#                   or if the replica is not running (=> secd is not
#                   running and there is no rgy database).
#
#  IN  : arg1 ..... hostname to check
#        arg2 ..... $REP_EXISTS   - check for replica existance
#                   $REP_NOTEXIST - check for nonexistance of replica
#
#  returns : 0 on success ; 1 on failure
#-----------------------------------------------------------------------

slv_v_replica()
{
    typeset st i mkey_st rgy_data_st secdst fcnt

    if [ $2 = $REP_EXISTS ] ; then
        replog_msg "Checking if $1 is a replica"
    else
        replog_msg "Checking if $1 is not a replica"
    fi

#   Wait for secd to startup/terminate

    let IL=IL+1
    if [ $REP_EXISTS = $2 ] ; then
        secd_tst_wait $1 $SECD_EXISTS ; secdst=$?
    else
        secd_tst_wait $1 $SECD_NOTEXIST ; secdst=$?
    fi
    let IL=IL-1

    if [ -f $NET/$1$DCELOCAL/var/security/.mkey ] ; then
        mkey_st=0
    else
        mkey_st=1
    fi

    if [ -d $NET/$1$DCELOCAL/var/security/rgy_data ] ; then
        rgy_data_st=0
    else
        rgy_data_st=1
    fi

    if [ $2 = $REP_EXISTS ] ; then
        if [[ $secdst -eq 0 && $mkey_st -eq 0 && $rgy_data_st -eq 0 ]] ; then
            replog_msg "$1 is a replica"
            return 0
        fi

        replog_error "$1 is not a replica because : "
        if [ $secdst -ne 0 ] ; then
            replog_error "secd is not running"
        fi
        if [ $rgy_data_st -ne 0 ] ; then
            replog_error "registry does not exist"
        fi
        if [ $mkey_st -ne 0 ] ; then
            replog_error "The .mkey file does not exist"
        fi
        return 1
    else
        if [[ $secdst -eq 0 && $mkey_st -eq 1 && $rgy_data_st -eq 1 ]] ; then
            replog_msg "$1 is not a replica"
            return 0
        fi

        #   Special case when .mkey file exists and rgy_data is empty.
        #   In this case - just log a warning and return status ok.
        fcnt=`ls $NET/$1$DCELOCAL/var/security/rgy_data | wc -l`
        if [ $fcnt -eq 0 ] ; then
            replog_msg "**** WARNING : $NET/$1$DCELOCAL/var/security/rgy_data exists"
            replog_msg "          and is empty."
            if [ $mkey_st -eq 0 ] ; then
                replog_msg "**** WARNING : $NET/$1$DCELOCAL/var/security/.mkey exists."
            fi
            replog_blank
            replog_msg "The above warnings are consisdered harmless and hence"
            replog_msg "is not currently treated as an error."
            replog_blank
            replog_msg "$1 is not a replica"
            return 0
        fi
            
        replog_error "$1 is still a replica because : "
        if [ $secdst -ne 0 ] ; then
            replog_error "secd is running"
        fi
        if [ $rgy_data_st -ne 1 ] ; then
            replog_error "registry ($NET/$1$DCELOCAL/var/security/rgy_data) still exists"
            replog_error "and contain the following files"
            ls $NET/$1$DCELOCAL/var/security/rgy_data > $slv_tmpf1
            replog_dumpfile_fmt $slv_tmpf1
        fi
        if [ $mkey_st -ne 1 ] ; then
            replog_error "The .mkey file still exists"
        fi
        return 1
    fi
}

#
#   Populate the repdb database with the currently configured slaves
#   and master in the cell.
#

slv_populate_db()
{
    typeset st hostnm nm i ipaddr

#
#   Populate the repdb database with all the currently
#   configured slaves and the master. Any slaves marked
#   for deletion are ignored.

    replist_read ; st=$?   
    if [ $st -ne 0 ] ; then
        replog_abort "slv_init" "replist_read"
        return $st
    fi

    if [ ${#RL_MASTERS[*]} -gt 1 ] ; then
        replog_error "A cell can only have one master"
        return 1
    fi

    if [ ${#RL_MASTERS[*]} -eq 0 ] ; then
        replog_msg "Warning - No master configured in the cell"
        hostnm=$NULL_MASTER_HOST
        nm=$NULL_MASTER_NAME
    else  
        # retrieve the IP address of the master
        sec_admin -s /.:/${RL_MASTERS[0]} > $slv_tmpf1 <<-EOF
		info -full
	EOF
        replog_dumpfile_fmt $slv_tmpf1
        ipaddr=`grep "Addresses" $slv_tmpf1               \
               | awk -F: {'print $3'} | awk -F[ {'print $1'}`
        hostnm=`$RSH_COMM $ipaddr hostname`
        nm=${RL_MASTERS[0]}
    fi
    repdb_add_master $hostnm $nm

    for i in ${RL_SLVS[*]}
    do
        sec_admin -s /.:/$i > $slv_tmpf1 <<-EOF
		info -full
	EOF
        ipaddr=`grep "Addresses" $slv_tmpf1               \
               | awk -F: {'print $3'} | awk -F[ {'print $1'}`
        hostnm=`$RSH_COMM $ipaddr hostname`
        repdb_add_slv $hostnm $i
    done
}

slv_init()
{
    typeset st i 

    replog_init   # Must be the first one initialized
    repdb_init
    replist_init
    rgy_init
    sa_init

    slv_tmpf1=/tmp/slv_tmpf1_$HOSTNM
    slv_tmpf2=/tmp/slv_tmpf2_$HOSTNM
    rm -f $slv_tmpf1 $slv_tmpf2  # Remove if left over from previous run
    rm -rf $LOGS_DIR ; st=$?     # Remove if left over from previous run
    if [ $st -ne 0 ] ; then
        replog_error "Unable to delete directory $LOGS_DIR"
        return $st
    fi
    if [ ! -d $LOGS_DIR ] ; then
      mkdir $LOGS_DIR
    fi

    BACKUP_DIR=$LOGS_DIR/rgy_backup

    slv_populate_db ; st=$?
    if [ $st -ne 0 ] ; then
        replog_abort "slv_init" "slv_populate_db"
        return 1
    fi

    #   Create the logs directory for each of the slaves and the master.
    #   This must be done prior to attempting any configuration
    #   of slaves which will rely on the existance of these
    #   directories.
    
    
    for i in ${SLV_HOSTNAMES[*]} $MASTER_HOSTNAME
    do
        mkdir $LOGS_DIR/$i
    done

    #   Create directories for the slaves to be configured.

    for i in ${CONFIG_HOSTS[*]}
    do
        if [ ! -d $LOGS_DIR/$i ] ; then
            mkdir $LOGS_DIR/$i 
        fi
    done

    chmod +rwx $LOGS_DIR/$i

    #   Configure the slaves which are specified in CONFIG_HOSTS
    #   with the replica names specified in CONFIG_NAMES. Both
    #   these are set in the file $PHOME/profile .
    #
    #   This must be done after the existing slaves have already
    #   been added to the database as shown above since a slave
    #   specified in CONFIG_HOSTS may already  be configured as a slave.
    #
    #   CONFIG_HOSTS includes the name of the master. The host running 
    #   the master security server (or hosts already configured as security slaves)
    #   won't be configured by slv_config() .

    slv_config "${CONFIG_HOSTS[*]}" "${CONFIG_NAMES[*]}" ; st=$?
    repdb_config_print
    return $st
}

slv_global_cleanup()
{
    typeset r i lc rst

    replog_init   # Must be the first one initialized
    repdb_init
    replist_init
    rgy_init
    sa_init

    replog_msg "Beginning global cleanup . The global cleanup will attempt"
    replog_msg "to delete all the configured security slaves in the cell."
    replog_blank
    slv_tmpf1=/tmp/slv_tmpf1_$HOSTNM
    slv_tmpf2=/tmp/slv_tmpf2_$HOSTNM
    rm -f $slv_tmpf1 $slv_tmpf2  # Remove if left over from previous run
    rm -rf $LOGS_DIR               # Remove if left over from previous run

    slv_populate_db ; st=$?
    repdb_config_print

    i=0 ; lc=$SLV_CNT ; rst=0
    while [ $i -lt $lc ] 
    do
        #  N.B. The following is not a typo. We always want to
        #  delete $SLV_NAMES[0] . This is because sa_delete() 
        #  removes the slave being deleted from all lists such as SLV_NAMES
        #  sa_delete() also updates SLV_CNT as a side effect. This is why
        #  the loop counter was saved in lc at the beginning of the loop.

        slvnm=${SLV_NAMES[0]} ; slvhost=${SLV_HOSTNAMES[0]}
        sa_delete $slvnm ; st=$?
        if [ $st -ne 0 ] ; then
            rst=$st
        fi
        slv_v_del $slvhost $slvnm ; st=$?
        if [ $st -ne 0 ] ; then
            rst=$st
        fi
        i=`expr $i + 1`
    done
    replog_blank
    repdb_config_print
    if [ $rst -ne 0 ] ; then
        replog_error "Error deleting all security slaves in the cell"
        replog_blank
        replog_msg   "Please check to make sure that there are no slaves"
        replog_blank
    else
        replog_msg   "Successfully deleted all slaves in the cell"
    fi
    repdb_global_cleanup
    replist_global_cleanup
    rgy_global_cleanup
    sa_global_cleanup
    rm -f $slv_tmpf1 $slv_tmpf2
    return $rst
}


fi



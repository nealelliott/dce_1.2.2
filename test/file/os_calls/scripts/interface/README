-------------------------------------------------------------------------
                   README
-------------------------------------------------------------------------

HOW TO RUN

1. Copy all interface and util directories into your test site.
2. Link 'file_test' executable to the test site (interface directory).
3. Add to your environment variables for AGGRNAME and LOCALPATH.
4. Check scripts (and *.env) for particular requirments.
5. Be sure that the rlimit number of file descriptors > $numFiles (100)
6. Run 'runscripts'
7. Check file run.log file and the script for any errors.

--------------------------------------------------------------------------

INTRODUCTION.

This subdirectory contains all basic syscall (non-distributed) tests 
(check with Mike Kazar's syscall check list for details). 

All scripts in this dir are implemented in ITL (Interface Testing Language).

All the scripts can be executed separately or be invoked in whole by
shell script "runscripts". There two kinds of scripts currently, one 
for environment setup or common variables and another for real 
testing scenarios.

The initial desire for the test suite is for DFS only but some of
them could be used for any other UNIX file system testing. Currently
we should run the syscall tests under DFS/UFS and DFS/LFS.

Before running the scripts better check each script for variable
setups.


RUNNING ITL SCRIPTS

To run a script simply type following command line:
  
   >file_test -I script-name

To run all the scripts type:

   >runscripts

"file_test" is the interpretor of ITL which could be found under
the install tree of a dfs release. Have the binary "file_test" copied
here or change the executable path in "runscripts" before you run the 
scripts. "runscripts" is provided in this subdirectory invoke all 
scripts at one time. The scripts may not be reasonablely combined but 
you can run them in many different ways. In case of a crash  
you have to clean the working directory manually (better do that). 


LOG FILE

ITL is a interactive interpretor. It simply print all texture
information on "stdout and stderr". Up to your choice you can
redirect the output stream to a log file as you like. If "runscripts"
is executed then "run.log" in the current directory is the log file 
for the run. To see more information about the execution of a script 
set the DEBUG environment variable in your current shell to true.
Check run.log by greping keyword "FAILED" and "crash" separately.

NOTE

1. When read-write file tests crossing platforms such as a PMAX client 
runing scripts to test a RIOS server are desired, be sure to
remove all data file first (vecnum64k, vector64k, onemega..) since
PMAX and RIOS have different byte order.

-------------------------------------------------------------------------

     

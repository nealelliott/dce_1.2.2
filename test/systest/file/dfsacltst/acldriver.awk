# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994, 1996 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# HISTORY
# $Log: acldriver.awk,v $
# Revision 1.1.6.2  1996/03/11  02:44:22  marty
# 	Update OSF copyright years
# 	[1996/03/10  20:07:31  marty]
#
# Revision 1.1.6.1  1995/12/11  21:59:47  root
# 	Submit OSF/DCE 1.2.1
# 	[1995/12/11  20:59:01  root]
# 
# Revision 1.1.4.2  1994/06/10  20:48:35  devsrc
# 	cr10872 - fixed copyright
# 	[1994/06/10  17:18:43  devsrc]
# 
# Revision 1.1.4.1  1994/06/03  16:22:42  annie
# 	fixed incorrect comment leaders
# 
# 	 Revision 1.1.2.2  1993/02/27  00:28:09  ramb
# 	 	Revised version
# 	 	[1993/02/26  23:51:24  ramb]
# 
# 	 	Initial version
# 	 	[1993/02/22  15:06:53  ramb]
# 	[1994/06/03  15:44:19  annie]
# 
# $EndLog$
#
# This awk file will be invoked by the acltest generator program. It will
# pass the following variables to the awk file.
#	DRIVER_SYSTEM	/* system on which the main driver will be running */
#	CELL_LOCAL	/* name of the variable local cell */
#	CELL_FOREIGN1	/* name of the first foreign cell */
#	CELL_FOREIGN2	/* name of the second foreign cell */
#	CELL_SYSTEMS_LOCAL	/* list of systems belonging to CELL_LOCAL */
#	CELL_SYSTEMS_FOREIGN1	/* list of systems belonging to CELL_FOREIGN1 */
#	CELL_SYSTEMS_FOREIGN2	/* list of systems belonging to CELL_FOREIGN2 */
# The awk file will be invoked as given below:
#	awk -f thisawkfilename DRIVER_SYSTEM=??? CELL_LOCAL=???? CELL_FOREIGN1=???? CELL_FOREIGN2=???? CELL_SYSTEMS_FOREIGN1=???? CELL_SYSTEMS_FOREIGN2=??? TESTNAME=??? OBJECTNAME=??? ACLFILENAME=original_aclfilename aclfilename
#
BEGIN	{
	prev_principal=""
	FS=":"
	abort_flag=0
}

$0 ~ /#.*/	{
		next
}

$0 !~ /#.*/	{
	if ($0 == "") {
		next
	}

#	aclentrytype:cell:groupname:principalname:DFSoperation:expected_outcome
	acltentrytype = $1
	cellname      = $2
	groupname     = $3
	principalname = $4
	dfsoperation  = $5
        outcome       = $6
	if (cellname != "local" && cellname != "foreign1" && cellname != "foreign2") {
		printf("Invalid cellname (%s) in the input file (%s) on line %d\n",cellname,ACLFILENAME,NR)
		printf("Aborting....\n")
		abort_flag=1
		exit 1
	}
	current_principal = cellname principalname
	if ( current_principal != prev_principal ) {
		if ( prev_principal != "" ) {
			do_end_principal()
		}
		prev_principal = current_principal
		do_begin_principal()
	}
#	printf("Line = %s\n",$0)
#	printf("Current principal = %s\n",current_principal)
	printf("dfstest \"%s\" \"%s\" \n",dfsoperation,outcome)  >> outfilename2
}
	
		
END	{
	if (abort_flag == 0) {
		do_end_principal()
		exit 0
	} 
	exit 1
}


function do_end_principal() {
	close("#!/bin/ksh\n")
}

function do_begin_principal()  {
	outfilename1 = cellname "." principalname ".main." TESTNAME
	outfilename2 = cellname "." principalname ".exec." TESTNAME
#	print "1st output file name is ", outfilename1
#	print "2nd output file name is ", outfilename2
	generate_1st_output_file()
	generate_2nd_output_file()
}

function generate_1st_output_file()
{
	printf("#!/bin/ksh\n")  >> outfilename1
#	printf("set -x\n") >> outfilename1
	printf("# This file is generated by dfs_acldriver.ksh\n") >> outfilename1
	printf("# When this file is generated it is generated with environment variables\n") >> outfilename1
	printf("# defining to which cell this system belongs and also on the assumption\n") >> outfilename1
	printf("# that certain groups and principals are already on the registry of this\n") >> outfilename1
	printf("# cell.  We should first verify that we are who we are supposed to be.\n") >> outfilename1
	printf("# If our environment coincides with earlier assumptions then we will proceed\n") >> outfilename1
	printf("# and do a dce_login for the principal to do the real test.\n") >> outfilename1
	printf("DIRNAME=`dirname $1`\n") >> outfilename1
	printf("cd $DIRNAME\n") >> outfilename1
	printf("MYCELLNAME=\n") >> outfilename1
	printf("MYHOSTNAME=\n") >> outfilename1
	printf("MYTESTNAME=%s\n",TESTNAME) >> outfilename1
	printf("MYOBJECTNAME=%s\n",OBJECTNAME) >> outfilename1
	printf("MYPRINCIPALNAME=%s\n",principalname) >> outfilename1
	printf("# \n") >> outfilename1
	printf("CELL_LOCAL=%s\n",CELL_LOCAL) >> outfilename1
	printf("CELL_FOREIGN1=%s\n",CELL_FOREIGN1) >> outfilename1
	printf("CELL_FOREIGN2=%s\n",CELL_FOREIGN2) >> outfilename1
	printf("CELL_SYSTEMS_LOCAL=%s\n",CELL_SYSTEMS_LOCAL) >> outfilename1
	printf("CELL_SYSTEMS_FOREIGN1=%s\n",CELL_SYSTEMS_FOREIGN1) >> outfilename1
	printf("CELL_SYSTEMS_FOREIGN2=%s\n",CELL_SYSTEMS_FOREIGN2) >> outfilename1
	printf("DRIVER_ON_SYSTEM=%s\n",DRIVER_SYSTEM) >> outfilename1
	printf("LOGFILENAME=%s.%s.%s.log\n",cellname,principalname,TESTNAME) >> outfilename1
#	printf("LOGFILENAME=/tmp/%s%s%s.log\n",TESTNAME,principalname,cellname) >> outfilename1
	printf("TESTFILENAME=%s\n",outfilename2) >> outfilename1
	printf("#\n") >> outfilename1
	printf(". ./dfsacl.functions\n") >> outfilename1
	printf("verify_hostname\n") >> outfilename1
	printf("verify_cellname\n") >> outfilename1
	printf("check_for_testfile\n") >> outfilename1
	printf("dce_login %s -dfsacltst- -exec $DIRNAME/$TESTFILENAME $DIRNAME/$TESTFILENAME\n",principalname) >> outfilename1
	printf("if [ ! -a \$TESTFILENAME.dcelogin ]\n") >> outfilename1
	printf("then\n") >> outfilename1
	printf("\techo \"FATAL:$CELLNAME:$HOSTNAME:$TESTNAME:$PRINCIPALNAME:dce_login $PRINCIPALNAME was unsuccessful\" >> $LOGFILENAME\n") >> outfilename1
	printf("\texit 1\n") >> outfilename1
	printf("else\n") >> outfilename1
	printf("\trm \$TESTFILENAME.dcelogin\n") >> outfilename1
	printf("\texit 0\n") >> outfilename1
	printf("fi\n") >> outfilename1
	printf("#\n") >> outfilename1
	printf("#\n") >> outfilename1
	close("#!/bin/ksh\n")
}


function generate_2nd_output_file()
{
	printf("#!/bin/ksh\n") >> outfilename2
#	printf("set -x\n") >> outfilename2
	printf("# Iam now successfully dce_logged in under the principal Iam supposed to be\n") >> outfilename2
	printf("# running under.  Now all I have to do is run the dfs_operations test Iam \n") >> outfilename2
	printf("# supposed to and exit.\n") >> outfilename2
	printf("#\n") >> outfilename2
	printf("DIRNAME=`dirname $1`\n") >> outfilename2
	printf("cd $DIRNAME\n") >> outfilename2
	printf("MYCELLNAME=\n") >> outfilename2
	printf("MYHOSTNAME=\n") >> outfilename2
	printf("MYTESTNAME=%s\n",TESTNAME) >> outfilename2
	printf("MYOBJECTNAME=%s\n",OBJECTNAME) >> outfilename2
	printf("MYPRINCIPALNAME=%s\n",principalname) >> outfilename2
	printf("# \n") >> outfilename2
	printf("CELL_LOCAL=%s\n",CELL_LOCAL) >> outfilename2
	printf("CELL_FOREIGN1=%s\n",CELL_FOREIGN1) >> outfilename2
	printf("CELL_FOREIGN2=%s\n",CELL_FOREIGN2) >> outfilename2
	printf("CELL_SYSTEMS_LOCAL=%s\n",CELL_SYSTEMS_LOCAL) >> outfilename2
	printf("CELL_SYSTEMS_FOREIGN1=%s\n",CELL_SYSTEMS_FOREIGN1) >> outfilename2
	printf("CELL_SYSTEMS_FOREIGN2=%s\n",CELL_SYSTEMS_FOREIGN2) >> outfilename2
	printf("DRIVER_ON_SYSTEM=%s\n",DRIVER_SYSTEM) >> outfilename2
	printf("LOGFILENAME=%s.%s.%s.log\n",cellname,principalname,TESTNAME) >> outfilename2
#	printf("LOGFILENAME=\n") >> outfilename2
	printf("TESTFILENAME=%s\n",outfilename2) >> outfilename2
	printf("#\n") >> outfilename2
	printf("#   source the functions file...\n") >> outfilename2
	printf(". ./dfsacl.functions\n") >> outfilename2
	printf("#\n") >> outfilename2
	printf("touch \$TESTFILENAME.dcelogin\n") >> outfilename2
	printf("#\n") >> outfilename2
	printf("# objectname:cellname:principalname:dfsoperation:outcome line reproduced here\n") >> outfilename2
	printf("# since the dfsoperation could conceivably hang, we need to have a mechanism\n") >> outfilename2
	printf("# of waiting only for a certain period of time after initiating the test.\n") >> outfilename2
	printf("# if we still keep waiting then we should kill the dfsoperation and report\n") >> outfilename2
	printf("# error.\n") >> outfilename2
	printf("# \n") >> outfilename2
}

















#!/bin/sh
#
# @OSF_COPYRIGHT@
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
# src directory for the full copyright text.
#
# HISTORY
# $Log: test8,v $
# Revision 1.1.10.1  1996/10/17  18:20:28  damon
# 	Submitting on behalf of Transarc
# 	[1996/10/17  16:50:50  damon]
#
# Revision 1.1.4.4  1993/01/11  18:27:10  htf
# 	Embedded copyright notice
# 	[1993/01/11  17:01:15  htf]
# 
# Revision 1.1.4.3  1992/10/28  16:22:46  jaffe
# 	Transarc delta: fred-ot5472-use-testhome-variable 1.1
# 	  Selected comments:
# 	    Fixed the fs and low tests to correctly use TESTTOP.  We were setting a
# 	    variable, testhome, as the location for the test scripts and executables,
# 	    but we did not use it to execute C programs.
# 	    (I checked out some scripts which did not need this change.)
# 	    No changes made.
# 	Transarc delta: jess-add-dumpkernel-in-fs-tests 1.3
# 	  Selected comments:
# 	    The icldump command and debug option for the tests have been added in the
# 	    fs test scripts. You can run fs/tests with -debug to dump kernel in case
# 	    of error. The delta also adds the icl_DumpKernel function in the C programm.
# 	    See above..
# 	    Put the debug option in test1.
# 	    When the debug is set the dumpfile is always created eventhough
# 	    there is no error.
# 	Transarc delta: jess-fs-path-for-icldump 1.1
# 	  Selected comments:
# 	    This delta adds the path for icldump command. The command has been
# 	    installed at "util" dir in test tree by Fred's delta.
# 	    See above.
# 	Transarc delta: jess-ot5320-fix-fs-low-testhome 1.1
# 	  Selected comments:
# 	    The fs and low test shell scripts have the following if statement
# 	    if [ "$TESTTOP" = "`pwd`" ]
# 	    then
# 	    UTIL_DIR=../util
# 	    testhome=$TESTTOP
# 	    else
# 	    UTIL_DIR=$TESTTOP/util
# 	    testhome=$TESTTOP/$testSuiteType
# 	    fi
# 	    The problem is that variable testSuiteType is not defined at this time.
# 	    See above.
# 	[1992/10/27  18:30:21  jaffe]
# 
# Revision 1.1.4.2  1992/08/28  18:13:14  jaffe
# 	Transarc delta: rajesh-clean-fs-tests 1.6
# 	  Selected comments:
# 	    To remove make, clean options from fs tests
# 	    Really no change
# 	    Make the scripts modular, structured.
# 	    The variable names are changed to follow coding standards.
# 	    See above.
# 	    Apply modification mentioned in revision 1.2 to 2 missed test file
# 	    err1 and err2.
# 	    Some bug fixes, and revision of tests err1 and err2. Introduction of
# 	    a common functions ProcessResult to analyse the result.
# 	    See above.
# 	    Further changes to some utility functions.
# 	    Added error test err2 to the Makefile
# 	[1992/08/28  12:21:22  jaffe]
# 
# Revision 1.1.2.3  1992/05/29  22:59:22  mason
# 	Transarc delta: fred-3754-change-script-name 1.1
# 	  Selected comments:
# 	    To clean up a number of defects with the tests.  In addition to defect
# 	    3754, the changes also fix defects 3750 and 3748.
# 	    Fixed setting of TESTTOP variable.
# 	[1992/05/29  12:48:11  mason]
# 
# Revision 1.1.2.2  1992/05/21  12:41:36  jaffe
# 	Transarc delta: fred-2980-and-2981-fix-sys 1.1
# 	  Selected comments:
# 	    To fix reported defects indicating files could not be found.  Added two
# 	    shell scripts, one to issue the correct command to get the system type
# 	    (either AFS or DFS), and a second to generate a file from a string.
# 	    Change variable sys to dfs_fsSysName and use fsSetSysName shell script.
# 	Transarc delta: fred-merge-tests 1.1
# 	  Selected comments:
# 	    Created this delta to merge Phil Hirsch's final DFS test code changes with
# 	    the test code that the OSF had.  Hopefully, this means we and the OSF
# 	    should be looking at the same test code.
# 	    Changes to facilitate merge of local DFS test code with the OSF's.
# 	Transarc delta: fred-remove-sys 1.1
# 	  Selected comments:
# 	    To remove dependency on the AFS sys command in the test scripts.
# 	    To remove dependency on AFS sys command.
# 
# 	$TALog: test8,v $
# 	Revision 4.24  1994/11/01  22:23:32  cfe
# 	Bring over the changes that the OSF made in going from their DCE 1.0.3
# 	release to their DCE 1.1 release.
# 	[from r4.23 by delta cfe-db6109-merge-1.0.3-to-1.1-diffs, r1.1]
# 
# 	[1992/05/20  19:31:55  jaffe]
# 
# $EndLog$
#
###############################################################################
#       Copyright (C) 1991, 1992 Transarc Corporation - All rights reserved   #
###############################################################################

# This script does filesystem-to-filesystem operations. You specifiy two
# directory names, and many common file operations are performed using the
# "from" directory as a source and the "to" directory as a destination.

# Usage: test8 [-from dirname] [-to dirname] [-nomvdir] [-debug]

# Note: default is test8 -from . -to . The "-nomvdir" option refrains from
# attempting to move directories across filesystems.

# Highest error number is: 15.

###############################################################################

#
# PrintUsage() -
#   Prints the usage message for this script.

PrintUsage()
{
    echo "$programName does filesystem-to-filesystem operations"
    echo "Usage: $programName -from dirname -to dirname [-nomvdir]"
}

#
# Initialise some variables. UTIL_DIR is the directory containing 
# the script fs_FunctionsScript with common functions.
#

TESTTOP=${TESTTOP:="`pwd`"}

if [ "$TESTTOP" = "`pwd`" ]
then
    UTIL_DIR=../util
    testhome=$TESTTOP
else
    UTIL_DIR=$TESTTOP/util
    testhome=$TESTTOP/fs
fi

. $UTIL_DIR/fs_FunctionsScript
. $UTIL_DIR/fs_SetSysVar
createFileCmd="$UTIL_DIR/fs_GenerateFile"

trap '
    rm -rf $fromdir $todir
    echo "$programName killed; returning $scriptErrorExit" | tee -a $logFile
 
    exit $scriptErrorExit
     ' 2 3 15

#
# Initialise setup variables
#

fs_InitSetup fs

#
# Default option argument values
#

fromdir="."
todir="."
mvflag="TRUE"

#
# Parse the command line
#

while [ "$1" != "" ]
do 
    case $1 in 
        help|-help) PrintUsage
                    exit $successExit
                    ;;

        from|-from)     
                    CheckOptionValue "from" $testSuiteType $programName $*
                    fromdir=$2
                    shift
                    shift
                    ;;

        to|-to)     CheckOptionValue "to" $testSuiteType $programName $*
                    todir=$2
                    shift
                    shift
                    ;;

        nomvdir|-nomvdir)     
                    mvflag="FALSE"
                    shift
                    ;;
        debug|-debug)
                    dumpkernel="true"
                    shift
                    ;;
        *)          echo "ERROR $testSuiteType/$programName: invalid argument \"$1\"" | tee -a $logFile
                    exit $scriptErrExit
                    ;;
    esac
done

#
# Validate arguments
#

if [ ! -d $fromdir ]
then 
    echo "$programName: from-dir $fromdir does not exist" | tee -a $logFile
    exit $scriptErrorExit
elif [ ! -d $todir ]
then 
    echo "$programName: to-dir $todir does not exist" | tee -a $logFile
    exit $scriptErrorExit
fi

cd $fromdir
fromdir=`pwd`/$programName.$$.fr
cd $currentDir
if [ -d $fromdir ]
then 
    echo "$programName: temp from-dir $fromdir exists" | tee -a $logFile
    exit $scriptErrorExit
else 
    mkdir $fromdir
fi

cd $todir
todir=`pwd`/$programName.$$.to
cd $currentDir
if [ -d $todir ]
then 
    echo "$programName: temp to-dir $todir exists" | tee -a $logFile
    exit $scriptErrorExit
else 
    mkdir $todir
fi

###############################################################################

(
    echo "$programName (fs-fs) starting"
    echo "Host `hostname` ($fs_sysName)"
    date
) | tee -a $logFile
echo "From $fromdir" | tee -a $logFile
echo "  to $todir" | tee -a $logFile

echo "" | tee -a $logFile

# **CLEAN THE FOLLOWING STRUCTURE - i.e. modify 
#   fs_DetermineFSType to only determine fs type and 
#   another function to print stats of that filesystem.

cd $fromdir
(
    echo "Details of fromdir directory $fromdir"
    echo "-------------------------------------"
) | tee -a $logFile
fs_DetermineFSType

cd $todir
(
    echo "Details of todir directory $todir"
    echo "-------------------------------------"
) | tee -a $logFile
fs_DetermineFSType

if [ $mvflag != "TRUE" ]
then 
    (
        echo ""
        echo "Will not mv directories."
    ) | tee -a $logFile
fi
echo "" | tee -a $logFile

cd $fromdir
echo "This is from-file 1" > ffile1
cat ffile1 ffile1 > ffile2
echo "And this is from-file 3" > ffile3
cp ffile1 ffile4
cp ffile3 ffile5
mkdir fdir1 fdir1/fsdir1
for f in 0 1 2 3 4 5 6 7 8 9
do 
    echo "This is from-file fdir1/ffile$f" > fdir1/ffile$f
done
mkdir fdir2
cp -r fdir1/* fdir2

cp ffile1 $todir/tfile1
diff ffile1 $todir/tfile1 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Copy ef to nef failed (E1)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cp ffile3 $todir/tfile1
diff ffile3 $todir/tfile1 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Copy ef to ef failed (E2)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cat ffile1 > $todir/tfile2
diff ffile1 $todir/tfile2 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Cat ef to nef failed (E3)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cat ffile1 > $todir/tfile2
diff ffile1 $todir/tfile2 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Cat ef to ef failed (E4)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cat > ffile6 < $todir/tfile2
diff ffile6 ffile1 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Cat from ef failed (E5)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cat ffile1 >> $todir/tfile2
diff ffile2 $todir/tfile2 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Cat-append ef to ef failed (E6)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

rm $todir/tfile2
cat ffile1 >> $todir/tfile2
diff ffile1 $todir/tfile2 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Cat-append ef to nef failed (E7)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

ln -s $fromdir/ffile4 $todir/sym1
diff ffile1 $todir/sym1 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Symlink ef failed (E8)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

ln -s $fromdir/ffile5 $todir/sym2
ls -l $todir/sym2 > /dev/null
if [ $? -ne 0 ]
then 
    echo "ls 1 after symlink nef failed (E9)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

ls -lf $todir/sym2 2> /dev/null > /dev/null
if [ $? -eq 0 ]
then 
    echo "ls 2 after symlink nef failed (E10)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

mv ffile4 $todir/tfile4
diff ffile1 $todir/tfile4 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Move ef to nef failed (E11)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

mv ffile5 $todir/tfile4
diff ffile3 $todir/tfile4 > /dev/null
if [ $? -ne 0 ]
then 
    echo "Move ef to nef failed (E12)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

if [ $mvflag = "TRUE" ]
then
    mv fdir2 $todir/tdir2
    diff fdir1 $todir/tdir2 > /dev/null 2> /dev/null
    if [ $? -ne 0 ]
    then 
        echo "Move directory failed (E13)" | tee -a $logFile
        if [ $dumpkernel = "true" ]
        then
           $UTIL_DIR/icldump >> $logFile
        fi
        errorCount=`expr $errorCount + 1`
    fi
fi

ls -FRail $todir > /dev/null
if [ $? -ne 0 ]
then 
    echo "ls -FRail failed (E14)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

rm -rf $todir/*
cp -r * $todir
diff . $todir > /dev/null
if [ $? -ne 0 ]
then 
    echo "Copy directory failed (E15)" | tee -a $logFile
    if [ $dumpkernel = "true" ]
    then
           $UTIL_DIR/icldump >> $logFile
    fi
    errorCount=`expr $errorCount + 1`
fi

cd $currentDir
if [ $errorCount -eq 0 ]
then 
    echo "All operations succeeded." | tee -a $logFile
fi

###############################################################################

rm -rf $fromdir $todir

(
    echo ""
    echo "$testSuiteType/$programName returning $errorCount in $currentDir"
    date) | tee -a $logFile

exit $errorCount

###############################################################################
